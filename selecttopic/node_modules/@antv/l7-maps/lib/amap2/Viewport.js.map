{"version":3,"sources":["../../src/amap2/Viewport.ts"],"names":["Viewport","mat4","create","mapCamera","zoom","center","offsetOrigin","cameraPosition","up","lookAt","aspect","near","far","fov","perspective","projectionMatrix","Math","PI","eyePoint","vec3","fromValues","lookAtPoint","upDirect","viewMatrix","viewUncenteredMatrix","clone","translate","multiply","viewProjectionMatrix","ViewProjectionMatrixUncentered","lng","lat","lngLat","scale","maxs","max","min","zoomScale","d","x","y","log","tan","a","b","c"],"mappings":"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","sourcesContent":["import { IMapCamera, IViewport } from '@antv/l7-core';\nimport { mat4, vec3 } from 'gl-matrix';\nexport default class Viewport implements IViewport {\n  private projectionMatrix: mat4 = mat4.create();\n  private viewMatrix: mat4 = mat4.create();\n  private viewProjectionMatrix: mat4 = mat4.create();\n  private ViewProjectionMatrixUncentered: mat4 = mat4.create();\n  private viewUncenteredMatrix: mat4 = mat4.create();\n  private zoom: number;\n  private center: number[];\n\n  public syncWithMapCamera(mapCamera: Partial<IMapCamera>) {\n    const {\n      zoom = 1,\n      center = [0, 0],\n      offsetOrigin = [0, 0],\n      cameraPosition = [0, 0, 0],\n      up = [0, 1, 0],\n      lookAt = [0, 0, 0],\n      aspect = 1,\n      near = 0.1,\n      far = 1000,\n      fov = 45,\n      // @ts-ignore\n      // left,\n      // right,\n      // bottom,\n      // top,\n    } = mapCamera;\n    this.zoom = zoom;\n    this.center = center;\n\n    // 计算透视投影矩阵 projectionMatrix\n    mat4.perspective(\n      this.projectionMatrix,\n      (fov / 180) * Math.PI,\n      aspect,\n      near,\n      far,\n    );\n\n    // ortho(out, left, right, bottom, top, near, far)\n    // mat4.ortho(this.projectionMatrix, left, right, bottom, top, near, far)\n    // console.log(left, right, bottom, top, near, far)\n    // 计算相机矩阵 viewMatrix\n    // console.log(cameraPosition)\n    const eyePoint = vec3.fromValues(...cameraPosition);\n    // const eyePoint = vec3.fromValues(cameraPosition[0], cameraPosition[1], 0.1);\n    // 计算相机矩阵 viewMatrix\n\n    const lookAtPoint = vec3.fromValues(...lookAt);\n    // const lookAtPoint = vec3.fromValues(...cameraPosition);\n    // const lookAtPoint = vec3.fromValues(cameraPosition[0], cameraPosition[1], -0.1);\n    // const lookAtPoint = vec3.fromValues(0, 0, 0);\n\n    const upDirect = vec3.fromValues(...up);\n    // const upDirect = vec3.fromValues(0, 1, 0);\n    mat4.lookAt(this.viewMatrix, eyePoint, lookAtPoint, upDirect);\n\n    this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n\n    // 移动相机位置\n    mat4.translate(\n      this.viewMatrix,\n      this.viewMatrix,\n      vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0),\n    );\n\n    mat4.multiply(\n      this.viewProjectionMatrix,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n    mat4.multiply(\n      this.ViewProjectionMatrixUncentered,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n  }\n\n  public getZoom(): number {\n    return this.zoom;\n  }\n\n  public getZoomScale(): number {\n    // 512 尺寸下的缩放：2 ^ 20\n    return 1048576;\n  }\n\n  public getCenter(): [number, number] {\n    const [lng, lat] = this.center;\n    return [lng, lat];\n  }\n\n  public getProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.projectionMatrix;\n  }\n\n  public getModelMatrix(): number[] {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  }\n\n  public getViewMatrix(): number[] {\n    // @ts-ignore\n    return this.viewMatrix;\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.viewUncenteredMatrix;\n  }\n  public getViewProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.viewProjectionMatrix;\n  }\n\n  public getViewProjectionMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.ViewProjectionMatrixUncentered;\n  }\n\n  public getFocalDistance() {\n    return 1;\n  }\n\n  /**\n   * P20 坐标系，固定 scale\n   */\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    const maxs = 85.0511287798;\n    const lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n    // tslint:disable-next-line:no-bitwise\n    const zoomScale = 256 << 20;\n    let d = Math.PI / 180;\n    let x = lngLat[0] * d;\n    let y = lat * d;\n    y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n    const a = 0.5 / Math.PI;\n    const b = 0.5;\n    const c = -0.5 / Math.PI;\n    d = 0.5;\n    x = zoomScale * (a * x + b) - 215440491;\n    y = -(zoomScale * (c * y + d) - 106744817);\n    return [x, y];\n  }\n}\n"],"file":"Viewport.js"}