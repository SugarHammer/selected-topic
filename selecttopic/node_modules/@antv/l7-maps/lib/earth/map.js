"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));

var _l7Core = require("@antv/l7-core");

var _l7Map = require("@antv/l7-map");

var _l7Utils = require("@antv/l7-utils");

var _inversify = require("inversify");

require("reflect-metadata");

var _version = require("../version");

var _Viewport = _interopRequireDefault(require("./Viewport"));

var _simpleMapCoord = require("../simpleMapCoord");

var _theme = require("./theme");

var _excluded = ["id", "attributionControl", "style", "rotation", "mapInstance"];

var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var EventMap = {
  mapmove: 'move',
  camerachange: 'move',
  zoomchange: 'zoom',
  dragging: 'drag'
};
var LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;
var L7EarthService = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.MapConfig), _dec3 = (0, _inversify.inject)(_l7Core.TYPES.IGlobalConfigService), _dec4 = (0, _inversify.inject)(_l7Core.TYPES.ICoordinateSystemService), _dec5 = (0, _inversify.inject)(_l7Core.TYPES.IEventEmitter), _dec(_class = (_class2 = function () {
  function L7EarthService() {
    var _this = this;

    (0, _classCallCheck2.default)(this, L7EarthService);
    (0, _defineProperty2.default)(this, "version", _version.Version.GLOBEL);
    (0, _defineProperty2.default)(this, "map", void 0);
    (0, _defineProperty2.default)(this, "simpleMapCoord", new _simpleMapCoord.SimpleMapCoord());
    (0, _defineProperty2.default)(this, "dragging", false);
    (0, _defineProperty2.default)(this, "bgColor", '#000');
    (0, _initializerDefineProperty2.default)(this, "config", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor2, this);
    (0, _initializerDefineProperty2.default)(this, "coordinateSystemService", _descriptor3, this);
    (0, _initializerDefineProperty2.default)(this, "eventEmitter", _descriptor4, this);
    (0, _defineProperty2.default)(this, "viewport", void 0);
    (0, _defineProperty2.default)(this, "markerContainer", void 0);
    (0, _defineProperty2.default)(this, "cameraChangedCallback", void 0);
    (0, _defineProperty2.default)(this, "$mapContainer", void 0);
    (0, _defineProperty2.default)(this, "handleCameraChanging", void 0);
    (0, _defineProperty2.default)(this, "handleCameraTimer", void 0);
    (0, _defineProperty2.default)(this, "handleCameraChanged", function (e) {
      _this.emit('mapchange');

      var DELAY_TIME = 2000;
      _this.handleCameraChanging = true;

      if (_this.handleCameraTimer) {
        clearTimeout(_this.handleCameraTimer);
      }

      _this.handleCameraTimer = setTimeout(function () {
        _this.handleCameraChanging = false;
      }, DELAY_TIME);
      var rotateStep = 0.02;

      if (e.type && e.originalEvent) {
        if (e.originalEvent.type === 'wheel') {
          _this.viewport.scaleZoom(0.01 * Math.sign(e.originalEvent.wheelDelta) * -1);
        }

        if (Math.abs(e.originalEvent.movementX) > Math.abs(e.originalEvent.movementY)) {
          if (e.originalEvent.movementX > 0) {
            _this.viewport.rotateY(rotateStep);
          } else if (e.originalEvent.movementX < 0) {
            _this.viewport.rotateY(-rotateStep);
          }
        } else {
          if (e.originalEvent.movementY > 0) {
            _this.viewport.rotateX(rotateStep);
          } else if (e.originalEvent.movementY < 0) {
            _this.viewport.rotateX(-rotateStep);
          }
        }
      }

      var _this$config$offsetCo = _this.config.offsetCoordinate,
          offsetCoordinate = _this$config$offsetCo === void 0 ? true : _this$config$offsetCo;

      _this.viewport.syncWithMapCamera({
        viewportHeight: _this.map.transform.height,
        viewportWidth: _this.map.transform.width
      });

      if (_this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {
        _this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT_OFFSET);
      } else {
        _this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT);
      }

      _this.cameraChangedCallback(_this.viewport);
    });
  }

  (0, _createClass2.default)(L7EarthService, [{
    key: "setBgColor",
    value: function setBgColor(color) {
      this.bgColor = color;
    }
  }, {
    key: "addMarkerContainer",
    value: function addMarkerContainer() {
      var container = this.map.getCanvasContainer();
      this.markerContainer = _l7Utils.DOM.create('div', 'l7-marker-container', container);
      this.markerContainer.setAttribute('tabindex', '-1');
    }
  }, {
    key: "getMarkerContainer",
    value: function getMarkerContainer() {
      return this.markerContainer;
    }
  }, {
    key: "on",
    value: function on(type, handle) {
      if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
        this.eventEmitter.on(type, handle);
      } else {
        this.map.on(EventMap[type] || type, handle);
      }
    }
  }, {
    key: "off",
    value: function off(type, handle) {
      this.map.off(EventMap[type] || type, handle);
      this.eventEmitter.off(type, handle);
    }
  }, {
    key: "getContainer",
    value: function getContainer() {
      return this.map.getContainer();
    }
  }, {
    key: "getMapCanvasContainer",
    value: function getMapCanvasContainer() {
      return this.map.getCanvasContainer();
    }
  }, {
    key: "getSize",
    value: function getSize() {
      var size = this.map.transform;
      return [size.width, size.height];
    }
  }, {
    key: "getType",
    value: function getType() {
      return 'default';
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.map.getZoom();
    }
  }, {
    key: "setZoom",
    value: function setZoom(zoom) {
      return this.map.setZoom(zoom);
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return this.map.getCenter();
    }
  }, {
    key: "setCenter",
    value: function setCenter(lnglat) {
      this.map.setCenter(lnglat);
    }
  }, {
    key: "getPitch",
    value: function getPitch() {
      return this.map.getPitch();
    }
  }, {
    key: "getRotation",
    value: function getRotation() {
      return this.map.getBearing();
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      return this.map.getBounds().toArray();
    }
  }, {
    key: "getMinZoom",
    value: function getMinZoom() {
      return this.map.getMinZoom();
    }
  }, {
    key: "getMaxZoom",
    value: function getMaxZoom() {
      return this.map.getMaxZoom();
    }
  }, {
    key: "setRotation",
    value: function setRotation(rotation) {
      this.map.setBearing(rotation);
    }
  }, {
    key: "zoomIn",
    value: function zoomIn(option, eventData) {
      this.map.zoomIn(option, eventData);
    }
  }, {
    key: "zoomOut",
    value: function zoomOut(option, eventData) {
      this.map.zoomOut(option, eventData);
    }
  }, {
    key: "setPitch",
    value: function setPitch(pitch) {
      return this.map.setPitch(pitch);
    }
  }, {
    key: "panTo",
    value: function panTo(p) {
      this.map.panTo(p);
    }
  }, {
    key: "panBy",
    value: function panBy() {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.panTo([x, y]);
    }
  }, {
    key: "fitBounds",
    value: function fitBounds(bound, fitBoundsOptions) {
      this.map.fitBounds(bound, fitBoundsOptions);
    }
  }, {
    key: "setMaxZoom",
    value: function setMaxZoom(max) {
      this.map.setMaxZoom(max);
    }
  }, {
    key: "setMinZoom",
    value: function setMinZoom(min) {
      this.map.setMinZoom(min);
    }
  }, {
    key: "setMapStatus",
    value: function setMapStatus(option) {
      if (option.doubleClickZoom === true) {
        this.map.doubleClickZoom.enable();
      }

      if (option.doubleClickZoom === false) {
        this.map.doubleClickZoom.disable();
      }

      if (option.dragEnable === false) {
        this.map.dragPan.disable();
      }

      if (option.dragEnable === true) {
        this.map.dragPan.enable();
      }

      if (option.rotateEnable === false) {
        this.map.dragRotate.disable();
      }

      if (option.dragEnable === true) {
        this.map.dragRotate.enable();
      }

      if (option.keyboardEnable === false) {
        this.map.keyboard.disable();
      }

      if (option.keyboardEnable === true) {
        this.map.keyboard.enable();
      }

      if (option.zoomEnable === false) {
        this.map.scrollZoom.disable();
      }

      if (option.zoomEnable === true) {
        this.map.scrollZoom.enable();
      }
    }
  }, {
    key: "setZoomAndCenter",
    value: function setZoomAndCenter(zoom, center) {
      this.map.flyTo({
        zoom: zoom,
        center: center
      });
    }
  }, {
    key: "setMapStyle",
    value: function setMapStyle(style) {
      this.map.setStyle(this.getMapStyle(style));
    }
  }, {
    key: "pixelToLngLat",
    value: function pixelToLngLat(pixel) {
      return this.map.unproject(pixel);
    }
  }, {
    key: "lngLatToPixel",
    value: function lngLatToPixel(lnglat) {
      return this.map.project(lnglat);
    }
  }, {
    key: "containerToLngLat",
    value: function containerToLngLat(pixel) {
      return this.map.unproject(pixel);
    }
  }, {
    key: "lngLatToContainer",
    value: function lngLatToContainer(lnglat) {
      return this.map.project(lnglat);
    }
  }, {
    key: "lngLatToMercator",
    value: function lngLatToMercator(lnglat, altitude) {
      throw new Error('not implement');
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix(lnglat, altitude, rotate) {
      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];
      var origin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        x: 0,
        y: 0,
        z: 0
      };
      throw new Error('not implement');
    }
  }, {
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var _this$config, _this$config$id, id, _this$config$attribut, attributionControl, _this$config$style, style, _this$config$rotation, rotation, mapInstance, rest;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$config = this.config, _this$config$id = _this$config.id, id = _this$config$id === void 0 ? 'map' : _this$config$id, _this$config$attribut = _this$config.attributionControl, attributionControl = _this$config$attribut === void 0 ? false : _this$config$attribut, _this$config$style = _this$config.style, style = _this$config$style === void 0 ? 'light' : _this$config$style, _this$config$rotation = _this$config.rotation, rotation = _this$config$rotation === void 0 ? 0 : _this$config$rotation, mapInstance = _this$config.mapInstance, rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded);
                this.viewport = new _Viewport.default();
                this.$mapContainer = this.creatAmapContainer(id);
                this.map = new _l7Map.EarthMap(_objectSpread({
                  container: this.$mapContainer,
                  style: this.getMapStyle(style),
                  bearing: rotation
                }, rest));
                this.map.on('load', this.handleCameraChanged);
                this.map.on('move', this.handleCameraChanged);
                this.handleCameraChanged({});

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$$mapContainer, _this$$mapContainer$p;

      (_this$$mapContainer = this.$mapContainer) === null || _this$$mapContainer === void 0 ? void 0 : (_this$$mapContainer$p = _this$$mapContainer.parentNode) === null || _this$$mapContainer$p === void 0 ? void 0 : _this$$mapContainer$p.removeChild(this.$mapContainer);
      this.eventEmitter.removeAllListeners();

      if (this.map) {
        this.map.remove();
        this.$mapContainer = null;
      }
    }
  }, {
    key: "emit",
    value: function emit(name) {
      var _this$eventEmitter;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_this$eventEmitter = this.eventEmitter).emit.apply(_this$eventEmitter, [name].concat(args));
    }
  }, {
    key: "once",
    value: function once(name) {
      var _this$eventEmitter2;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_this$eventEmitter2 = this.eventEmitter).once.apply(_this$eventEmitter2, [name].concat(args));
    }
  }, {
    key: "getMapContainer",
    value: function getMapContainer() {
      return this.$mapContainer;
    }
  }, {
    key: "exportMap",
    value: function exportMap(type) {
      var renderCanvas = this.map.getCanvas();
      var layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
      return layersPng;
    }
  }, {
    key: "onCameraChanged",
    value: function onCameraChanged(callback) {
      this.cameraChangedCallback = callback;
    }
  }, {
    key: "rotateY",
    value: function rotateY(option) {
      var _ref = option || {},
          _ref$force = _ref.force,
          force = _ref$force === void 0 ? false : _ref$force,
          _ref$reg = _ref.reg,
          reg = _ref$reg === void 0 ? 0.01 : _ref$reg;

      if (this.handleCameraChanging && !force) {
        return;
      }

      if (this.viewport) {
        this.viewport.rotateY(reg);
        this.viewport.syncWithMapCamera({
          viewportHeight: this.map.transform.height,
          viewportWidth: this.map.transform.width
        });
        this.cameraChangedCallback(this.viewport);
      }
    }
  }, {
    key: "creatAmapContainer",
    value: function creatAmapContainer(id) {
      var $wrapper = id;

      if (typeof id === 'string') {
        $wrapper = document.getElementById(id);
      }

      return $wrapper;
    }
  }, {
    key: "getMapStyle",
    value: function getMapStyle(name) {
      if (typeof name !== 'string') {
        return name;
      }

      return _theme.MapTheme[name] ? _theme.MapTheme[name] : name;
    }
  }]);
  return L7EarthService;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "config", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "configService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "coordinateSystemService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "eventEmitter", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = L7EarthService;
//# sourceMappingURL=map.js.map