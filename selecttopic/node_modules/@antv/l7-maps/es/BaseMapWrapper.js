import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _class, _descriptor;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { lazyInject, TYPES } from '@antv/l7-core';
var BaseMapWrapper = (_dec = lazyInject(TYPES.IGlobalConfigService), (_class = function () {
  function BaseMapWrapper(config) {
    _classCallCheck(this, BaseMapWrapper);

    _initializerDefineProperty(this, "configService", _descriptor, this);

    _defineProperty(this, "config", void 0);

    this.config = config;
  }

  _createClass(BaseMapWrapper, [{
    key: "setContainer",
    value: function setContainer(sceneContainer, id, canvas, hasBaseMap) {
      sceneContainer.bind(TYPES.MapConfig).toConstantValue(_objectSpread(_objectSpread({}, this.config), {}, {
        id: id,
        canvas: canvas,
        hasBaseMap: hasBaseMap
      }));
      sceneContainer.bind(TYPES.IMapService).to(this.getServiceConstructor()).inSingletonScope();
    }
  }, {
    key: "getServiceConstructor",
    value: function getServiceConstructor() {
      throw new Error('Method not implemented.');
    }
  }]);

  return BaseMapWrapper;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "configService", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class));
export { BaseMapWrapper as default };
//# sourceMappingURL=BaseMapWrapper.js.map