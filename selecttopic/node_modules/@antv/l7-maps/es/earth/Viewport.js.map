{"version":3,"sources":["../../src/earth/Viewport.ts"],"names":["mat4","vec3","Viewport","Math","PI","create","mapCamera","viewportHeight","viewportWidth","aspect","near","far","fov","perspective","projectionMatrix","x","earthCameraRadius","cos","xzReg","z","sin","y","yReg","cameraPosition","fromValues","normalize","multiply","scale","earthCameraZoom","crossY","cross","up","target","lookAt","viewMatrix","viewUncenteredMatrix","clone","viewProjectionMatrix","ViewProjectionMatrixUncentered","r","min","max","pow","getZoom","modelMatrix","lngLat","viewport","projectFlat"],"mappings":"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","sourcesContent":["import { IMapCamera, IViewport } from '@antv/l7-core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nexport interface IEarthCamera {\n  viewportHeight: number;\n  viewportWidth: number;\n}\n\nexport default class Viewport implements IViewport {\n  // TODO: 初始化相机的姿态 看向地球\n  private xzReg: number = -Math.PI * 0.6;\n  private yReg: number = Math.PI * 0.2;\n  // 默认的地球相机半径、地球相机缩放层级\n  private earthCameraRadius: number = 200;\n  private earthCameraZoom: number = 1;\n\n  private cameraPosition: vec3 = vec3.create();\n\n  private viewport: WebMercatorViewport;\n\n  private projectionMatrix: mat4 = mat4.create();\n  private modelMatrix: mat4 = mat4.create();\n  private viewMatrix: mat4 = mat4.create();\n  private viewProjectionMatrix: mat4 = mat4.create();\n  private ViewProjectionMatrixUncentered: mat4 = mat4.create();\n  private viewUncenteredMatrix: mat4 = mat4.create();\n\n  public syncWithMapCamera(mapCamera: Partial<IEarthCamera>) {\n    const { viewportHeight = 1, viewportWidth = 1 } = mapCamera;\n    const aspect = viewportWidth / viewportHeight;\n    const near = 0.1;\n    const far = 10000;\n    const fov = 20;\n\n    // 计算透视投影矩阵 projectionMatrix\n    mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n    // 计算相机矩阵 viewMatrix\n    const x = this.earthCameraRadius * Math.cos(this.xzReg);\n    const z = this.earthCameraRadius * Math.sin(this.xzReg);\n    const y = this.earthCameraRadius * Math.sin(this.yReg);\n\n    this.cameraPosition = vec3.fromValues(x, y, z);\n    vec3.normalize(this.cameraPosition, this.cameraPosition);\n    vec3.multiply(\n      this.cameraPosition,\n      this.cameraPosition,\n      vec3.fromValues(\n        this.earthCameraRadius,\n        this.earthCameraRadius,\n        this.earthCameraRadius,\n      ),\n    );\n\n    vec3.scale(this.cameraPosition, this.cameraPosition, this.earthCameraZoom);\n\n    const crossY = vec3.create();\n    vec3.cross(crossY, this.cameraPosition, vec3.fromValues(0, 1, 0));\n\n    const up = vec3.fromValues(0, 1, 0);\n    vec3.cross(up, crossY, this.cameraPosition);\n\n    const target = vec3.fromValues(0, 0, 0);\n    mat4.lookAt(this.viewMatrix, this.cameraPosition, target, up);\n    this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n\n    mat4.multiply(\n      this.viewProjectionMatrix,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n    mat4.multiply(\n      this.ViewProjectionMatrixUncentered,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n  }\n\n  /**\n   * 旋转方法 Y 轴\n   * @param r\n   */\n  public rotateY(r: number) {\n    this.xzReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n  }\n\n  /**\n   * 旋转方法 X 轴\n   * @param r\n   */\n  public rotateX(r: number) {\n    this.yReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n  }\n\n  /**\n   * 缩放方法\n   * @param z\n   */\n  public scaleZoom(z: number) {\n    this.earthCameraZoom += z;\n    this.earthCameraZoom = Math.max(this.earthCameraZoom, 0.6);\n  }\n\n  public getZoom(): number {\n    return 4;\n  }\n\n  public getZoomScale(): number {\n    return Math.pow(2, this.getZoom());\n  }\n\n  public getCenter(): [number, number] {\n    return [0, 0];\n  }\n\n  public getProjectionMatrix(): number[] {\n    return this.projectionMatrix as number[];\n  }\n\n  public getModelMatrix(): number[] {\n    return this.modelMatrix as number[];\n  }\n\n  public getViewMatrix(): number[] {\n    return this.viewMatrix as number[];\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    return this.viewMatrix as number[];\n  }\n  public getViewProjectionMatrix(): number[] {\n    return this.viewProjectionMatrix as number[];\n  }\n\n  public getViewProjectionMatrixUncentered(): number[] {\n    return this.viewProjectionMatrix as number[];\n  }\n  public getFocalDistance() {\n    return 1;\n  }\n\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    return this.viewport.projectFlat(lngLat, scale);\n  }\n}\n"],"file":"Viewport.js"}