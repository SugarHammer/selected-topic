import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { AsyncParallelHook } from '@antv/async-hook';
import { $window, DOM } from '@antv/l7-utils';
import elementResizeEvent, { unbind } from 'element-resize-event';
import { EventEmitter } from 'eventemitter3';
import { inject, injectable } from 'inversify';
import 'reflect-metadata';
import { TYPES } from '../../types';
import { createRendererContainer } from '../../utils/dom';
import { InteractionEvent } from '../interaction/IInteractionService';
var Scene = (_dec = injectable(), _dec2 = inject(TYPES.SceneID), _dec3 = inject(TYPES.IIconService), _dec4 = inject(TYPES.IFontService), _dec5 = inject(TYPES.IControlService), _dec6 = inject(TYPES.IGlobalConfigService), _dec7 = inject(TYPES.IMapService), _dec8 = inject(TYPES.ICoordinateSystemService), _dec9 = inject(TYPES.IRendererService), _dec10 = inject(TYPES.ILayerService), _dec11 = inject(TYPES.ICameraService), _dec12 = inject(TYPES.IInteractionService), _dec13 = inject(TYPES.IPickingService), _dec14 = inject(TYPES.IShaderModuleService), _dec15 = inject(TYPES.IMarkerService), _dec16 = inject(TYPES.IPopupService), _dec(_class = (_class2 = function (_EventEmitter) {
  _inherits(Scene, _EventEmitter);

  var _super = _createSuper(Scene);

  function Scene() {
    var _this;

    _classCallCheck(this, Scene);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "destroyed", false);

    _defineProperty(_assertThisInitialized(_this), "loaded", false);

    _defineProperty(_assertThisInitialized(_this), "loadFont", false);

    _defineProperty(_assertThisInitialized(_this), "fontFamily", '');

    _initializerDefineProperty(_assertThisInitialized(_this), "id", _descriptor, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "iconService", _descriptor2, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "fontService", _descriptor3, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "controlService", _descriptor4, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "configService", _descriptor5, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "map", _descriptor6, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "coordinateSystemService", _descriptor7, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "rendererService", _descriptor8, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "layerService", _descriptor9, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "cameraService", _descriptor10, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "interactionService", _descriptor11, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "pickingService", _descriptor12, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "shaderModuleService", _descriptor13, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "markerService", _descriptor14, _assertThisInitialized(_this));

    _initializerDefineProperty(_assertThisInitialized(_this), "popupService", _descriptor15, _assertThisInitialized(_this));

    _defineProperty(_assertThisInitialized(_this), "inited", false);

    _defineProperty(_assertThisInitialized(_this), "initPromise", void 0);

    _defineProperty(_assertThisInitialized(_this), "rendering", false);

    _defineProperty(_assertThisInitialized(_this), "$container", void 0);

    _defineProperty(_assertThisInitialized(_this), "canvas", void 0);

    _defineProperty(_assertThisInitialized(_this), "markerContainer", void 0);

    _defineProperty(_assertThisInitialized(_this), "hooks", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleWindowResized", function () {
      _this.emit('resize');

      if (_this.$container) {
        _this.initContainer();

        DOM.triggerResize();
        _this.coordinateSystemService.needRefresh = true;

        _this.render();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleMapCameraChanged", function (viewport) {
      _this.cameraService.update(viewport);

      _this.render();
    });

    _this.hooks = {
      init: new AsyncParallelHook()
    };
    return _this;
  }

  _createClass(Scene, [{
    key: "init",
    value: function init(sceneConfig) {
      var _this2 = this;

      this.configService.setSceneConfig(this.id, sceneConfig);
      this.shaderModuleService.registerBuiltinModules();
      this.iconService.init();
      this.iconService.on('imageUpdate', function () {
        return _this2.render();
      });
      this.fontService.init();
      this.hooks.init.tapPromise('initMap', _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return new Promise(function (resolve) {
                  _this2.map.onCameraChanged(function (viewport) {
                    _this2.cameraService.init();

                    _this2.cameraService.update(viewport);

                    if (_this2.map.version !== 'GAODE2.x') {
                      resolve();
                    }
                  });

                  if (_this2.map.version !== 'GAODE2.x') {
                    _this2.map.init();
                  } else {
                    resolve();
                  }
                });

              case 2:
                if (!(_this2.map.version === 'GAODE2.x' && _this2.map.initViewPort)) {
                  _context.next = 6;
                  break;
                }

                _context.next = 5;
                return _this2.map.init();

              case 5:
                _this2.map.initViewPort();

              case 6:
                _this2.map.onCameraChanged(_this2.handleMapCameraChanged);

                _this2.map.addMarkerContainer();

                _this2.markerService.addMarkers();

                _this2.markerService.addMarkerLayers();

                _this2.popupService.initPopup();

                _this2.interactionService.init();

                _this2.interactionService.on(InteractionEvent.Drag, _this2.addSceneEvent.bind(_this2));

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
      this.hooks.init.tapPromise('initRenderer', _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {
        var $container, _$window$matchMedia;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                $container = createRendererContainer(_this2.configService.getSceneConfig(_this2.id).id || '');
                _this2.$container = $container;

                if (!$container) {
                  _context2.next = 11;
                  break;
                }

                _this2.canvas = DOM.create('canvas', '', $container);

                _this2.setCanvas();

                _context2.next = 7;
                return _this2.rendererService.init(_this2.canvas, _this2.configService.getSceneConfig(_this2.id));

              case 7:
                elementResizeEvent(_this2.$container, _this2.handleWindowResized);

                if ($window.matchMedia) {
                  (_$window$matchMedia = $window.matchMedia('screen and (-webkit-min-device-pixel-ratio: 1.5)')) === null || _$window$matchMedia === void 0 ? void 0 : _$window$matchMedia.addListener(_this2.handleWindowResized);
                }

                _context2.next = 12;
                break;

              case 11:
                console.error('容器 id 不存在');

              case 12:
                _this2.pickingService.init(_this2.id);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
      this.initPromise = this.hooks.init.promise();
      this.render();
    }
  }, {
    key: "initMiniScene",
    value: function initMiniScene(sceneConfig) {
      var _this3 = this;

      this.configService.setSceneConfig(this.id, sceneConfig);
      this.shaderModuleService.registerBuiltinModules();
      this.iconService.init();
      this.iconService.on('imageUpdate', function () {
        return _this3.render();
      });
      this.fontService.init();
      this.hooks.init.tapPromise('initMap', _asyncToGenerator(_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new Promise(function (resolve) {
                  _this3.map.onCameraChanged(function (viewport) {
                    _this3.cameraService.init();

                    _this3.cameraService.update(viewport);

                    if (_this3.map.version !== 'GAODE2.x') {
                      resolve();
                    }
                  });

                  _this3.map.initMiniMap();
                });

              case 2:
                _this3.map.onCameraChanged(_this3.handleMapCameraChanged);

                _this3.interactionService.init();

                _this3.interactionService.on(InteractionEvent.Drag, _this3.addSceneEvent.bind(_this3));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));
      this.hooks.init.tapPromise('initRenderer', _asyncToGenerator(_regeneratorRuntime.mark(function _callee4() {
        var $container;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                $container = sceneConfig.canvas;
                _this3.$container = $container ? $container : null;

                if (!_this3.$container) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 5;
                return _this3.rendererService.init(sceneConfig.canvas, _this3.configService.getSceneConfig(_this3.id));

              case 5:
                _context4.next = 8;
                break;

              case 7:
                console.error('容器 id 不存在');

              case 8:
                _this3.pickingService.init(_this3.id);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      })));
      this.initPromise = this.hooks.init.promise();
      this.render();
    }
  }, {
    key: "addLayer",
    value: function addLayer(layer) {
      this.layerService.sceneService = this;
      this.layerService.add(layer);
      this.render();
    }
  }, {
    key: "render",
    value: function () {
      var _render = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this.rendering || this.destroyed)) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt("return");

              case 2:
                this.rendering = true;

                if (this.inited) {
                  _context5.next = 23;
                  break;
                }

                _context5.next = 6;
                return this.initPromise;

              case 6:
                if (this.destroyed) {
                  this.destroy();
                }

                if (!(this.loadFont && document.fonts)) {
                  _context5.next = 18;
                  break;
                }

                _context5.prev = 8;
                _context5.next = 11;
                return document.fonts.load("24px ".concat(this.fontFamily), 'L7text');

              case 11:
                _context5.next = 18;
                break;

              case 13:
                _context5.prev = 13;
                _context5.t0 = _context5["catch"](8);
                console.warn('当前环境不支持 document.fonts !');
                console.warn('当前环境不支持 iconfont !');
                console.warn(_context5.t0);

              case 18:
                this.layerService.initLayers();
                this.controlService.addControls();
                this.loaded = true;
                this.emit('loaded');
                this.inited = true;

              case 23:
                this.layerService.updateLayerRenderList();
                this.layerService.renderLayers();
                this.rendering = false;

              case 26:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[8, 13]]);
      }));

      function render() {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "addFontFace",
    value: function addFontFace(fontFamily, fontPath) {
      this.fontFamily = fontFamily;
      var style = document.createElement('style');
      style.type = 'text/css';
      style.innerText = "\n        @font-face{\n            font-family: '".concat(fontFamily, "';\n            src: url('").concat(fontPath, "') format('woff2'),\n            url('").concat(fontPath, "') format('woff'),\n            url('").concat(fontPath, "') format('truetype');\n        }");
      document.getElementsByTagName('head')[0].appendChild(style);
      this.loadFont = true;
    }
  }, {
    key: "getSceneContainer",
    value: function getSceneContainer() {
      return this.$container;
    }
  }, {
    key: "exportPng",
    value: function exportPng(type) {
      var _this$$container;

      var renderCanvas = (_this$$container = this.$container) === null || _this$$container === void 0 ? void 0 : _this$$container.getElementsByTagName('canvas')[0];
      this.render();
      var layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
      return layersPng;
    }
  }, {
    key: "getSceneConfig",
    value: function getSceneConfig() {
      return this.configService.getSceneConfig(this.id);
    }
  }, {
    key: "getPointSizeRange",
    value: function getPointSizeRange() {
      return this.rendererService.getPointSizeRange();
    }
  }, {
    key: "addMarkerContainer",
    value: function addMarkerContainer() {
      var mapContainer = this.$container.parentElement;

      if (mapContainer !== null) {
        this.markerContainer = DOM.create('div', 'l7-marker-container', mapContainer);
      }
    }
  }, {
    key: "getMarkerContainer",
    value: function getMarkerContainer() {
      return this.markerContainer;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this4 = this,
          _this$$container2,
          _this$$container2$par;

      if (!this.inited) {
        this.destroyed = true;
        return;
      }

      this.emit('destroy');
      this.layerService.destroy();
      setTimeout(function () {
        _this4.rendererService.destroy();
      });
      this.map.destroy();
      this.interactionService.destroy();
      this.controlService.destroy();
      this.markerService.destroy();
      this.fontService.destroy();
      this.iconService.destroy();
      (_this$$container2 = this.$container) === null || _this$$container2 === void 0 ? void 0 : (_this$$container2$par = _this$$container2.parentNode) === null || _this$$container2$par === void 0 ? void 0 : _this$$container2$par.removeChild(this.$container);
      this.removeAllListeners();
      this.inited = false;
      unbind(this.$container, this.handleWindowResized);

      if ($window.matchMedia) {
        var _$window$matchMedia2;

        (_$window$matchMedia2 = $window.matchMedia('screen and (min-resolution: 2dppx)')) === null || _$window$matchMedia2 === void 0 ? void 0 : _$window$matchMedia2.removeListener(this.handleWindowResized);
      }
    }
  }, {
    key: "initContainer",
    value: function initContainer() {
      var _this$$container3, _this$$container4;

      var pixelRatio = DOM.DPR;
      var w = ((_this$$container3 = this.$container) === null || _this$$container3 === void 0 ? void 0 : _this$$container3.clientWidth) || 400;
      var h = ((_this$$container4 = this.$container) === null || _this$$container4 === void 0 ? void 0 : _this$$container4.clientHeight) || 300;
      var canvas = this.canvas;

      if (canvas) {
        canvas.width = w * pixelRatio;
        canvas.height = h * pixelRatio;
      }

      this.rendererService.viewport({
        x: 0,
        y: 0,
        width: pixelRatio * w,
        height: pixelRatio * h
      });
    }
  }, {
    key: "setCanvas",
    value: function setCanvas() {
      var _this$$container5, _this$$container6;

      var pixelRatio = DOM.DPR;
      var w = ((_this$$container5 = this.$container) === null || _this$$container5 === void 0 ? void 0 : _this$$container5.clientWidth) || 400;
      var h = ((_this$$container6 = this.$container) === null || _this$$container6 === void 0 ? void 0 : _this$$container6.clientHeight) || 300;
      var canvas = this.canvas;
      canvas.width = w * pixelRatio;
      canvas.height = h * pixelRatio;
      canvas.style.width = '100%';
      canvas.style.height = '100%';
    }
  }, {
    key: "addSceneEvent",
    value: function addSceneEvent(target) {
      this.emit(target.type, target);
    }
  }]);

  return Scene;
}(EventEmitter), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fontService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "controlService", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "configService", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "map", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "coordinateSystemService", [_dec8], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "rendererService", [_dec9], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "layerService", [_dec10], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "cameraService", [_dec11], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "interactionService", [_dec12], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "pickingService", [_dec13], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "shaderModuleService", [_dec14], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "markerService", [_dec15], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "popupService", [_dec16], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { Scene as default };
//# sourceMappingURL=SceneService.js.map