{"version":3,"sources":["../../../src/services/map/IMapService.ts"],"names":["MapServiceEvent"],"mappings":"AA2MA,OAAO,IAAMA,eAAe,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,qBAAzB,CAAxB","sourcesContent":["import { Container } from 'inversify';\nimport { IViewport } from '../camera/ICameraService';\nexport type Point = [number, number];\nexport type Bounds = [[number, number], [number, number]];\nexport interface ILngLat {\n  lng: number;\n  lat: number;\n}\nexport interface IPoint {\n  x: number;\n  y: number;\n}\nexport interface IMercator {\n  x: number;\n  y: number;\n  z: number;\n}\nexport interface IStatusOptions {\n  showIndoorMap: boolean;\n  resizeEnable: boolean;\n  dragEnable: boolean;\n  keyboardEnable: boolean;\n  doubleClickZoom: boolean;\n  zoomEnable: boolean;\n  rotateEnable: boolean;\n}\nexport type MapStyle = string | { [key: string]: any };\nexport interface IMapWrapper {\n  setContainer(\n    container: Container,\n    id: string | HTMLDivElement,\n    canvas?: HTMLCanvasElement,\n    hasBaseMap?: boolean,\n  ): void;\n}\n\ninterface ISimpleMapCoord {\n  setSize(size: number): void;\n  getSize(): [number, number];\n  project(lnglat: [number, number]): [number, number];\n  unproject(xy: [number, number]): [number, number];\n}\n\nexport interface IMapService<RawMap = {}> {\n  version?: string;\n  simpleMapCoord: ISimpleMapCoord;\n  map: RawMap;\n  bgColor: string;\n  setBgColor(color: string): void;\n  init(): void;\n  initMiniMap?(): void;\n  initViewPort?(): void;\n  destroy(): void;\n  onCameraChanged(callback: (viewport: IViewport) => void): void;\n  // init map\n  addMarkerContainer(): void;\n  getMarkerContainer(): HTMLElement;\n  // MapEvent // 定义事件类型\n\n  on(type: string, handler: (...args: any[]) => void): void;\n  off(type: string, handler: (...args: any[]) => void): void;\n  once(type: string, handler: (...args: any[]) => void): void;\n  // get dom\n  getContainer(): HTMLElement | null;\n  getSize(): [number, number];\n  // get map status method\n  getMinZoom(): number;\n  getMaxZoom(): number;\n  // get map params\n  getType(): string;\n  getZoom(): number;\n  getCenter(option?: ICameraOptions): ILngLat;\n  getPitch(): number;\n  getRotation(): number;\n  getBounds(): Bounds;\n  getMapContainer(): HTMLElement | null;\n  getMapCanvasContainer(): HTMLElement;\n\n  // control with raw map\n  setRotation(rotation: number): void;\n  zoomIn(option?: any, eventData?: any): void;\n  zoomOut(option?: any, eventData?: any): void;\n  panTo(p: Point): void;\n  panBy(x: number, y: number): void;\n  fitBounds(bound: Bounds, fitBoundsOptions?: unknown): void;\n  setZoomAndCenter(zoom: number, center: Point): void;\n  setCenter(center: [number, number], option?: ICameraOptions): void;\n  setPitch(pitch: number): void;\n  setZoom(zoom: number): void;\n  setMapStyle(style: any): void;\n  setMapStatus(option: Partial<IStatusOptions>): void;\n\n  // coordinates methods\n  pixelToLngLat(pixel: Point): ILngLat;\n  lngLatToPixel(lnglat: Point): IPoint;\n  containerToLngLat(pixel: Point): ILngLat;\n  lngLatToContainer(lnglat: Point): IPoint;\n  lngLatToMercator(lnglat: [number, number], altitude: number): IMercator;\n  getModelMatrix(\n    lnglat: [number, number],\n    altitude: number,\n    rotate: [number, number, number],\n    scale: [number, number, number],\n    origin: IMercator,\n  ): number[];\n  lngLatToCoord?(lnglat: [number, number]): [number, number];\n  lngLatToCoords?(\n    lnglatArray: number[][][] | number[][],\n  ): number[][][] | number[][] | number[][][] | number[][];\n  // lngLatToCoords?(lnglatArray: any): any;\n  getCustomCoordCenter?(): [number, number];\n  exportMap(type: 'jpg' | 'png'): string;\n\n  // 地球模式下的地图方法/属性\n  rotateY?(\n    option:\n      | {\n          force?: boolean;\n          reg?: number;\n        }\n      | undefined,\n  ): void;\n}\n\nexport interface IEarthService<RawMap = {}> {\n  version?: string;\n  map: RawMap;\n  bgColor: string;\n  setBgColor(color: string): void;\n  init(): void;\n  initViewPort?(): void;\n  destroy(): void;\n  onCameraChanged(callback: (viewport: IViewport) => void): void;\n  // init map\n  addMarkerContainer(): void;\n  getMarkerContainer(): HTMLElement;\n  // MapEvent // 定义事件类型\n\n  on(type: string, handler: (...args: any[]) => void): void;\n  off(type: string, handler: (...args: any[]) => void): void;\n  once(type: string, handler: (...args: any[]) => void): void;\n  // get dom\n  getContainer(): HTMLElement | null;\n  getSize(): [number, number];\n  // get map status method\n  getMinZoom(): number;\n  getMaxZoom(): number;\n  // get map params\n  getType(): string;\n  getZoom(): number;\n  getCenter(option?: ICameraOptions): ILngLat;\n  getPitch(): number;\n  getRotation(): number;\n  getBounds(): Bounds;\n  getMapContainer(): HTMLElement | null;\n  getMapCanvasContainer(): HTMLElement;\n\n  // control with raw map\n  setRotation(rotation: number): void;\n  zoomIn(option?: any, eventData?: any): void;\n  zoomOut(option?: any, eventData?: any): void;\n  panTo(p: Point): void;\n  panBy(x: number, y: number): void;\n  fitBounds(bound: Bounds, fitBoundsOptions?: unknown): void;\n  setZoomAndCenter(zoom: number, center: Point): void;\n  setCenter(center: [number, number], option?: ICameraOptions): void;\n  setPitch(pitch: number): void;\n  setZoom(zoom: number): void;\n  setMapStyle(style: any): void;\n  setMapStatus(option: Partial<IStatusOptions>): void;\n\n  // coordinates methods\n  pixelToLngLat(pixel: Point): ILngLat;\n  lngLatToPixel(lnglat: Point): IPoint;\n  containerToLngLat(pixel: Point): ILngLat;\n  lngLatToContainer(lnglat: Point): IPoint;\n  lngLatToMercator(lnglat: [number, number], altitude: number): IMercator;\n  getModelMatrix(\n    lnglat: [number, number],\n    altitude: number,\n    rotate: [number, number, number],\n    scale: [number, number, number],\n    origin: IMercator,\n  ): number[];\n  lngLatToCoord?(lnglat: [number, number]): [number, number];\n  lngLatToCoords?(\n    lnglatArray: number[][][] | number[][],\n  ): number[][][] | number[][] | number[][][] | number[][];\n  // lngLatToCoords?(lnglatArray: any): any;\n  getCustomCoordCenter?(): [number, number];\n  exportMap(type: 'jpg' | 'png'): string;\n\n  // 地球模式下的地图方法/属性\n  rotateY?(\n    option:\n      | {\n          force?: boolean;\n          reg?: number;\n        }\n      | undefined,\n  ): void;\n}\n\nexport const MapServiceEvent = ['mapload', 'mapchange', 'mapAfterFrameChange'];\n\n/**\n * 地图初始化配置项\n */\nexport interface IMapConfig<RawMap = {}> {\n  /**\n   * 地图实例\n   */\n  mapInstance?: RawMap;\n  /**\n   * 高德地图API插件\n   */\n  plugin?: string[];\n  /**\n   * 容器 DOM id\n   */\n  id: string | HTMLDivElement;\n\n  /**\n   * 地图\n   */\n  token?: string;\n\n  /**\n   * 中心点\n   */\n  center?: [number, number];\n\n  /**\n   * 地图倾角\n   */\n  pitch?: number;\n\n  /**\n   * 地图旋转角度\n   */\n  rotation?: number;\n\n  /**\n   * 缩放等级\n   */\n  zoom?: number;\n\n  /**\n   * 底图样式\n   */\n  style?: MapStyle;\n  /**\n   * 最小缩放等级\n   */\n  minZoom?: number;\n\n  /**\n   * 最大缩放等级\n   */\n  maxZoom?: number;\n\n  attributionControl?: boolean;\n\n  offsetCoordinate?: boolean;\n\n  offsetZoom?: number;\n\n  [key: string]: any;\n}\n\n/**\n * 地图相机参数\n * @see\n */\nexport interface IMapCamera {\n  // Perspective 相机常规参数\n  // @see https://threejs.org/docs/#api/en/cameras/PerspectiveCamera\n  aspect: number;\n  fov: number;\n  near: number;\n  far: number;\n\n  viewportWidth: number;\n  viewportHeight: number;\n\n  // 地图相机特有参数\n  // @see https://docs.mapbox.com/mapbox-gl-js/api/#map\n  pitch: number;\n  bearing: number;\n  zoom: number;\n  center: [number, number];\n  // 相机高度\n  cameraHeight: number;\n  cameraPosition?: [number, number, number];\n  up?: [number, number, number];\n  lookAt?: [number, number, number];\n  // 偏移原点，例如 P20 坐标系下\n  offsetOrigin: [number, number];\n}\nexport interface ICameraOptions {\n  padding:\n    | number\n    | [number, number, number, number]\n    | {\n        top?: number;\n        bottom?: number;\n        right?: number;\n        left?: number;\n      };\n}\n"],"file":"IMapService.js"}