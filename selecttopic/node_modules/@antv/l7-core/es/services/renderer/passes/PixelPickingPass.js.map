{"version":3,"sources":["../../../../src/services/renderer/passes/PixelPickingPass.ts"],"names":["decodePickingColor","DOM","encodePickingColor","injectable","InteractionEvent","gl","PassType","BaseNormalPass","PixelPickingPass","x","y","lngLat","type","layer","isVisible","needPick","rendererService","getViewportSize","readPixels","useFramebuffer","width","height","getLayerConfig","enableHighlight","enableSelect","xInDevicePixel","DPR","yInDevicePixel","pickedColors","pickingFBO","Math","round","data","Uint8Array","framebuffer","pickedFeatureIdx","rawFeature","getSource","getFeatureById","target","featureId","feature","setCurrentPickId","triggerHoverOnLayer","getCurrentPickId","highlightPickedFeature","toString","selectFeature","Normal","config","createTexture2D","createFramebuffer","color","wrapS","CLAMP_TO_EDGE","wrapT","interactionService","on","Hover","pickFromPickingFBO","Select","selectFeatureHandle","bind","Active","highlightFeatureHandle","alreadyInRendering","clear","resize","stencil","depth","originRenderFlag","multiPassRenderer","getRenderFlag","setRenderFlag","hooks","beforePickingEncode","call","render","afterPickingEncode","emit","r","g","b","beforeHighlight","layerService","renderLayers","beforeSelect"],"mappings":"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","sourcesContent":["import { decodePickingColor, DOM, encodePickingColor } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport {\n  IInteractionTarget,\n  InteractionEvent,\n} from '../../interaction/IInteractionService';\nimport { ILayer } from '../../layer/ILayerService';\nimport { ILngLat } from '../../map/IMapService';\nimport { gl } from '../gl';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\n\n/**\n * color-based PixelPickingPass\n * @see https://github.com/antvis/L7/blob/next/dev-docs/PixelPickingEngine.md\n */\n@injectable()\nexport default class PixelPickingPass<\n  InitializationOptions = {}\n> extends BaseNormalPass<InitializationOptions> {\n  /**\n   * picking framebuffer，供 attributes 颜色编码后输出\n   */\n  private pickingFBO: IFramebuffer;\n\n  /**\n   * 保存 layer 引用\n   */\n  private layer: ILayer;\n\n  private width: number = 0;\n\n  private height: number = 0;\n\n  /**\n   * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n   */\n  private alreadyInRendering: boolean = false;\n\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public getName() {\n    return 'pixelPicking';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n    this.layer = layer;\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize,\n    } = this.rendererService;\n    const { width, height } = getViewportSize();\n    // 创建 picking framebuffer，后续实时 resize\n    this.pickingFBO = createFramebuffer({\n      color: createTexture2D({\n        width,\n        height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(InteractionEvent.Hover, this.pickFromPickingFBO);\n    this.interactionService.on(\n      InteractionEvent.Select,\n      this.selectFeatureHandle.bind(this),\n    );\n    this.interactionService.on(\n      InteractionEvent.Active,\n      this.highlightFeatureHandle.bind(this),\n    );\n  }\n\n  public render(layer: ILayer) {\n    if (this.alreadyInRendering) {\n      return;\n    }\n\n    const { getViewportSize, useFramebuffer, clear } = this.rendererService;\n    const { width, height } = getViewportSize();\n\n    // throttled\n    this.alreadyInRendering = true;\n\n    // resize first, fbo can't be resized in use\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({ width, height });\n      this.width = width;\n      this.height = height;\n    }\n    useFramebuffer(this.pickingFBO, () => {\n      clear({\n        framebuffer: this.pickingFBO,\n        color: [0, 0, 0, 0],\n        stencil: 0,\n        depth: 1,\n      });\n\n      /**\n       * picking pass 不需要 multipass，原因如下：\n       * 1. 已经 clear，无需 ClearPass\n       * 2. 只需要 RenderPass\n       * 3. 后处理 pass 需要跳过\n       */\n      const originRenderFlag = this.layer.multiPassRenderer.getRenderFlag();\n      this.layer.multiPassRenderer.setRenderFlag(false);\n      // trigger hooks\n      layer.hooks.beforePickingEncode.call();\n      layer.render();\n      layer.hooks.afterPickingEncode.call();\n      this.layer.multiPassRenderer.setRenderFlag(originRenderFlag);\n\n      this.alreadyInRendering = false;\n    });\n  }\n\n  /**\n   * 拾取视口指定坐标属于的要素\n   * TODO：支持区域拾取\n   */\n  private pickFromPickingFBO = ({ x, y, lngLat, type }: IInteractionTarget) => {\n    if (!this.layer.isVisible() || !this.layer.needPick(type)) {\n      return;\n    }\n    const {\n      getViewportSize,\n      readPixels,\n      useFramebuffer,\n    } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const { enableHighlight, enableSelect } = this.layer.getLayerConfig();\n\n    const xInDevicePixel = x * DOM.DPR;\n    const yInDevicePixel = y * DOM.DPR;\n    if (\n      xInDevicePixel > width ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height ||\n      yInDevicePixel < 0\n    ) {\n      return;\n    }\n    let pickedColors: Uint8Array | undefined;\n    useFramebuffer(this.pickingFBO, () => {\n      // avoid realloc\n      pickedColors = readPixels({\n        x: Math.round(xInDevicePixel),\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.round(height - (y + 1) * DOM.DPR),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: this.pickingFBO,\n      });\n\n      if (\n        pickedColors[0] !== 0 ||\n        pickedColors[1] !== 0 ||\n        pickedColors[2] !== 0\n      ) {\n        const pickedFeatureIdx = decodePickingColor(pickedColors);\n        const rawFeature = this.layer\n          .getSource()\n          .getFeatureById(pickedFeatureIdx);\n        const target = {\n          x,\n          y,\n          type,\n          lngLat,\n          featureId: pickedFeatureIdx,\n          feature: rawFeature,\n        };\n        if (!rawFeature) {\n          // this.logger.error(\n          //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n          // );\n        } else {\n          // trigger onHover/Click callback on layer\n          this.layer.setCurrentPickId(pickedFeatureIdx);\n          this.triggerHoverOnLayer(target);\n        }\n      } else {\n        const target = {\n          x,\n          y,\n          lngLat,\n          type:\n            this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',\n          featureId: null,\n          feature: null,\n        };\n        this.triggerHoverOnLayer({\n          ...target,\n          type: 'unpick',\n        });\n        this.triggerHoverOnLayer(target);\n        this.layer.setCurrentPickId(null);\n      }\n\n      if (enableHighlight) {\n        this.highlightPickedFeature(pickedColors);\n      }\n      if (\n        enableSelect &&\n        type === 'click' &&\n        pickedColors?.toString() !== [0, 0, 0, 0].toString()\n      ) {\n        this.selectFeature(pickedColors);\n      }\n    });\n  };\n\n  private triggerHoverOnLayer(target: {\n    x: number;\n    y: number;\n    type: string;\n    lngLat: ILngLat;\n    feature: unknown;\n    featureId: number | null;\n  }) {\n    this.layer.emit(target.type, target);\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  private highlightPickedFeature(pickedColors: Uint8Array | undefined) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeHighlight.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n\n  private selectFeature(pickedColors: Uint8Array | undefined) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeSelect.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n\n  private selectFeatureHandle({ featureId }: Partial<IInteractionTarget>) {\n    const pickedColors = encodePickingColor(featureId as number);\n    this.selectFeature(new Uint8Array(pickedColors));\n  }\n\n  private highlightFeatureHandle({ featureId }: Partial<IInteractionTarget>) {\n    const pickedColors = encodePickingColor(featureId as number);\n    this.highlightPickedFeature(new Uint8Array(pickedColors));\n  }\n}\n"],"file":"PixelPickingPass.js"}