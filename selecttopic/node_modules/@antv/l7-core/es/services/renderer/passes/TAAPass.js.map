{"version":3,"sources":["../../../../src/services/renderer/passes/TAAPass.ts"],"names":["$window","inject","injectable","TYPES","gl","PassType","BaseNormalPass","halton","index","base","result","f","i","Math","floor","accumulatingId","TAAPass","IShaderModuleService","undefined","Normal","layer","config","rendererService","createFramebuffer","createTexture2D","sampleRenderTarget","color","width","height","wrapS","CLAMP_TO_EDGE","wrapT","prevRenderTarget","outputRenderTarget","copyRenderTarget","haltonSequence","push","blendModel","createTriangleModel","blendFS","outputModel","copyFS","blend","enable","func","srcRGB","ONE","dstRGB","ONE_MINUS_SRC_ALPHA","srcAlpha","dstAlpha","equation","rgb","FUNC_ADD","alpha","copyModel","clear","getViewportSize","useFramebuffer","resize","resetFrame","stopAccumulating","readFBO","multiPassRenderer","getPostProcessor","getReadFBO","depth","stencil","framebuffer","setRenderFlag","render","accumulate","id","isFinished","doRender","requestAnimationFrame","timer","setTimeout","getLayerConfig","jitterScale","offset","frame","length","cameraService","jitterProjectionMatrix","hooks","beforeRender","call","afterRender","layerStyleOptions","draw","uniforms","u_opacity","opacity","u_MixRatio","u_Diffuse1","u_Diffuse2","u_Texture","tmp","clearJitterProjectionMatrix","clearTimeout","shaderModuleName","fragmentShader","options","shaderModuleService","registerModule","vs","quadVS","fs","getModule","createAttribute","createBuffer","createModel","attributes","a_Position","buffer","data","type","FLOAT","size","count"],"mappings":"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","sourcesContent":["import { $window } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport blendFS from '../../../shaders/post-processing/blend.glsl';\nimport copyFS from '../../../shaders/post-processing/copy.glsl';\nimport quadVS from '../../../shaders/post-processing/quad.glsl';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport { IShaderModuleService } from '../../shader/IShaderModuleService';\nimport { gl } from '../gl';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { IModel, IModelInitializationOptions } from '../IModel';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\n\n// Generate halton sequence\n// https://en.wikipedia.org/wiki/Halton_sequence\nfunction halton(index: number, base: number) {\n  let result = 0;\n  let f = 1 / base;\n  let i = index;\n  while (i > 0) {\n    result = result + f * (i % base);\n    i = Math.floor(i / base);\n    f = f / base;\n  }\n  return result;\n}\n\n// 累加计数器\nlet accumulatingId = 1;\n\n/**\n * TAA（Temporal Anti-Aliasing）\n * 在需要后处理的场景中（例如 L7 的热力图需要 blur pass、PBR 中的 SSAO 环境光遮蔽），无法使用浏览器内置的 MSAA，\n * 只能使用 TAA\n * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/ri52hv\n */\n@injectable()\nexport default class TAAPass<InitializationOptions = {}> extends BaseNormalPass<\n  InitializationOptions\n> {\n  @inject(TYPES.IShaderModuleService)\n  protected readonly shaderModuleService: IShaderModuleService;\n\n  /**\n   * 低差异序列\n   */\n  private haltonSequence: Array<[number, number]> = [];\n\n  /**\n   * 当前累加任务 ID，例如用户连续拖拽时上一次累加很有可能没有结束，此时在开启新一轮累加之前需要结束掉之前未完成的\n   */\n  private accumulatingId: number = 0;\n\n  /**\n   * 每一轮累加中的 frameID\n   */\n  private frame: number = 0;\n\n  /**\n   * 每一轮累加中的 frame 定时器\n   */\n  private timer: number | undefined = undefined;\n\n  private sampleRenderTarget: IFramebuffer;\n  private prevRenderTarget: IFramebuffer;\n  private outputRenderTarget: IFramebuffer;\n  private copyRenderTarget: IFramebuffer;\n\n  private blendModel: IModel;\n  private outputModel: IModel;\n  private copyModel: IModel;\n\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public getName() {\n    return 'taa';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n\n    const { createFramebuffer, createTexture2D } = this.rendererService;\n    this.sampleRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n    this.prevRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n    this.outputRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n    this.copyRenderTarget = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    for (let i = 0; i < 30; i++) {\n      this.haltonSequence.push([halton(i, 2), halton(i, 3)]);\n    }\n\n    this.blendModel = this.createTriangleModel('blend-pass', blendFS);\n    this.outputModel = this.createTriangleModel('copy-pass', copyFS, {\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.ONE,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          srcAlpha: gl.ONE,\n          dstAlpha: gl.ONE_MINUS_SRC_ALPHA,\n        },\n        equation: {\n          rgb: gl.FUNC_ADD,\n          alpha: gl.FUNC_ADD,\n        },\n      },\n    });\n    this.copyModel = this.createTriangleModel('copy-pass', copyFS);\n  }\n\n  public render(layer: ILayer) {\n    const { clear, getViewportSize, useFramebuffer } = this.rendererService;\n    const { width, height } = getViewportSize();\n    this.sampleRenderTarget.resize({ width, height });\n    this.prevRenderTarget.resize({ width, height });\n    this.outputRenderTarget.resize({ width, height });\n    this.copyRenderTarget.resize({ width, height });\n\n    this.resetFrame();\n    // 首先停止上一次的累加\n    this.stopAccumulating();\n\n    // 先输出到 PostProcessor\n    const readFBO = layer.multiPassRenderer.getPostProcessor().getReadFBO();\n    useFramebuffer(readFBO, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: readFBO,\n      });\n\n      // render to post processor\n      layer.multiPassRenderer.setRenderFlag(false);\n      layer.render();\n      layer.multiPassRenderer.setRenderFlag(true);\n    });\n\n    const accumulate = (id: number) => {\n      // 在开启新一轮累加之前，需要先结束掉之前的累加\n      if (!this.accumulatingId || id !== this.accumulatingId) {\n        return;\n      }\n\n      if (!this.isFinished()) {\n        this.doRender(layer);\n\n        $window.requestAnimationFrame(() => {\n          accumulate(id);\n        });\n      }\n    };\n\n    this.accumulatingId = accumulatingId++;\n    // @ts-ignore\n    this.timer = $window.setTimeout(() => {\n      accumulate(this.accumulatingId);\n    }, 50);\n  }\n\n  private doRender(layer: ILayer) {\n    const { clear, getViewportSize, useFramebuffer } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const { jitterScale = 1 } = layer.getLayerConfig();\n\n    // 使用 Halton 序列抖动投影矩阵\n    const offset = this.haltonSequence[this.frame % this.haltonSequence.length];\n    this.cameraService.jitterProjectionMatrix(\n      ((offset[0] * 2.0 - 1.0) / width) * jitterScale,\n      ((offset[1] * 2.0 - 1.0) / height) * jitterScale,\n    );\n\n    // 按抖动后的投影矩阵渲染\n    layer.multiPassRenderer.setRenderFlag(false);\n    layer.hooks.beforeRender.call();\n    useFramebuffer(this.sampleRenderTarget, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.sampleRenderTarget,\n      });\n\n      layer.render();\n    });\n    layer.hooks.afterRender.call();\n    layer.multiPassRenderer.setRenderFlag(true);\n\n    // 混合\n    const layerStyleOptions = layer.getLayerConfig();\n    useFramebuffer(this.outputRenderTarget, () => {\n      this.blendModel.draw({\n        uniforms: {\n          // @ts-ignore\n          u_opacity: layerStyleOptions.opacity || 1,\n          u_MixRatio: this.frame === 0 ? 1 : 0.9,\n          u_Diffuse1: this.sampleRenderTarget,\n          u_Diffuse2:\n            this.frame === 0\n              ? layer.multiPassRenderer.getPostProcessor().getReadFBO()\n              : this.prevRenderTarget,\n        },\n      });\n    });\n\n    // 输出累加结果\n    if (this.frame === 0) {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.copyRenderTarget,\n      });\n    }\n\n    if (this.frame >= 1) {\n      useFramebuffer(this.copyRenderTarget, () => {\n        this.outputModel.draw({\n          uniforms: {\n            u_Texture: this.outputRenderTarget,\n          },\n        });\n      });\n\n      useFramebuffer(\n        layer.multiPassRenderer.getPostProcessor().getReadFBO(),\n        () => {\n          this.copyModel.draw({\n            uniforms: {\n              u_Texture: this.copyRenderTarget,\n            },\n          });\n        },\n      );\n      layer.multiPassRenderer.getPostProcessor().render(layer);\n    }\n\n    // 保存前序帧结果\n    const tmp = this.prevRenderTarget;\n    this.prevRenderTarget = this.outputRenderTarget;\n    this.outputRenderTarget = tmp;\n\n    this.frame++;\n\n    // 恢复 jitter 后的相机\n    this.cameraService.clearJitterProjectionMatrix();\n  }\n\n  /**\n   * 是否已经完成累加\n   * @return {boolean} isFinished\n   */\n  private isFinished() {\n    return this.frame >= this.haltonSequence.length;\n  }\n\n  private resetFrame() {\n    this.frame = 0;\n  }\n\n  private stopAccumulating() {\n    this.accumulatingId = 0;\n    $window.clearTimeout(this.timer);\n  }\n\n  private createTriangleModel(\n    shaderModuleName: string,\n    fragmentShader: string,\n    options?: Partial<IModelInitializationOptions>,\n  ) {\n    this.shaderModuleService.registerModule(shaderModuleName, {\n      vs: quadVS,\n      fs: fragmentShader,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      shaderModuleName,\n    );\n    const { createAttribute, createBuffer, createModel } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        // 使用一个全屏三角形，相比 Quad 顶点数目更少\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-4, -4, 4, -4, 0, 4],\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: false,\n      },\n      count: 3,\n      ...options,\n    });\n  }\n}\n"],"file":"TAAPass.js"}