{"version":3,"sources":["../../../src/services/component/MarkerService.ts"],"names":["injectable","TYPES","MarkerService","markerLayer","mapsService","map","getMarkerContainer","markerLayers","push","addTo","scene","unAddMarkerLayers","layer","destroy","indexOf","markerIndex","splice","marker","markers","unAddMarkers","forEach","remove","get","IMapService"],"mappings":"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","sourcesContent":["import { Container, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { IMapService } from '../map/IMapService';\nimport {\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IMarkerServiceCfg,\n} from './IMarkerService';\n\n@injectable()\nexport default class MarkerService implements IMarkerService {\n  public container: HTMLElement;\n  private scene: Container;\n  private mapsService: IMapService;\n  private markers: IMarker[] = [];\n  private markerLayers: IMarkerLayer[] = [];\n  private unAddMarkers: IMarker[] = [];\n  private unAddMarkerLayers: IMarkerLayer[] = [];\n\n  public addMarkerLayer(markerLayer: IMarkerLayer): void {\n    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n      this.markerLayers.push(markerLayer);\n      markerLayer.addTo(this.scene);\n    } else {\n      this.unAddMarkerLayers.push(markerLayer);\n    }\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer): void {\n    layer.destroy();\n    this.markerLayers.indexOf(layer);\n    const markerIndex = this.markerLayers.indexOf(layer);\n    if (markerIndex > -1) {\n      this.markerLayers.splice(markerIndex, 1);\n    }\n  }\n\n  public addMarker(marker: IMarker): void {\n    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n      this.markers.push(marker);\n      marker.addTo(this.scene);\n    } else {\n      this.unAddMarkers.push(marker);\n    }\n  }\n\n  public addMarkers(): void {\n    this.unAddMarkers.forEach((marker: IMarker) => {\n      marker.addTo(this.scene);\n      this.markers.push(marker);\n    });\n    this.unAddMarkers = [];\n  }\n\n  public addMarkerLayers(): void {\n    this.unAddMarkerLayers.forEach((markerLayer: IMarkerLayer) => {\n      this.markerLayers.push(markerLayer);\n      markerLayer.addTo(this.scene);\n    });\n    this.unAddMarkers = [];\n  }\n\n  public removeMarker(marker: IMarker): void {\n    marker.remove();\n    this.markers.indexOf(marker);\n    const markerIndex = this.markers.indexOf(marker);\n    if (markerIndex > -1) {\n      this.markers.splice(markerIndex, 1);\n    }\n  }\n\n  public removeAllMarkers(): void {\n    this.destroy();\n  }\n\n  public init(scene: Container): void {\n    // this.container = cfg.container;\n    this.scene = scene;\n    this.mapsService = scene.get<IMapService>(TYPES.IMapService);\n  }\n  public destroy(): void {\n    this.markers.forEach((marker: IMarker) => {\n      marker.remove();\n    });\n    this.markers = [];\n    this.markerLayers.forEach((layer: IMarkerLayer) => {\n      layer.destroy();\n    });\n    this.markerLayers = [];\n  }\n\n  private removeMakerLayerMarker(layer: IMarkerLayer) {\n    layer.destroy();\n  }\n}\n"],"file":"MarkerService.js"}