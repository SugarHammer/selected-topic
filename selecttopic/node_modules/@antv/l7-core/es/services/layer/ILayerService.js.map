{"version":3,"sources":["../../../src/services/layer/ILayerService.ts"],"names":["BlendType"],"mappings":"AAqCA,WAAYA,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S","sourcesContent":["// @ts-ignore\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from '@antv/async-hook';\nimport { Container } from 'inversify';\nimport Clock from '../../utils/clock';\nimport { ISceneConfig } from '../config/IConfigService';\nimport { IMapService } from '../map/IMapService';\nimport {\n  IBlendOptions,\n  IModel,\n  IModelInitializationOptions,\n} from '../renderer/IModel';\nimport {\n  IMultiPassRenderer,\n  IPass,\n  IPostProcessingPass,\n} from '../renderer/IMultiPassRenderer';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { IUniform } from '../renderer/IUniform';\nimport { ISource, ISourceCFG } from '../source/ISourceService';\nimport {\n  IAnimateOption,\n  IEncodeFeature,\n  IScale,\n  IScaleOptions,\n  IStyleAttributeService,\n  IStyleAttributeUpdateOptions,\n  ScaleAttributeType,\n  StyleAttrField,\n  StyleAttributeField,\n  StyleAttributeOption,\n  Triangulation,\n} from './IStyleAttributeService';\n\n// import {\n//   IStyleAttributeUpdateOptions,\n//   StyleAttributeField,\n// } from '@antv/l7-core';y\nexport enum BlendType {\n  normal = 'normal',\n  additive = 'additive',\n  subtractive = 'subtractive',\n  min = 'min',\n  max = 'max',\n  none = 'none',\n}\nexport interface IBlendTypes {\n  [key: string]: Partial<IBlendOptions>;\n}\nexport interface IDataState {\n  dataSourceNeedUpdate: boolean;\n  dataMappingNeedUpdate: boolean;\n  filterNeedUpdate: boolean;\n  featureScaleNeedUpdate: boolean;\n  StyleAttrNeedUpdate: boolean;\n}\nexport interface ILayerModelInitializationOptions {\n  moduleName: string;\n  vertexShader: string;\n  fragmentShader: string;\n  triangulation: Triangulation;\n  segmentNumber?: number;\n}\n\nexport interface ILayerModel {\n  render(): void;\n  renderUpdate?(): void;\n  getUninforms(): IModelUniform;\n  getDefaultStyle(): unknown;\n  getAnimateUniforms(): IModelUniform;\n  buildModels(): IModel[];\n  initModels(): IModel[];\n  needUpdate(): boolean;\n  clearModels(): void;\n\n  // earth mode\n  setEarthTime?(time: number): void;\n}\nexport interface IModelUniform {\n  [key: string]: IUniform;\n}\n\nexport interface IPickedFeature {\n  x: number;\n  y: number;\n  lnglat?: { lng: number; lat: number };\n  feature?: unknown;\n}\n// 交互样式\nexport interface IActiveOption {\n  color: string | number[];\n  mix?: number;\n}\n\ntype ILngLat = [number, number];\n\n// 分段图例\nexport interface ILegendSegmentItem {\n  value: [number, number];\n  [key: string]: any;\n}\n// 分类图例\nexport interface ILegendClassificaItem {\n  value: number | string;\n  [key: string]: any;\n}\n// 图层图例\nexport type LegendItems = ILegendSegmentItem[] | ILegendClassificaItem[];\n\nexport interface ILayer {\n  id: string; // 一个场景中同一类型 Layer 可能存在多个\n  type: string; // 代表 Layer 的类型\n  name: string; //\n  inited: boolean; // 是否初始化完成\n  zIndex: number;\n  clusterZoom: number;\n  plugins: ILayerPlugin[];\n  layerModelNeedUpdate: boolean;\n  styleNeedUpdate: boolean;\n  layerModel: ILayerModel;\n  layerChildren: ILayer[]; // 在图层中添加子图层\n  sceneContainer: Container | undefined;\n  dataState: IDataState; // 数据流状态\n  pickedFeatureID: number | null;\n  hooks: {\n    init: SyncBailHook;\n    afterInit: SyncBailHook;\n    beforeRenderData: SyncWaterfallHook;\n    beforeRender: SyncBailHook;\n    afterRender: SyncHook;\n    beforePickingEncode: SyncHook;\n    afterPickingEncode: SyncHook;\n    beforeHighlight: SyncHook;\n    beforeSelect: SyncHook;\n    afterSelect: SyncHook;\n    afterHighlight: SyncHook;\n    beforeDestroy: SyncHook;\n    afterDestroy: SyncHook;\n  };\n  models: IModel[];\n  sourceOption: {\n    data: any;\n    options?: ISourceCFG;\n  };\n  multiPassRenderer: IMultiPassRenderer;\n  // 初始化 layer 的时候指定 layer type 类型（）兼容空数据的情况\n  layerType?: string | undefined;\n\n  /**\n   * threejs 适配兼容相关的方法\n   * @param lnglat\n   * @param altitude\n   * @param rotation\n   * @param scale\n   */\n\n  threeRenderService?: any;\n\n  getShaderPickStat: () => boolean;\n  needPick(type: string): boolean;\n  getLayerConfig(): Partial<ILayerConfig & ISceneConfig>;\n  setBottomColor(color: string): void;\n  getBottomColor(): string;\n  getContainer(): Container;\n  setContainer(container: Container, sceneContainer: Container): void;\n  setCurrentPickId(id: number | null): void;\n  getCurrentPickId(): number | null;\n  setCurrentSelectedId(id: number | null): void;\n  getCurrentSelectedId(): number | null;\n  prepareBuildModel(): void;\n  renderModels(isPicking?: boolean): void;\n  buildModels(): void;\n  rebuildModels(): void;\n  buildLayerModel(\n    options: ILayerModelInitializationOptions &\n      Partial<IModelInitializationOptions>,\n  ): IModel;\n  updateStyleAttribute(\n    type: string,\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ): void;\n  init(): ILayer;\n  scale(field: string | number | IScaleOptions, cfg?: IScale): ILayer;\n  getScale(name: string): any;\n  size(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  color(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  texture(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  shape(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  label(field: StyleAttrField, value?: StyleAttributeOption): ILayer;\n  animate(option: Partial<IAnimateOption> | boolean): ILayer;\n  // pattern(field: string, value: StyleAttributeOption): ILayer;\n  filter(field: string, value: StyleAttributeOption): ILayer;\n  active(option: IActiveOption | boolean): ILayer;\n  setActive(\n    id: number | { x: number; y: number },\n    option?: IActiveOption,\n  ): void;\n  select(option: IActiveOption | boolean): ILayer;\n  setSelect(\n    id: number | { x: number; y: number },\n    option?: IActiveOption,\n  ): void;\n  setAutoFit(autoFit: boolean): void;\n  style(options: unknown): ILayer;\n  hide(): ILayer;\n  show(): ILayer;\n  getLegendItems(name: string): LegendItems;\n  setIndex(index: number): ILayer;\n  isVisible(): boolean;\n  setMaxZoom(min: number): ILayer;\n  setMinZoom(max: number): ILayer;\n  getMinZoom(): number;\n  getMaxZoom(): number;\n  get(name: string): number;\n  setBlend(type: keyof typeof BlendType): ILayer;\n  // animate(field: string, option: any): ILayer;\n\n  setMultiPass(\n    multipass: boolean,\n    passes?: Array<string | [string, { [key: string]: unknown }]>,\n  ): ILayer;\n  renderLayers(): void;\n  render(): ILayer;\n\n  renderMultiPass(): any;\n\n  clear(): void;\n  clearModels(): void;\n  destroy(): void;\n  source(data: any, option?: ISourceCFG): ILayer;\n  setData(data: any, option?: ISourceCFG): ILayer;\n  fitBounds(fitBoundsOptions?: unknown): ILayer;\n  /**\n   * 向当前图层注册插件\n   * @param plugin 插件实例\n   */\n  addPlugin(plugin: ILayerPlugin): ILayer;\n  getSource(): ISource;\n  setSource(source: ISource): void;\n  setEncodedData(encodedData: IEncodeFeature[]): void;\n  getEncodedData(): IEncodeFeature[];\n  getScaleOptions(): IScaleOptions;\n\n  /**\n   * 事件\n   */\n  on(type: string, handler: (...args: any[]) => void): void;\n  off(type: string, handler: (...args: any[]) => void): void;\n  emit(type: string, handler: unknown): void;\n  once(type: string, handler: (...args: any[]) => void): void;\n\n  isDirty(): boolean;\n  /**\n   * 直接调用拾取方法，在非鼠标交互场景中使用\n   */\n  pick(query: { x: number; y: number }): void;\n  boxSelect(\n    box: [number, number, number, number],\n    cb: (...args: any[]) => void,\n  ): void;\n\n  updateLayerConfig(configToUpdate: Partial<ILayerConfig | unknown>): void;\n  setAnimateStartTime(): void;\n  getLayerAnimateTime(): number;\n\n  // 获取对应地图的经纬度模型矩阵\n  getModelMatrix?(\n    lnglat: ILngLat,\n    altitude: number,\n    rotation: [number, number, number],\n    scale: [number, number, number],\n  ): any;\n\n  // 获取对应地图的经纬度平移矩阵\n  getTranslateMatrix?(lnglat: ILngLat, altitude?: number): any;\n\n  // 设置模型对应地图在经纬度和高度方向的平移\n  applyObjectLngLat?(object: any, lnglat: ILngLat, altitude?: number): void;\n\n  // 根据经纬度设置模型对应地图的平移\n  setObjectLngLat?(object: any, lnglat: ILngLat, altitude?: number): void;\n\n  // 返回物体在场景中的经纬度\n  getObjectLngLat?(object: any): ILngLat;\n\n  // 将经纬度转为 three 世界坐标\n  lnglatToCoord?(lnglat: ILngLat): ILngLat;\n\n  // 设置网格适配到地图坐标系\n  adjustMeshToMap?(object: any): void;\n\n  // 设置网格的缩放 （主要是抹平 mapbox 底图时的差异，若是高德底图则可以直接设置网格的 scale 属性/方法）\n  setMeshScale?(object: any, x: number, y: number, z: number): void;\n\n  // 增加加载模型的动画混合器\n  addAnimateMixer?(mixer: any): void;\n\n  // 返回当前的 threejs camera\n  getRenderCamera?(): any;\n\n  /**\n   * 地球模式相关的方法\n   */\n\n  // 设置当前地球时间 控制太阳角度\n  setEarthTime(time: number): void;\n}\n\n/**\n * Layer 插件\n */\nexport interface ILayerPlugin {\n  apply(\n    layer: ILayer,\n    services: {\n      rendererService: IRendererService;\n      mapService: IMapService;\n      styleAttributeService: IStyleAttributeService;\n      postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>;\n      normalPassFactory: (name: string) => IPass<unknown>;\n    },\n  ): void;\n}\n\n/**\n * Layer 初始化参数\n */\nexport interface ILayerConfig {\n  colors: string[];\n  size: number;\n  shape: string;\n  shape2d: string[];\n  shape3d: string[];\n  scales: {\n    [key: string]: IScale;\n  };\n  minZoom: number;\n  maxZoom: number;\n  visible: boolean;\n  zIndex: number;\n  pickingBuffer: number;\n  enablePropagation: boolean;\n  autoFit: boolean;\n  fitBoundsOptions?: unknown;\n  name: string; //\n  blend: keyof typeof BlendType;\n  depth: boolean;\n  pickedFeatureID: number;\n  enableMultiPassRenderer: boolean;\n  passes: Array<string | [string, { [key: string]: unknown }]>;\n\n  // layerType 指定 shape 的类型\n  layerType?: string | undefined;\n  forward: boolean; // 正方向\n\n  /**\n   * 开启拾取\n   */\n  enablePicking: boolean;\n  /**\n   * 开启高亮\n   */\n  enableHighlight: boolean;\n\n  enableSelect: boolean;\n  /**\n   * 高亮颜色\n   */\n  highlightColor: string | number[];\n  selectColor: string | number[];\n  active: boolean;\n  activeColor: string | number[];\n  activeMix?: number;\n  selectMix?: number;\n  /**\n   * 开启 TAA\n   */\n  enableTAA: boolean;\n  /**\n   * 相机抖动程度\n   */\n  jitterScale: number;\n  /**\n   * 开启光照\n   */\n  enableLighting: boolean;\n\n  /**\n   * 动画参数\n   */\n  animateOption: Partial<IAnimateOption>;\n\n  /**\n   * 地球模式参数\n   */\n  globelOtions: any;\n  /**\n   * layer point text 是否是 iconfont 模式\n   */\n  iconfont: boolean;\n  onHover(pickedFeature: IPickedFeature): void;\n  onClick(pickedFeature: IPickedFeature): void;\n}\n\n/**\n * 提供 Layer 管理服务\n */\nexport interface ILayerService {\n  clock: Clock;\n  alreadyInRendering: boolean;\n  sceneService?: any;\n\n  // 控制着色器颜色拾取计算\n  enableShaderPick: () => void;\n  disableShaderPick: () => void;\n  getShaderPickStat: () => boolean;\n  add(layer: ILayer): void;\n  initLayers(): void;\n  startAnimate(): void;\n  stopAnimate(): void;\n  getLayers(): ILayer[];\n  getRenderList(): ILayer[];\n  getLayer(id: string): ILayer | undefined;\n  getLayerByName(name: string): ILayer | undefined;\n  cleanRemove(layer: ILayer, parentLayer?: ILayer): void;\n  remove(layer: ILayer, parentLayer?: ILayer): void;\n  removeAllLayers(): void;\n  updateLayerRenderList(): void;\n  renderLayers(type?: string): void;\n  setEnableRender(flag: boolean): void;\n  getOESTextureFloat(): boolean;\n\n  destroy(): void;\n}\n"],"file":"ILayerService.js"}