{"version":3,"sources":["../../../src/services/asset/FontService.ts"],"names":["$window","LRUCache","injectable","TinySDF","buildMapping","DEFAULT_CHAR_SET","getDefaultCharacterSet","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","VALID_PROPS","charSet","i","push","String","fromCharCode","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","populateAlphaChannel","alphaChannel","imageData","length","data","FontService","cache","get","key","mapping","clear","fontOptions","characterSet","buffer","sdf","cutoff","radius","iconfont","iconFontMap","Map","glyphs","forEach","glyph","iconFontGlyphs","name","unicode","fontUnicode","set","parseInt","option","getKey","getNewChars","cachedFontAtlas","fontAtlas","generateFontAtlas","canvas","document","createElement","width","getContext","getFontWidth","char","measureText","fontHeight","maxCanvasWidth","xOffset","yOffset","canvasHeight","copyImageData","getImageData","height","putImageData","tinySDF","size","icon","replace","iconData","draw","x","y","fillText","newChars","cachedMapping","cachedCharSet","Set","Object","keys","has"],"mappings":"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","sourcesContent":["import { $window, LRUCache } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport TinySDF from 'l7-tiny-sdf';\nimport 'reflect-metadata';\nimport { buildMapping } from '../../utils/font_util';\nimport {\n  IFontAtlas,\n  IFontMapping,\n  IFontMappingItem,\n  IFontOptions,\n  IFontService,\n  IIconFontGlyph,\n} from './IFontService';\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'sans-serif';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 24;\nexport const DEFAULT_BUFFER = 3;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 8;\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 1.0;\nconst HEIGHT_SCALE = 1.0;\nconst CACHE_LIMIT = 3;\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius',\n];\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string,\n) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = 'black';\n  ctx.textBaseline = 'middle';\n  // ctx.textAlign = 'left';\n}\n\nfunction populateAlphaChannel(alphaChannel: number[], imageData: ImageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\n@injectable()\nexport default class FontService implements IFontService {\n  public get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  public get canvas(): HTMLCanvasElement {\n    const data = this.cache.get(this.key);\n    return data && data.data;\n  }\n\n  public get mapping(): IFontMapping {\n    const data = this.cache.get(this.key);\n    return data && data.mapping;\n  }\n  public fontAtlas: IFontAtlas;\n\n  // iconFontMap 记录用户设置的 iconfont unicode 和名称的键值关系\n  public iconFontMap: Map<string, string>;\n  private iconFontGlyphs: {\n    [key: string]: string;\n  } = {};\n  private fontOptions: IFontOptions;\n  private key: string;\n  private cache: LRUCache = new LRUCache(CACHE_LIMIT);\n\n  public init() {\n    this.cache.clear();\n    this.fontOptions = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: true,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS,\n      iconfont: false,\n    };\n    this.key = '';\n    this.iconFontMap = new Map();\n  }\n  public addIconGlyphs(glyphs: IIconFontGlyph[]): void {\n    glyphs.forEach((glyph) => {\n      this.iconFontGlyphs[glyph.name] = glyph.unicode;\n    });\n  }\n\n  /**\n   * 添加对 iconfont unicode 的映射\n   * @param fontUnicode\n   * @param name\n   */\n  public addIconFont(name: string, fontUnicode: string): void {\n    this.iconFontMap.set(name, fontUnicode);\n  }\n\n  /**\n   * 获取自定义 iconfont 别称对应的 unicode 编码，若是当前的 map 中没有对应的键值对，那么就返回原值\n   * @param name\n   * @returns\n   */\n  public getIconFontKey(name: string): string {\n    return this.iconFontMap.get(name) || name;\n  }\n\n  public getGlyph(name: string): string {\n    if (this.iconFontGlyphs[name]) {\n      return String.fromCharCode(parseInt(this.iconFontGlyphs[name], 16));\n    }\n    return '';\n  }\n\n  public setFontOptions(option: Partial<IFontOptions>) {\n    this.fontOptions = {\n      ...this.fontOptions,\n      ...option,\n    };\n    // const oldKey = this.key;\n    this.key = this.getKey();\n\n    const charSet = this.getNewChars(this.key, this.fontOptions.characterSet);\n    const cachedFontAtlas = this.cache.get(this.key);\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      return;\n    }\n    // update fontAtlas with new settings\n    const fontAtlas = this.generateFontAtlas(\n      this.key,\n      charSet,\n      cachedFontAtlas,\n    );\n    this.fontAtlas = fontAtlas;\n\n    // update cache\n    this.cache.set(this.key, fontAtlas);\n  }\n\n  public destroy(): void {\n    this.cache.clear();\n    this.iconFontMap.clear();\n  }\n\n  private generateFontAtlas(\n    key: string,\n    characterSet: string[],\n    cachedFontAtlas: IFontAtlas,\n  ): IFontAtlas {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n      iconfont,\n    } = this.fontOptions;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = $window.document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const { mapping, canvasHeight, xOffset, yOffset } = buildMapping({\n      getFontWidth: (char) => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset,\n      }),\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    // TODO safari 不能正常更新\n    const copyImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.height = canvasHeight;\n    ctx.putImageData(copyImageData, 0, 0);\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(\n        fontSize,\n        buffer,\n        radius,\n        cutoff,\n        fontFamily,\n        fontWeight,\n      );\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n      for (const char of characterSet) {\n        if (iconfont) {\n          // @ts-ignore\n          // const icon = eval(\n          //   '(\"' + char.replace('&#x', '\\\\u').replace(';', '') + '\")',\n          // );\n\n          const icon = String.fromCharCode(\n            parseInt(char.replace('&#x', '').replace(';', ''), 16),\n          );\n          const iconData = tinySDF.draw(icon);\n          populateAlphaChannel(iconData, imageData);\n        } else {\n          populateAlphaChannel(tinySDF.draw(char), imageData);\n        }\n        // populateAlphaChannel(tinySDF.draw(char), imageData);\n\n        // 考虑到描边，需要保留 sdf 的 buffer，不能像 deck.gl 一样直接减去\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(\n          char,\n          mapping[char].x,\n          mapping[char].y + fontSize * BASELINE_SCALE,\n        );\n      }\n    }\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height,\n    };\n  }\n\n  private getKey() {\n    return 'key';\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n    } = this.fontOptions;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff} `;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n\n  /**\n   *\n   * @param key\n   * @param characterSet\n   * @returns\n   * 若是相同的 key，那么将字符存储到同同一个字符列表中\n   */\n  private getNewChars(key: string, characterSet: string[]): string[] {\n    const cachedFontAtlas = this.cache.get(key);\n    if (!cachedFontAtlas) {\n      return characterSet;\n    }\n\n    const newChars: string[] = [];\n    const cachedMapping = cachedFontAtlas.mapping;\n    const cachedCharSet = new Set(Object.keys(cachedMapping));\n    const charSet = new Set(characterSet);\n    charSet.forEach((char: string) => {\n      if (!cachedCharSet.has(char)) {\n        newChars.push(char);\n      }\n    });\n\n    return newChars;\n  }\n}\n"],"file":"FontService.js"}