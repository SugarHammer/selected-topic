"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));

var _l7Utils = require("@antv/l7-utils");

var _inversify = require("inversify");

require("reflect-metadata");

var _types = require("../../types");

var _clock = _interopRequireDefault(require("../../utils/clock"));

var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var LayerService = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_types.TYPES.IRendererService), _dec3 = (0, _inversify.inject)(_types.TYPES.IMapService), _dec4 = (0, _inversify.inject)(_types.TYPES.IGlobalConfigService), _dec(_class = (_class2 = function () {
  function LayerService() {
    (0, _classCallCheck2.default)(this, LayerService);
    (0, _defineProperty2.default)(this, "clock", new _clock.default());
    (0, _defineProperty2.default)(this, "alreadyInRendering", false);
    (0, _defineProperty2.default)(this, "layers", []);
    (0, _defineProperty2.default)(this, "layerList", []);
    (0, _defineProperty2.default)(this, "layerRenderID", void 0);
    (0, _defineProperty2.default)(this, "sceneInited", false);
    (0, _defineProperty2.default)(this, "animateInstanceCount", 0);
    (0, _defineProperty2.default)(this, "shaderPicking", true);
    (0, _defineProperty2.default)(this, "enableRender", true);
    (0, _initializerDefineProperty2.default)(this, "renderService", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "mapService", _descriptor2, this);
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor3, this);
  }

  (0, _createClass2.default)(LayerService, [{
    key: "add",
    value: function add(layer) {
      if (this.sceneInited) {
        layer.init();
      }

      this.layers.push(layer);
      this.updateLayerRenderList();
    }
  }, {
    key: "initLayers",
    value: function initLayers() {
      this.sceneInited = true;
      this.layers.forEach(function (layer) {
        if (!layer.inited) {
          layer.init();
        }
      });
      this.updateLayerRenderList();
    }
  }, {
    key: "getRenderList",
    value: function getRenderList() {
      return this.layerList;
    }
  }, {
    key: "getLayers",
    value: function getLayers() {
      return this.layers;
    }
  }, {
    key: "getLayer",
    value: function getLayer(id) {
      return this.layers.find(function (layer) {
        return layer.id === id;
      });
    }
  }, {
    key: "getLayerByName",
    value: function getLayerByName(name) {
      return this.layers.find(function (layer) {
        return layer.name === name;
      });
    }
  }, {
    key: "cleanRemove",
    value: function cleanRemove(layer, parentLayer) {
      if (parentLayer) {
        var layerIndex = parentLayer.layerChildren.indexOf(layer);

        if (layerIndex > -1) {
          parentLayer.layerChildren.splice(layerIndex, 1);
        }
      } else {
        var _layerIndex = this.layers.indexOf(layer);

        if (_layerIndex > -1) {
          this.layers.splice(_layerIndex, 1);
        }
      }

      this.updateLayerRenderList();
      this.renderLayers();
    }
  }, {
    key: "remove",
    value: function remove(layer, parentLayer) {
      if (parentLayer) {
        var layerIndex = parentLayer.layerChildren.indexOf(layer);

        if (layerIndex > -1) {
          parentLayer.layerChildren.splice(layerIndex, 1);
        }
      } else {
        var _layerIndex2 = this.layers.indexOf(layer);

        if (_layerIndex2 > -1) {
          this.layers.splice(_layerIndex2, 1);
        }
      }

      this.updateLayerRenderList();
      layer.destroy();
      this.renderLayers();
    }
  }, {
    key: "removeAllLayers",
    value: function removeAllLayers() {
      this.destroy();
    }
  }, {
    key: "setEnableRender",
    value: function setEnableRender(flag) {
      this.enableRender = flag;
    }
  }, {
    key: "renderLayers",
    value: function () {
      var _renderLayers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var _iterator, _step, layer;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.alreadyInRendering || !this.enableRender)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                this.alreadyInRendering = true;
                this.clear();
                _iterator = _createForOfIteratorHelper(this.layerList);
                _context.prev = 5;

                _iterator.s();

              case 7:
                if ((_step = _iterator.n()).done) {
                  _context.next = 20;
                  break;
                }

                layer = _step.value;
                layer.hooks.beforeRenderData.call();
                layer.hooks.beforeRender.call();

                if (!layer.getLayerConfig().enableMultiPassRenderer) {
                  _context.next = 16;
                  break;
                }

                _context.next = 14;
                return layer.renderMultiPass();

              case 14:
                _context.next = 17;
                break;

              case 16:
                layer.render();

              case 17:
                layer.hooks.afterRender.call();

              case 18:
                _context.next = 7;
                break;

              case 20:
                _context.next = 25;
                break;

              case 22:
                _context.prev = 22;
                _context.t0 = _context["catch"](5);

                _iterator.e(_context.t0);

              case 25:
                _context.prev = 25;

                _iterator.f();

                return _context.finish(25);

              case 28:
                this.alreadyInRendering = false;

              case 29:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[5, 22, 25, 28]]);
      }));

      function renderLayers() {
        return _renderLayers.apply(this, arguments);
      }

      return renderLayers;
    }()
  }, {
    key: "updateLayerRenderList",
    value: function updateLayerRenderList() {
      var _this = this;

      this.layerList = [];
      this.layers.filter(function (layer) {
        return layer.inited;
      }).filter(function (layer) {
        return layer.isVisible();
      }).forEach(function (layer) {
        _this.layerList.push(layer);

        layer.layerChildren.filter(function (childlayer) {
          return childlayer.inited;
        }).filter(function (childlayer) {
          return childlayer.isVisible();
        }).forEach(function (childlayer) {
          _this.layerList.push(childlayer);
        });
      });
      this.layerList.sort(function (pre, next) {
        return pre.zIndex - next.zIndex;
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        if (layer.layerChildren) {
          layer.layerChildren.forEach(function (child) {
            return child.destroy();
          });
          layer.layerChildren = [];
        }

        layer.destroy();
      });
      this.layers = [];
      this.layerList = [];
      this.renderLayers();
    }
  }, {
    key: "startAnimate",
    value: function startAnimate() {
      if (this.animateInstanceCount++ === 0) {
        this.clock.start();
        this.runRender();
      }
    }
  }, {
    key: "stopAnimate",
    value: function stopAnimate() {
      if (--this.animateInstanceCount === 0) {
        this.stopRender();
        this.clock.stop();
      }
    }
  }, {
    key: "getOESTextureFloat",
    value: function getOESTextureFloat() {
      return this.renderService.extensionObject.OES_texture_float;
    }
  }, {
    key: "enableShaderPick",
    value: function enableShaderPick() {
      this.shaderPicking = true;
    }
  }, {
    key: "disableShaderPick",
    value: function disableShaderPick() {
      this.shaderPicking = false;
    }
  }, {
    key: "getShaderPickStat",
    value: function getShaderPickStat() {
      return this.shaderPicking;
    }
  }, {
    key: "runRender",
    value: function runRender() {
      this.renderLayers();
      this.layerRenderID = _l7Utils.$window.requestAnimationFrame(this.runRender.bind(this));
    }
  }, {
    key: "clear",
    value: function clear() {
      var color = (0, _l7Utils.rgb2arr)(this.mapService.bgColor);
      this.renderService.clear({
        color: color,
        depth: 1,
        stencil: 0,
        framebuffer: null
      });
    }
  }, {
    key: "stopRender",
    value: function stopRender() {
      _l7Utils.$window.cancelAnimationFrame(this.layerRenderID);
    }
  }]);
  return LayerService;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "renderService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "mapService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "configService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = LayerService;
//# sourceMappingURL=LayerService.js.map