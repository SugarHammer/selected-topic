{"version":3,"sources":["../../../../src/services/renderer/passes/BasePostProcessingPass.ts"],"names":["BasePostProcessingPass","TYPES","IShaderModuleService","quad","name","PassType","PostProcessing","layer","config","rendererService","getContainer","get","IRendererService","shaderModuleService","createAttribute","createBuffer","createModel","setupShaders","vs","fs","uniforms","model","attributes","a_Position","buffer","data","type","gl","FLOAT","size","u_Texture","convertOptionsToUniforms","depth","enable","count","blend","getName","tex","postProcessor","multiPassRenderer","getPostProcessor","useFramebuffer","getViewportSize","clear","width","height","renderToScreen","getWriteFBO","framebuffer","color","stencil","uniformOptions","u_BloomFinal","getReadFBO","u_ViewportSize","optionsToUpdate","u_Texture2","draw","enabled","Error","options","Object","keys","forEach","optionName"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { camelCase, isNil, upperFirst } from 'lodash';\nimport 'reflect-metadata';\nimport { IShaderModuleService } from '../../shader/IShaderModuleService';\nimport { gl } from '../gl';\nimport { IModel } from '../IModel';\nimport { IRendererService } from '../IRendererService';\n\nimport quad from '../../../shaders/post-processing/quad.glsl';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport { IPostProcessingPass, PassType } from '../IMultiPassRenderer';\nimport { ITexture2D } from '../ITexture2D';\nimport { IUniform } from '../IUniform';\n\n/**\n * 后处理 Pass 基类，通过 PostProcessor 驱动。\n *\n * 约定使用 u_Texture 传递渲染纹理。\n */\n@injectable()\nexport default class BasePostProcessingPass<InitializationOptions = {}>\n  implements IPostProcessingPass<InitializationOptions> {\n  @inject(TYPES.IShaderModuleService)\n  protected shaderModuleService: IShaderModuleService;\n\n  protected rendererService: IRendererService;\n\n  protected config: Partial<InitializationOptions> | undefined;\n\n  protected quad: string = quad;\n\n  /**\n   * 启用开关\n   */\n  private enabled: boolean = true;\n\n  /**\n   * 是否渲染到屏幕\n   */\n  private renderToScreen: boolean = false;\n\n  /**\n   * 渲染命令\n   */\n  private model: IModel;\n\n  /**\n   * 效果名，便于在图层中引用\n   */\n  private name: string;\n\n  private optionsToUpdate: Partial<InitializationOptions> = {};\n\n  public getName() {\n    return this.name;\n  }\n\n  public setName(name: string) {\n    this.name = name;\n  }\n\n  public getType() {\n    return PassType.PostProcessing;\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    this.config = config;\n    this.rendererService = layer\n      .getContainer()\n      .get<IRendererService>(TYPES.IRendererService);\n    this.shaderModuleService = layer\n      .getContainer()\n      .get<IShaderModuleService>(TYPES.IShaderModuleService);\n\n    const { createAttribute, createBuffer, createModel } = this.rendererService;\n    const { vs, fs, uniforms } = this.setupShaders();\n\n    this.model = createModel({\n      vs,\n      fs,\n      attributes: {\n        // 使用一个全屏三角形，相比 Quad 顶点数目更少\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-4, -4, 4, -4, 0, 4],\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      // @ts-ignore\n      uniforms: {\n        // @ts-ignore\n        u_Texture: null,\n        ...uniforms,\n        ...(this.config && this.convertOptionsToUniforms(this.config)),\n      },\n      depth: {\n        enable: false,\n      },\n      count: 3,\n      blend: {\n        // copy pass 需要混合\n        enable: this.getName() === 'copy',\n      },\n    });\n  }\n\n  public render(layer: ILayer, tex?: ITexture2D) {\n    const postProcessor = layer.multiPassRenderer.getPostProcessor();\n    const { useFramebuffer, getViewportSize, clear } = this.rendererService;\n    const { width, height } = getViewportSize();\n    useFramebuffer(\n      this.renderToScreen ? null : postProcessor.getWriteFBO(),\n      () => {\n        clear({\n          framebuffer: postProcessor.getWriteFBO(),\n          color: [0, 0, 0, 0],\n          depth: 1,\n          stencil: 0,\n        });\n\n        const uniformOptions: { [key: string]: any } = {\n          u_BloomFinal: 0.0,\n          u_Texture: postProcessor.getReadFBO(),\n          // u_Texture: tex ? tex : postProcessor.getReadFBO(),\n          u_ViewportSize: [width, height],\n          ...this.convertOptionsToUniforms(this.optionsToUpdate),\n        };\n        if (tex) {\n          uniformOptions.u_BloomFinal = 1.0;\n          uniformOptions.u_Texture2 = tex;\n        }\n        this.model.draw({\n          uniforms: uniformOptions,\n        });\n      },\n    );\n  }\n\n  public isEnabled() {\n    return this.enabled;\n  }\n\n  public setEnabled(enabled: boolean) {\n    this.enabled = enabled;\n  }\n\n  public setRenderToScreen(renderToScreen: boolean) {\n    this.renderToScreen = renderToScreen;\n  }\n\n  public updateOptions(config: Partial<InitializationOptions>) {\n    this.optionsToUpdate = {\n      ...this.optionsToUpdate,\n      ...config,\n    };\n  }\n\n  protected setupShaders(): {\n    vs: string;\n    fs: string;\n    uniforms?: { [key: string]: IUniform };\n  } {\n    throw new Error('Method not implemented.');\n  }\n\n  protected convertOptionsToUniforms(\n    options: Partial<InitializationOptions>,\n  ): {\n    [uniformName: string]: IUniform;\n  } | void {\n    const uniforms: {\n      [key: string]: IUniform;\n    } = {};\n\n    Object.keys(options).forEach((optionName) => {\n      // @ts-ignore\n      if (!isNil(options[optionName])) {\n        uniforms[`u_${upperFirst(camelCase(optionName))}`] =\n          // @ts-ignore\n          options[optionName];\n      }\n    });\n\n    return uniforms;\n  }\n}\n"],"file":"BasePostProcessingPass.js"}