{"version":3,"sources":["../../../../src/services/renderer/passes/PostProcessor.ts"],"names":["PostProcessor","TYPES","IRendererService","readFBO","writeFBO","rendererService","getViewportSize","createTexture2D","width","height","x","y","copy","useFramebuffer","Promise","resolve","reject","getCurrentFBOTex","layer","pass","getReadFBOTex","tex","count","render","swap","i","passes","length","setRenderToScreen","isLastEnabledPass","getName","renderBloomPass","resize","config","init","push","index","splice","name","find","p","createFramebuffer","color","wrapS","gl","CLAMP_TO_EDGE","wrapT","isEnabled","tmp"],"mappings":"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","sourcesContent":["import { inject, injectable, postConstruct } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport { gl } from '../gl';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { IPostProcessingPass, IPostProcessor } from '../IMultiPassRenderer';\nimport { IRendererService } from '../IRendererService';\nimport { ITexture2D } from '../ITexture2D';\n\n/**\n * ported from Three.js EffectComposer\n * 后处理负责 pingpong read/write framebuffer，最后一个 pass 默认输出到屏幕\n */\n@injectable()\nexport default class PostProcessor implements IPostProcessor {\n  @inject(TYPES.IRendererService)\n  protected readonly rendererService: IRendererService;\n\n  private passes: Array<IPostProcessingPass<unknown>> = [];\n  private readFBO: IFramebuffer;\n  private writeFBO: IFramebuffer;\n\n  public getReadFBO() {\n    return this.readFBO;\n  }\n\n  public getWriteFBO() {\n    return this.writeFBO;\n  }\n\n  /**\n   * 从当前的 framebuffer 中获取贴图\n   * @returns\n   */\n  public getCurrentFBOTex() {\n    const { getViewportSize, createTexture2D } = this.rendererService;\n    const { width, height } = getViewportSize();\n    return createTexture2D({\n      x: 0,\n      y: 0,\n      width,\n      height,\n      copy: true,\n    });\n  }\n\n  /**\n   * 从 readFBO 中获取贴图\n   * @returns\n   */\n  public getReadFBOTex() {\n    const { useFramebuffer } = this.rendererService;\n    return new Promise((resolve, reject) => {\n      useFramebuffer(this.readFBO, async () => {\n        resolve(this.getCurrentFBOTex());\n      });\n    });\n  }\n\n  public async renderBloomPass(\n    layer: ILayer,\n    pass: IPostProcessingPass<unknown>,\n  ) {\n    const tex = (await this.getReadFBOTex()) as ITexture2D;\n    // count 定义 bloom 交替绘制的次数\n    let count = 0;\n    while (count < 4) {\n      await pass.render(layer, tex);\n      this.swap();\n      count++;\n    }\n  }\n\n  public async render(layer: ILayer) {\n    for (let i = 0; i < this.passes.length; i++) {\n      const pass = this.passes[i];\n      // last pass should render to screen\n      pass.setRenderToScreen(this.isLastEnabledPass(i));\n\n      // await pass.render(layer);\n      // // pingpong\n      // if (i !== this.passes.length - 1) {\n      //   this.swap();\n      // }\n      if (pass.getName() === 'bloom') {\n        await this.renderBloomPass(layer, pass);\n      } else {\n        await pass.render(layer);\n        // pingpong\n        if (i !== this.passes.length - 1) {\n          this.swap();\n        }\n      }\n    }\n  }\n\n  public resize(width: number, height: number) {\n    this.readFBO.resize({\n      width,\n      height,\n    });\n    this.writeFBO.resize({\n      width,\n      height,\n    });\n  }\n\n  public add<T>(\n    pass: IPostProcessingPass<T>,\n    layer: ILayer,\n    config?: Partial<T>,\n  ) {\n    pass.init(layer, config);\n    this.passes.push(pass);\n  }\n\n  public insert<T>(\n    pass: IPostProcessingPass<T>,\n    index: number,\n    layer: ILayer,\n    config?: Partial<T>,\n  ) {\n    pass.init(layer, config);\n    this.passes.splice(index, 0, pass);\n  }\n\n  public getPostProcessingPassByName(\n    name: string,\n  ): IPostProcessingPass<unknown> | undefined {\n    return this.passes.find((p) => p.getName() === name);\n  }\n\n  @postConstruct()\n  private init() {\n    const { createFramebuffer, createTexture2D } = this.rendererService;\n    this.readFBO = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n    this.writeFBO = createFramebuffer({\n      color: createTexture2D({\n        width: 1,\n        height: 1,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n  }\n\n  private isLastEnabledPass(index: number): boolean {\n    for (let i = index + 1; i < this.passes.length; i++) {\n      if (this.passes[i].isEnabled()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private swap() {\n    const tmp = this.readFBO;\n    this.readFBO = this.writeFBO;\n    this.writeFBO = tmp;\n  }\n}\n"],"file":"PostProcessor.js"}