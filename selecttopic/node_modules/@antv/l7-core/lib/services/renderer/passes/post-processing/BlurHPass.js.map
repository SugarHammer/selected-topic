{"version":3,"sources":["../../../../../src/services/renderer/passes/post-processing/BlurHPass.ts"],"names":["BlurHPass","shaderModuleService","registerModule","vs","quad","fs","blur","getModule","uniforms","rendererService","getViewportSize","width","height","u_ViewportSize","options","blurRadius","u_BlurDir","BasePostProcessingPass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAIA;;;;;;;;;;;;;;IAOqBA,S,WADpB,4B;;;;;;;;;;;;WAIC,wBAAyB;AACvB,WAAKC,mBAAL,CAAyBC,cAAzB,CAAwC,WAAxC,EAAqD;AACnDC,QAAAA,EAAE,EAAEC,IAD+C;AAEnDC,QAAAA,EAAE,EAAEC;AAF+C,OAArD;;AAKA,kCAA6B,KAAKL,mBAAL,CAAyBM,SAAzB,CAC3B,WAD2B,CAA7B;AAAA,UAAQJ,EAAR,yBAAQA,EAAR;AAAA,UAAYE,EAAZ,yBAAYA,EAAZ;AAAA,UAAgBG,QAAhB,yBAAgBA,QAAhB;;AAGA,kCAA0B,KAAKC,eAAL,CAAqBC,eAArB,EAA1B;AAAA,UAAQC,KAAR,yBAAQA,KAAR;AAAA,UAAeC,MAAf,yBAAeA,MAAf;;AAEA,aAAO;AACLT,QAAAA,EAAE,EAAFA,EADK;AAELE,QAAAA,EAAE,EAAFA,EAFK;AAGLG,QAAAA,QAAQ,kCACHA,QADG;AAENK,UAAAA,cAAc,EAAE,CAACF,KAAD,EAAQC,MAAR;AAFV;AAHH,OAAP;AAQD;;;WAED,kCACEE,OADF,EAIS;AACP,UAAMN,QAEL,GAAG,EAFJ;;AAIA,UAAI,CAAC,qBAAMM,OAAO,CAACC,UAAd,CAAL,EAAgC;AAC9BP,QAAAA,QAAQ,CAACQ,SAAT,GAAqB,CAACF,OAAO,CAACC,UAAT,EAAqB,CAArB,CAArB;AACD;;AAED,aAAOP,QAAP;AACD;;;EAtCoCS,+B","sourcesContent":["import { injectable } from 'inversify';\nimport { isNil } from 'lodash';\nimport 'reflect-metadata';\nimport blur from '../../../../shaders/post-processing/blur.glsl';\nimport quad from '../../../../shaders/post-processing/quad.glsl';\nimport { IUniform } from '../../IUniform';\nimport BasePostProcessingPass from '../BasePostProcessingPass';\n\nexport interface IBlurHPassConfig {\n  blurRadius: number;\n}\n\n@injectable()\nexport default class BlurHPass extends BasePostProcessingPass<\n  IBlurHPassConfig\n> {\n  protected setupShaders() {\n    this.shaderModuleService.registerModule('blur-pass', {\n      vs: quad,\n      fs: blur,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'blur-pass',\n    );\n    const { width, height } = this.rendererService.getViewportSize();\n\n    return {\n      vs,\n      fs,\n      uniforms: {\n        ...uniforms,\n        u_ViewportSize: [width, height],\n      },\n    };\n  }\n\n  protected convertOptionsToUniforms(\n    options: Partial<IBlurHPassConfig>,\n  ): {\n    [uniformName: string]: IUniform;\n  } | void {\n    const uniforms: {\n      [key: string]: IUniform;\n    } = {};\n\n    if (!isNil(options.blurRadius)) {\n      uniforms.u_BlurDir = [options.blurRadius, 0];\n    }\n\n    return uniforms;\n  }\n}\n"],"file":"BlurHPass.js"}