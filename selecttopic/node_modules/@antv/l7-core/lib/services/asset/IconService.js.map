{"version":3,"sources":["../../../src/services/asset/IconService.ts"],"names":["BUFFER","MAX_CANVAS_WIDTH","imageSize","IconService","loadingImageCount","iconData","iconMap","canvas","$window","document","createElement","width","height","ctx","getContext","id","image","imagedata","Image","hasImage","Error","push","size","updateIconMap","loadImage","then","img","iconImage","find","icon","update","sceneService","getSceneConfig","createImage","loadImageMini","texture","hasOwnProperty","filter","removeAllListeners","url","Promise","resolve","reject","HTMLImageElement","crossOrigin","onload","onerror","src","File","URL","createObjectURL","updateIconAtlas","emit","canvasHeight","Object","keys","forEach","item","x","y","max","Math","ratio","drawHeight","drawWidth","drawImage","mapping","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAUA,IAAMA,MAAM,GAAG,CAAf;AACA,IAAMC,gBAAgB,GAAG,IAAzB;AACA,IAAMC,SAAS,GAAG,EAAlB;IAEqBC,W,WADpB,4B;;;;;;;;;;;;;;;+FAE+B,G;;;;;;oGAMF,C;;;;;;WAE5B,qBAAmB;AACjB,aAAO,KAAKC,iBAAL,KAA2B,CAAlC;AACD;;;WACD,gBAAc;AACZ,WAAKC,QAAL,GAAgB,EAAhB;AACA,WAAKC,OAAL,GAAe,EAAf;AACA,WAAKC,MAAL,GAAcC,iBAAQC,QAAR,CAAiBC,aAAjB,CAA+B,QAA/B,CAAd;AACA,WAAKH,MAAL,CAAYI,KAAZ,GAAoB,GAApB;AACA,WAAKJ,MAAL,CAAYK,MAAZ,GAAqB,GAArB;AACA,WAAKC,GAAL,GAAW,KAAKN,MAAL,CAAYO,UAAZ,CAAuB,IAAvB,CAAX;AACD;;;WAED,kBAAgBC,EAAhB,EAA4BC,KAA5B,EAA2C;AAAA;;AACzC,UAAIC,SAAS,GAAG,IAAIC,KAAJ,EAAhB;AACA,WAAKd,iBAAL;;AACA,UAAI,KAAKe,QAAL,CAAcJ,EAAd,CAAJ,EAAuB;AACrB,cAAM,IAAIK,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,WAAKf,QAAL,CAAcgB,IAAd,CAAmB;AACjBN,QAAAA,EAAE,EAAFA,EADiB;AAEjBO,QAAAA,IAAI,EAAEpB;AAFW,OAAnB;AAIA,WAAKqB,aAAL;AACA,WAAKC,SAAL,CAAeR,KAAf,EAAsBS,IAAtB,CAA2B,UAACC,GAAD,EAAS;AAClCT,QAAAA,SAAS,GAAGS,GAAZ;;AACA,YAAMC,SAAS,GAAG,MAAI,CAACtB,QAAL,CAAcuB,IAAd,CAAmB,UAACC,IAAD,EAAiB;AACpD,iBAAOA,IAAI,CAACd,EAAL,KAAYA,EAAnB;AACD,SAFiB,CAAlB;;AAGA,YAAIY,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACX,KAAV,GAAkBC,SAAlB;AACAU,UAAAA,SAAS,CAAChB,KAAV,GAAkBM,SAAS,CAACN,KAA5B;AACAgB,UAAAA,SAAS,CAACf,MAAV,GAAmBK,SAAS,CAACL,MAA7B;AACD;;AACD,QAAA,MAAI,CAACkB,MAAL;AACD,OAXD;AAYD;;;WAQD,sBAAoBf,EAApB,EAAgCC,KAAhC,EAA+Ce,YAA/C,EAA4E;AAAA;;AAC1E,UAAMxB,MAAM,GAAGwB,YAAY,CAACC,cAAb,GAA8BzB,MAA7C;AAEA,UAAIU,SAAS,GAAGV,MAAM,CAAC0B,WAAP,EAAhB;AACA,WAAK7B,iBAAL;;AACA,UAAI,KAAKe,QAAL,CAAcJ,EAAd,CAAJ,EAAuB;AACrB,cAAM,IAAIK,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,WAAKf,QAAL,CAAcgB,IAAd,CAAmB;AACjBN,QAAAA,EAAE,EAAFA,EADiB;AAEjBO,QAAAA,IAAI,EAAEpB;AAFW,OAAnB;AAIA,WAAKqB,aAAL;AACA,WAAKW,aAAL,CAAmBlB,KAAnB,EAA0BT,MAA1B,EAAuDkB,IAAvD,CAA4D,UAACC,GAAD,EAAS;AACnET,QAAAA,SAAS,GAAGS,GAAZ;;AACA,YAAMC,SAAS,GAAG,MAAI,CAACtB,QAAL,CAAcuB,IAAd,CAAmB,UAACC,IAAD,EAAiB;AACpD,iBAAOA,IAAI,CAACd,EAAL,KAAYA,EAAnB;AACD,SAFiB,CAAlB;;AAGA,YAAIY,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACX,KAAV,GAAkBC,SAAlB;AACAU,UAAAA,SAAS,CAAChB,KAAV,GAAkBM,SAAS,CAACN,KAA5B;AACAgB,UAAAA,SAAS,CAACf,MAAV,GAAmBK,SAAS,CAACL,MAA7B;AACD;;AACD,QAAA,MAAI,CAACkB,MAAL;AACD,OAXD;AAYD;;;WAED,sBAAgC;AAC9B,aAAO,KAAKK,OAAZ;AACD;;;WAED,sBAAoB;AAClB,aAAO,KAAK7B,OAAZ;AACD;;;WAED,qBAAmB;AACjB,aAAO,KAAKC,MAAZ;AACD;;;WAED,kBAAgBQ,EAAhB,EAAqC;AACnC,aAAO,KAAKT,OAAL,CAAa8B,cAAb,CAA4BrB,EAA5B,CAAP;AACD;;;WAED,qBAAmBA,EAAnB,EAAqC;AACnC,UAAI,KAAKI,QAAL,CAAcJ,EAAd,CAAJ,EAAuB;AACrB,aAAKV,QAAL,GAAgB,KAAKA,QAAL,CAAcgC,MAAd,CAAqB,UAACR,IAAD,EAAU;AAC7C,iBAAOA,IAAI,CAACd,EAAL,KAAYA,EAAnB;AACD,SAFe,CAAhB;AAGA,eAAO,KAAKT,OAAL,CAAaS,EAAb,CAAP;AACA,aAAKe,MAAL;AACD;AACF;;;WACD,mBAAuB;AAErB,WAAKQ,kBAAL,CAAwB,aAAxB;AACA,WAAKjC,QAAL,GAAgB,EAAhB;AACA,WAAKC,OAAL,GAAe,EAAf;AACD;;;WAED,mBAAiBiC,GAAjB,EAA8B;AAC5B,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIH,GAAG,YAAYI,gBAAnB,EAAqC;AACnCF,UAAAA,OAAO,CAACF,GAAD,CAAP;AACA;AACD;;AACD,YAAMvB,KAAK,GAAG,IAAIE,KAAJ,EAAd;AACAF,QAAAA,KAAK,CAAC4B,WAAN,GAAoB,WAApB;;AACA5B,QAAAA,KAAK,CAAC6B,MAAN,GAAe,YAAM;AACnBJ,UAAAA,OAAO,CAACzB,KAAD,CAAP;AACD,SAFD;;AAGAA,QAAAA,KAAK,CAAC8B,OAAN,GAAgB,YAAM;AACpBJ,UAAAA,MAAM,CAAC,IAAItB,KAAJ,CAAU,6BAA6BmB,GAAvC,CAAD,CAAN;AACD,SAFD;;AAGAvB,QAAAA,KAAK,CAAC+B,GAAN,GAAYR,GAAG,YAAYS,IAAf,GAAsBC,GAAG,CAACC,eAAJ,CAAoBX,GAApB,CAAtB,GAAiDA,GAA7D;AACD,OAdM,CAAP;AAeD;;;WACD,kBAAiB;AACf,WAAKhB,aAAL;AACA,WAAK4B,eAAL;AACA,WAAK/C,iBAAL;;AACA,UAAI,KAAKA,iBAAL,KAA2B,CAA/B,EAAkC;AAChC,aAAKgD,IAAL,CAAU,aAAV;AACD;AACF;;;WAKD,2BAA0B;AAAA;;AACxB,WAAK7C,MAAL,CAAYI,KAAZ,GAAoBV,gBAApB;AACA,WAAKM,MAAL,CAAYK,MAAZ,GAAqB,KAAKyC,YAA1B;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKjD,OAAjB,EAA0BkD,OAA1B,CAAkC,UAACC,IAAD,EAAkB;AAClD,kCAAiD,MAAI,CAACnD,OAAL,CAAamD,IAAb,CAAjD;AAAA,YAAQC,CAAR,uBAAQA,CAAR;AAAA,YAAWC,CAAX,uBAAWA,CAAX;AAAA,YAAc3C,KAAd,uBAAcA,KAAd;AAAA,wDAAqBL,KAArB;AAAA,YAAqBA,KAArB,sCAA6B,EAA7B;AAAA,wDAAiCC,MAAjC;AAAA,YAAiCA,MAAjC,sCAA0C,EAA1C;AACA,YAAMgD,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASjD,KAAT,EAA0BC,MAA1B,CAAZ;AACA,YAAMkD,KAAK,GAAGF,GAAG,GAAG1D,SAApB;AACA,YAAM6D,UAAU,GAAGnD,MAAM,GAAGkD,KAA5B;AACA,YAAME,SAAS,GAAGrD,KAAK,GAAGmD,KAA1B;;AACA,YAAI9C,KAAJ,EAAW;AACT,UAAA,MAAI,CAACH,GAAL,CAASoD,SAAT,CACEjD,KADF,EAEE0C,CAAC,GAAG,CAACxD,SAAS,GAAG8D,SAAb,IAA0B,CAFhC,EAGEL,CAAC,GAAG,CAACzD,SAAS,GAAG6D,UAAb,IAA2B,CAHjC,EAIEC,SAJF,EAKED,UALF;AAOD;AACF,OAfD;AAgBD;;;WAKD,yBAAwB;AACtB,6BAAkC,gCAChC,KAAK1D,QAD2B,EAEhCL,MAFgC,EAGhCC,gBAHgC,CAAlC;AAAA,UAAQiE,OAAR,oBAAQA,OAAR;AAAA,UAAiBb,YAAjB,oBAAiBA,YAAjB;;AAKA,WAAK/C,OAAL,GAAe4D,OAAf;AACA,WAAKb,YAAL,GAAoBA,YAApB;AACD;;;WAOD,uBAAsBd,GAAtB,EAAmChC,MAAnC,EAA8D;AAC5D,aAAO,IAAIiC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEtC,YAAM1B,KAAK,GAAGT,MAAM,CAAC0B,WAAP,EAAd;AACAjB,QAAAA,KAAK,CAAC4B,WAAN,GAAoB,WAApB;;AACA5B,QAAAA,KAAK,CAAC6B,MAAN,GAAe,YAAM;AACnBJ,UAAAA,OAAO,CAACzB,KAAD,CAAP;AACD,SAFD;;AAGAA,QAAAA,KAAK,CAAC8B,OAAN,GAAgB,YAAM;AACpBJ,UAAAA,MAAM,CAAC,IAAItB,KAAJ,CAAU,6BAA6BmB,GAAvC,CAAD,CAAN;AACD,SAFD;;AAGAvB,QAAAA,KAAK,CAAC+B,GAAN,GAAYR,GAAZ;AACD,OAXM,CAAP;AAYD;;;EAhMsC4B,0B","sourcesContent":["import { $window } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { buildIconMaping } from '../../utils/font_util';\nimport { ITexture2D } from '../renderer/ITexture2D';\nimport { ISceneService } from '../scene/ISceneService';\nimport {\n  IIcon,\n  IICONMap,\n  IIconService,\n  IIconValue,\n  IImage,\n} from './IIconService';\nconst BUFFER = 3;\nconst MAX_CANVAS_WIDTH = 1024;\nconst imageSize = 64;\n@injectable()\nexport default class IconService extends EventEmitter implements IIconService {\n  public canvasHeight: number = 128;\n  private texture: ITexture2D;\n  private canvas: HTMLCanvasElement;\n  private iconData: IIcon[];\n  private iconMap: IICONMap;\n  private ctx: CanvasRenderingContext2D;\n  private loadingImageCount = 0;\n\n  public isLoading() {\n    return this.loadingImageCount === 0;\n  }\n  public init() {\n    this.iconData = [];\n    this.iconMap = {};\n    this.canvas = $window.document.createElement('canvas');\n    this.canvas.width = 128;\n    this.canvas.height = 128;\n    this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n  }\n\n  public addImage(id: string, image: IImage) {\n    let imagedata = new Image();\n    this.loadingImageCount++;\n    if (this.hasImage(id)) {\n      throw new Error('Image Id already exists');\n    }\n    this.iconData.push({\n      id,\n      size: imageSize,\n    });\n    this.updateIconMap();\n    this.loadImage(image).then((img) => {\n      imagedata = img as HTMLImageElement;\n      const iconImage = this.iconData.find((icon: IIcon) => {\n        return icon.id === id;\n      });\n      if (iconImage) {\n        iconImage.image = imagedata;\n        iconImage.width = imagedata.width;\n        iconImage.height = imagedata.height;\n      }\n      this.update();\n    });\n  }\n\n  /**\n   * 适配小程序\n   * @param id\n   * @param image\n   * @param sceneService\n   */\n  public addImageMini(id: string, image: IImage, sceneService: ISceneService) {\n    const canvas = sceneService.getSceneConfig().canvas;\n    // @ts-ignore\n    let imagedata = canvas.createImage();\n    this.loadingImageCount++;\n    if (this.hasImage(id)) {\n      throw new Error('Image Id already exists');\n    }\n    this.iconData.push({\n      id,\n      size: imageSize,\n    });\n    this.updateIconMap();\n    this.loadImageMini(image, canvas as HTMLCanvasElement).then((img) => {\n      imagedata = img as HTMLImageElement;\n      const iconImage = this.iconData.find((icon: IIcon) => {\n        return icon.id === id;\n      });\n      if (iconImage) {\n        iconImage.image = imagedata;\n        iconImage.width = imagedata.width;\n        iconImage.height = imagedata.height;\n      }\n      this.update();\n    });\n  }\n\n  public getTexture(): ITexture2D {\n    return this.texture;\n  }\n\n  public getIconMap() {\n    return this.iconMap;\n  }\n\n  public getCanvas() {\n    return this.canvas;\n  }\n\n  public hasImage(id: string): boolean {\n    return this.iconMap.hasOwnProperty(id);\n  }\n\n  public removeImage(id: string): void {\n    if (this.hasImage(id)) {\n      this.iconData = this.iconData.filter((icon) => {\n        return icon.id !== id;\n      });\n      delete this.iconMap[id];\n      this.update();\n    }\n  }\n  public destroy(): void {\n    // 在销毁的时候清除所有注册的监听\n    this.removeAllListeners('imageUpdate');\n    this.iconData = [];\n    this.iconMap = {};\n  }\n\n  public loadImage(url: IImage) {\n    return new Promise((resolve, reject) => {\n      if (url instanceof HTMLImageElement) {\n        resolve(url);\n        return;\n      }\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.onload = () => {\n        resolve(image);\n      };\n      image.onerror = () => {\n        reject(new Error('Could not load image at ' + url));\n      };\n      image.src = url instanceof File ? URL.createObjectURL(url) : url;\n    });\n  }\n  private update() {\n    this.updateIconMap();\n    this.updateIconAtlas();\n    this.loadingImageCount--;\n    if (this.loadingImageCount === 0) {\n      this.emit('imageUpdate');\n    }\n  }\n\n  /**\n   * 将新增的 icon 图像存储到画布上（正方形）\n   */\n  private updateIconAtlas() {\n    this.canvas.width = MAX_CANVAS_WIDTH;\n    this.canvas.height = this.canvasHeight;\n    Object.keys(this.iconMap).forEach((item: string) => {\n      const { x, y, image, width = 64, height = 64 } = this.iconMap[item];\n      const max = Math.max(width as number, height as number);\n      const ratio = max / imageSize;\n      const drawHeight = height / ratio;\n      const drawWidth = width / ratio;\n      if (image) {\n        this.ctx.drawImage(\n          image,\n          x + (imageSize - drawWidth) / 2,\n          y + (imageSize - drawHeight) / 2,\n          drawWidth,\n          drawHeight,\n        );\n      }\n    });\n  }\n\n  /**\n   * 计算 icon 在画布上的排布（是否需要换行）\n   */\n  private updateIconMap() {\n    const { mapping, canvasHeight } = buildIconMaping(\n      this.iconData,\n      BUFFER,\n      MAX_CANVAS_WIDTH,\n    );\n    this.iconMap = mapping;\n    this.canvasHeight = canvasHeight;\n  }\n\n  /**\n   * 适配小程序\n   * @param url\n   * @returns\n   */\n  private loadImageMini(url: IImage, canvas: HTMLCanvasElement) {\n    return new Promise((resolve, reject) => {\n      // @ts-ignore\n      const image = canvas.createImage();\n      image.crossOrigin = 'anonymous';\n      image.onload = () => {\n        resolve(image);\n      };\n      image.onerror = () => {\n        reject(new Error('Could not load image at ' + url));\n      };\n      image.src = url as string;\n    });\n  }\n}\n"],"file":"IconService.js"}