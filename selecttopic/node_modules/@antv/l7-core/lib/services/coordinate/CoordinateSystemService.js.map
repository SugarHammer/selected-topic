{"version":3,"sources":["../../../src/services/coordinate/CoordinateSystemService.ts"],"names":["VECTOR_TO_POINT_MATRIX","CoordinateSystemService","TYPES","ICameraService","zoom","cameraService","getZoom","zoomScale","getZoomScale","center","getCenter","latitude","pixelsPerMeter","pixelsPerDegree","viewportCenter","viewportCenterProjection","pixelsPerDegree2","coordinateSystem","CoordinateSystem","LNGLAT","P20","setViewProjectionMatrix","undefined","LNGLAT_OFFSET","calculateLnglatOffset","P20_OFFSET","needRefresh","scale","flipY","highPrecision","ppm","ppd","viewMatrix","getViewMatrix","projectionMatrix","getProjectionMatrix","viewProjectionMatrix","mat4","multiply","positionPixels","projectFlat","Math","fround","pow","vec4","transformMat4","getViewMatrixUncentered"],"mappings":"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","sourcesContent":["import { mat4, vec4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { getDistanceScales } from '../../utils/project';\nimport { ICameraService } from '../camera/ICameraService';\n// import { IMapService } from '../map/IMapService'\nimport {\n  CoordinateSystem,\n  ICoordinateSystemService,\n} from './ICoordinateSystemService';\n\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\n\n@injectable()\nexport default class CoordinateSystemService\n  implements ICoordinateSystemService {\n  public needRefresh: boolean = true;\n  @inject(TYPES.ICameraService)\n  private readonly cameraService: ICameraService;\n\n  // map.getCenter\n  // @inject(TYPES.IMapService)\n  // private readonly mapService: IMapService\n\n  /**\n   * 1. Web 墨卡托坐标系\n   * 2. 偏移经纬度，用于解决高精度抖动问题\n   * 3. 瓦片坐标，用于数据瓦片\n   * 4. 常规世界坐标系，用于常规 2D/3D 可视化场景\n   * 5. P20 坐标系，高德地图使用\n   * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/doml91\n   */\n  private coordinateSystem: CoordinateSystem;\n\n  /**\n   * 屏幕中心点 [lng, lat]\n   */\n  private viewportCenter: [number, number];\n\n  /**\n   * 屏幕中心点的最终投影结果，在 CPU 侧计算后传入 Shader\n   * @see https://zhuanlan.zhihu.com/p/57469121\n   */\n  private viewportCenterProjection: [number, number, number, number];\n\n  /**\n   * 像素单位 -> 经纬度 [x, y, z]\n   */\n  private pixelsPerDegree: [number, number, number];\n\n  /**\n   * 像素单位 -> 经纬度 [lng, lat] 使用泰勒级数展开\n   * 通过墨卡托坐标系下的差值估计世界坐标系下的差值\n   * @see https://zhuanlan.zhihu.com/p/57469121\n   */\n  private pixelsPerDegree2: [number, number, number];\n\n  /**\n   * 像素单位 -> 米\n   */\n  private pixelsPerMeter: [number, number, number];\n\n  /**\n   * 重新计算当前坐标系参数\n   * TODO: 使用 memoize 缓存参数以及计算结果\n   */\n  public refresh(): void {\n    // if (!this.needRefresh) {\n    //   return;\n    // }\n    const zoom = this.cameraService.getZoom();\n    const zoomScale = this.cameraService.getZoomScale();\n    const center = this.cameraService.getCenter();\n\n    // 计算像素到米以及经纬度之间的转换\n    const { pixelsPerMeter, pixelsPerDegree } = getDistanceScales({\n      // longitude: center[0],\n      latitude: center[1],\n      zoom,\n    });\n    this.viewportCenter = center;\n    this.viewportCenterProjection = [0, 0, 0, 0];\n    this.pixelsPerMeter = pixelsPerMeter;\n    this.pixelsPerDegree = pixelsPerDegree;\n    this.pixelsPerDegree2 = [0, 0, 0];\n\n    if (\n      this.coordinateSystem === CoordinateSystem.LNGLAT ||\n      this.coordinateSystem === CoordinateSystem.P20\n    ) {\n      // 继续使用相机服务计算的 VP 矩阵\n      this.cameraService.setViewProjectionMatrix(undefined);\n    } else if (this.coordinateSystem === CoordinateSystem.LNGLAT_OFFSET) {\n      this.calculateLnglatOffset(center, zoom);\n    } else if (this.coordinateSystem === CoordinateSystem.P20_OFFSET) {\n      this.calculateLnglatOffset(center, zoom, zoomScale, true);\n    }\n    this.needRefresh = false;\n\n    // TODO: 判断是否应用瓦片 & 常规坐标系\n  }\n\n  public getCoordinateSystem(): CoordinateSystem {\n    return this.coordinateSystem;\n  }\n\n  public setCoordinateSystem(coordinateSystem: CoordinateSystem) {\n    this.coordinateSystem = coordinateSystem;\n  }\n\n  public getViewportCenter(): [number, number] {\n    return this.viewportCenter;\n  }\n\n  public getViewportCenterProjection(): [number, number, number, number] {\n    return this.viewportCenterProjection;\n  }\n\n  public getPixelsPerDegree(): [number, number, number] {\n    return this.pixelsPerDegree;\n  }\n\n  public getPixelsPerDegree2(): [number, number, number] {\n    return this.pixelsPerDegree2;\n  }\n\n  public getPixelsPerMeter(): [number, number, number] {\n    return this.pixelsPerMeter;\n  }\n\n  private calculateLnglatOffset(\n    center: [number, number],\n    zoom: number,\n    scale?: number,\n    flipY?: boolean,\n  ) {\n    // http://uber-common.github.io/viewport-mercator-project/docs/api-reference/web-mercator-utils#code-classlanguage-textgetdistancescalesviewportcode\n    const {\n      pixelsPerMeter: ppm,\n      pixelsPerDegree: ppd,\n      pixelsPerDegree2,\n    } = getDistanceScales({\n      // longitude: center[0],\n      latitude: center[1],\n      zoom,\n      scale,\n      flipY,\n      highPrecision: true,\n    });\n\n    let viewMatrix = this.cameraService.getViewMatrix();\n    const projectionMatrix = this.cameraService.getProjectionMatrix();\n    let viewProjectionMatrix = mat4.multiply(\n      ([] as unknown) as mat4,\n      (projectionMatrix as unknown) as mat4,\n      (viewMatrix as unknown) as mat4,\n    );\n\n    // 经纬度投影到 Web 墨卡托坐标系\n    const positionPixels = this.cameraService.projectFlat(\n      [Math.fround(center[0]), Math.fround(center[1])],\n      Math.pow(2, zoom),\n    );\n\n    // Web 墨卡托坐标系通过 VP 矩阵变换到世界坐标系\n    this.viewportCenterProjection = (vec4.transformMat4(\n      ([] as unknown) as vec4,\n      [positionPixels[0], positionPixels[1], 0.0, 1.0],\n      (viewProjectionMatrix as unknown) as mat4,\n    ) as unknown) as [number, number, number, number];\n\n    // Always apply uncentered projection matrix if available (shader adds center)\n    viewMatrix = this.cameraService.getViewMatrixUncentered() || viewMatrix;\n\n    // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n    viewProjectionMatrix = mat4.multiply(\n      ([] as unknown) as mat4,\n      (projectionMatrix as unknown) as mat4,\n      (viewMatrix as unknown) as mat4,\n    );\n    viewProjectionMatrix = mat4.multiply(\n      ([] as unknown) as mat4,\n      viewProjectionMatrix,\n      (VECTOR_TO_POINT_MATRIX as unknown) as mat4,\n    );\n\n    // 重新计算相机 VP 矩阵\n    this.cameraService.setViewProjectionMatrix(\n      (viewProjectionMatrix as unknown) as number[],\n    );\n\n    this.pixelsPerMeter = ppm;\n    this.pixelsPerDegree = ppd;\n    this.pixelsPerDegree2 = pixelsPerDegree2;\n  }\n}\n"],"file":"CoordinateSystemService.js"}