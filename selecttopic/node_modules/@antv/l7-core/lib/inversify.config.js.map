{"version":3,"sources":["../src/inversify.config.ts"],"names":["container","Container","bind","TYPES","IGlobalConfigService","to","GlobalConfigService","inSingletonScope","EventEmitter","IEventEmitter","DECORATORS","lazyInject","serviceIdentifier","original","proto","key","descriptor","call","initializer","lazyMultiInject","sceneIdCounter","createSceneContainer","sceneContainer","parent","SceneID","toConstantValue","IShaderModuleService","ShaderModuleService","ILayerService","LayerService","ISceneService","SceneService","ICameraService","CameraService","ICoordinateSystemService","CoordinateSystemService","IInteractionService","InteractionService","IPickingService","PickingService","IControlService","ControlService","IMarkerService","MarkerService","IIconService","IconService","IFontService","FontService","IPopupService","PopupService","INormalPass","ClearPass","whenTargetNamed","PixelPickingPass","RenderPass","TAAPass","IFactoryNormalPass","toFactory","context","named","getNamed","IPostProcessingPass","CopyPass","BloomPass","BlurHPass","BlurVPass","NoisePass","SepiaPass","ColorHalfTonePass","HexagonalPixelatePass","InkPass","IFactoryPostProcessingPass","pass","setName","createLayerContainer","layerContainer","IStyleAttributeService","StyleAttributeService","IMultiPassRenderer","MultiPassRenderer","IPostProcessor","PostProcessor"],"mappings":"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","sourcesContent":["/**\n * Root Container\n * @see /dev-docs/IoC 容器、依赖注入与服务说明.md\n */\nimport 'reflect-metadata';\n\nimport { EventEmitter } from 'eventemitter3';\nimport { Container, decorate, injectable, interfaces } from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { TYPES } from './types';\n\n/** Service interfaces */\nimport { IFontService } from './services/asset/IFontService';\nimport { IIconService } from './services/asset/IIconService';\nimport { ICameraService } from './services/camera/ICameraService';\nimport { IControlService } from './services/component/IControlService';\nimport { IGlobalConfigService } from './services/config/IConfigService';\nimport { ICoordinateSystemService } from './services/coordinate/ICoordinateSystemService';\nimport { IInteractionService } from './services/interaction/IInteractionService';\nimport { IPickingService } from './services/interaction/IPickingService';\nimport { ILayerService } from './services/layer/ILayerService';\nimport { IStyleAttributeService } from './services/layer/IStyleAttributeService';\nimport { ISceneService } from './services/scene/ISceneService';\nimport { IShaderModuleService } from './services/shader/IShaderModuleService';\n\n/** Service implements */\nimport FontService from './services/asset/FontService';\nimport IconService from './services/asset/IconService';\nimport CameraService from './services/camera/CameraService';\nimport ControlService from './services/component/ControlService';\nimport MarkerService from './services/component/MarkerService';\nimport PopupService from './services/component/PopupService';\nimport GlobalConfigService from './services/config/ConfigService';\nimport CoordinateSystemService from './services/coordinate/CoordinateSystemService';\nimport InteractionService from './services/interaction/InteractionService';\nimport PickingService from './services/interaction/PickingService';\nimport LayerService from './services/layer/LayerService';\nimport StyleAttributeService from './services/layer/StyleAttributeService';\nimport SceneService from './services/scene/SceneService';\nimport ShaderModuleService from './services/shader/ShaderModuleService';\n\n/** PostProcessing passes */\nimport { IMarkerService } from './services/component/IMarkerService';\nimport { IPopupService } from './services/component/IPopupService';\nimport {\n  IMultiPassRenderer,\n  IPass,\n  IPostProcessingPass,\n  IPostProcessor,\n} from './services/renderer/IMultiPassRenderer';\nimport ClearPass from './services/renderer/passes/ClearPass';\nimport MultiPassRenderer from './services/renderer/passes/MultiPassRenderer';\nimport PixelPickingPass from './services/renderer/passes/PixelPickingPass';\nimport BloomPass from './services/renderer/passes/post-processing/BloomPass';\nimport BlurHPass from './services/renderer/passes/post-processing/BlurHPass';\nimport BlurVPass from './services/renderer/passes/post-processing/BlurVPass';\nimport ColorHalfTonePass from './services/renderer/passes/post-processing/ColorHalfTonePass';\nimport CopyPass from './services/renderer/passes/post-processing/CopyPass';\nimport HexagonalPixelatePass from './services/renderer/passes/post-processing/HexagonalPixelatePass';\nimport InkPass from './services/renderer/passes/post-processing/InkPass';\nimport NoisePass from './services/renderer/passes/post-processing/NoisePass';\nimport SepiaPass from './services/renderer/passes/post-processing/SepiaPass';\nimport PostProcessor from './services/renderer/passes/PostProcessor';\nimport RenderPass from './services/renderer/passes/RenderPass';\nimport TAAPass from './services/renderer/passes/TAAPass';\n\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#defaultscope\nconst container = new Container();\n\n/**\n * bind global services in root container\n */\ncontainer\n  .bind<IGlobalConfigService>(TYPES.IGlobalConfigService)\n  .to(GlobalConfigService)\n  .inSingletonScope();\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/inheritance.md#what-can-i-do-when-my-base-class-is-provided-by-a-third-party-module\ndecorate(injectable(), EventEmitter);\ncontainer.bind(TYPES.IEventEmitter).to(EventEmitter);\n// 支持 L7 使用 new 而非容器实例化的场景，同时禁止 lazyInject cache\n// @see https://github.com/inversify/inversify-inject-decorators#caching-vs-non-caching-behaviour\nconst DECORATORS = getDecorators(container, false);\n\ninterface IBabelPropertyDescriptor extends PropertyDescriptor {\n  initializer(): any;\n}\n// Add babel legacy decorators support\n// @see https://github.com/inversify/InversifyJS/issues/1050\n// @see https://github.com/inversify/InversifyJS/issues/1026#issuecomment-504936034\nexport const lazyInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    // return link to proto, so own value wont be 'undefined' after component's creation\n    if (descriptor) {\n      descriptor.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\nexport const lazyMultiInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyMultiInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    if (descriptor) {\n      // return link to proto, so own value wont be 'undefined' after component's creation\n      descriptor!.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\n\nexport default container;\n\nlet sceneIdCounter = 0;\nexport function createSceneContainer() {\n  // @see https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md#support-for-hierarchical-di-systems\n  const sceneContainer = new Container();\n  sceneContainer.parent = container;\n\n  // 生成场景 ID 并保存在容器内\n  sceneContainer\n    .bind<string>(TYPES.SceneID)\n    .toConstantValue(`${sceneIdCounter++}`);\n  sceneContainer\n    .bind<IShaderModuleService>(TYPES.IShaderModuleService)\n    .to(ShaderModuleService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<ILayerService>(TYPES.ILayerService)\n    .to(LayerService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<ISceneService>(TYPES.ISceneService)\n    .to(SceneService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<ICameraService>(TYPES.ICameraService)\n    .to(CameraService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<ICoordinateSystemService>(TYPES.ICoordinateSystemService)\n    .to(CoordinateSystemService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IInteractionService>(TYPES.IInteractionService)\n    .to(InteractionService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IPickingService>(TYPES.IPickingService)\n    .to(PickingService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IControlService>(TYPES.IControlService)\n    .to(ControlService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IMarkerService>(TYPES.IMarkerService)\n    .to(MarkerService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IIconService>(TYPES.IIconService)\n    .to(IconService)\n    .inSingletonScope();\n  sceneContainer\n    .bind<IFontService>(TYPES.IFontService)\n    .to(FontService)\n    .inSingletonScope();\n\n  sceneContainer\n    .bind<IPopupService>(TYPES.IPopupService)\n    .to(PopupService)\n    .inSingletonScope();\n\n  // 绑定常规 passes\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(ClearPass)\n    .whenTargetNamed('clear');\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(PixelPickingPass)\n    .whenTargetNamed('pixelPicking');\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(RenderPass)\n    .whenTargetNamed('render');\n  sceneContainer\n    .bind<IPass<unknown>>(TYPES.INormalPass)\n    .to(TAAPass)\n    .whenTargetNamed('taa');\n  sceneContainer\n    .bind<interfaces.Factory<IPass<unknown>>>(TYPES.IFactoryNormalPass)\n    .toFactory<IPass<unknown>>((context) => (named: string) =>\n      context.container.getNamed<IPass<unknown>>(TYPES.INormalPass, named),\n    );\n\n  // 绑定 post processing passes\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(CopyPass)\n    .whenTargetNamed('copy');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(BloomPass)\n    .whenTargetNamed('bloom');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(BlurHPass)\n    .whenTargetNamed('blurH');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(BlurVPass)\n    .whenTargetNamed('blurV');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(NoisePass)\n    .whenTargetNamed('noise');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(SepiaPass)\n    .whenTargetNamed('sepia');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(ColorHalfTonePass)\n    .whenTargetNamed('colorHalftone');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(HexagonalPixelatePass)\n    .whenTargetNamed('hexagonalPixelate');\n  sceneContainer\n    .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n    .to(InkPass)\n    .whenTargetNamed('ink');\n\n  // 绑定工厂方法\n  sceneContainer\n    .bind<interfaces.Factory<IPostProcessingPass<unknown>>>(\n      TYPES.IFactoryPostProcessingPass,\n    )\n    .toFactory<IPostProcessingPass<unknown>>((context) => (named: string) => {\n      const pass = context.container.getNamed<IPostProcessingPass<unknown>>(\n        TYPES.IPostProcessingPass,\n        named,\n      );\n      pass.setName(named);\n      return pass;\n    });\n\n  return sceneContainer;\n}\n\nexport function createLayerContainer(sceneContainer: Container) {\n  const layerContainer = new Container();\n  layerContainer.parent = sceneContainer;\n\n  layerContainer\n    .bind<IStyleAttributeService>(TYPES.IStyleAttributeService)\n    .to(StyleAttributeService)\n    .inSingletonScope();\n  layerContainer\n    .bind<IMultiPassRenderer>(TYPES.IMultiPassRenderer)\n    .to(MultiPassRenderer)\n    .inSingletonScope();\n  layerContainer\n    .bind<IPostProcessor>(TYPES.IPostProcessor)\n    .to(PostProcessor)\n    .inSingletonScope();\n\n  return layerContainer;\n}\n"],"file":"inversify.config.js"}