import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

var _dec, _class;

import { AttributeType, gl } from '@antv/l7-core';
import { injectable } from 'inversify';
import 'reflect-metadata';
var RegisterStyleAttributePlugin = (_dec = injectable(), _dec(_class = function () {
  function RegisterStyleAttributePlugin() {
    _classCallCheck(this, RegisterStyleAttributePlugin);
  }

  _createClass(RegisterStyleAttributePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tap('RegisterStyleAttributePlugin', function () {
        _this.registerBuiltinAttributes(styleAttributeService);
      });
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes(styleAttributeService) {
      styleAttributeService.registerStyleAttribute({
        name: 'position',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Position',
          buffer: {
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex) {
            return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];
          }
        }
      });
      styleAttributeService.registerStyleAttribute({
        name: 'filter',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'filter',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx) {
            var filter = feature.filter;
            return filter ? [1] : [0];
          }
        }
      });
      styleAttributeService.registerStyleAttribute({
        name: 'color',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Color',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 4,
          update: function update(feature, featureIdx) {
            var color = feature.color;
            return !color || !color.length ? [1, 1, 1, 1] : color;
          }
        }
      });
      styleAttributeService.registerStyleAttribute({
        name: 'vertexId',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_vertexId',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [featureIdx];
          }
        }
      });
    }
  }]);

  return RegisterStyleAttributePlugin;
}()) || _class);
export { RegisterStyleAttributePlugin as default };
//# sourceMappingURL=RegisterStyleAttributePlugin.js.map