import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _class, _class2, _descriptor;

import { TYPES } from '@antv/l7-core';
import { inject, injectable } from 'inversify';
import 'reflect-metadata';
import { createMultiPassRenderer } from '../utils/multiPassRender';
var MultiPassRendererPlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec(_class = (_class2 = function () {
  function MultiPassRendererPlugin() {
    _classCallCheck(this, MultiPassRendererPlugin);

    _initializerDefineProperty(this, "configService", _descriptor, this);

    _defineProperty(this, "enabled", void 0);
  }

  _createClass(MultiPassRendererPlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var rendererService = _ref.rendererService,
          postProcessingPassFactory = _ref.postProcessingPassFactory,
          normalPassFactory = _ref.normalPassFactory;
      layer.hooks.init.tap('MultiPassRendererPlugin', function () {
        var _layer$getLayerConfig = layer.getLayerConfig(),
            enableMultiPassRenderer = _layer$getLayerConfig.enableMultiPassRenderer,
            _layer$getLayerConfig2 = _layer$getLayerConfig.passes,
            passes = _layer$getLayerConfig2 === void 0 ? [] : _layer$getLayerConfig2;

        _this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;

        if (_this.enabled) {
          layer.multiPassRenderer = createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);
          layer.multiPassRenderer.setRenderFlag(true);
        }
      });
      layer.hooks.beforeRender.tap('MultiPassRendererPlugin', function () {
        if (_this.enabled) {
          var _rendererService$getV = rendererService.getViewportSize(),
              width = _rendererService$getV.width,
              height = _rendererService$getV.height;

          layer.multiPassRenderer.resize(width, height);
        }
      });
    }
  }]);

  return MultiPassRendererPlugin;
}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "configService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { MultiPassRendererPlugin as default };
//# sourceMappingURL=MultiPassRendererPlugin.js.map