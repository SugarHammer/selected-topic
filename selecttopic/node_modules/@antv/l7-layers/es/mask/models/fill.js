import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _isNumber from "lodash/isNumber";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { gl } from '@antv/l7-core';
import BaseModel from '../../core/BaseModel';
import { polygonTriangulation } from '../../core/triangulation';
var mask_frag = "uniform float u_opacity;\nvarying vec4 v_Color;\n\nvoid main() {\n  gl_FragColor = v_Color;\n  gl_FragColor.a *= u_opacity;\n}\n";
var mask_vert = "attribute vec4 a_Color;\nattribute vec3 a_Position;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\n\nvarying vec4 v_Color;\n\n#pragma include \"projection\"\n\nvoid main() {\n\n  v_Color = a_Color;\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n  }\n}\n\n";

var MaskModel = function (_BaseModel) {
  _inherits(MaskModel, _BaseModel);

  var _super = _createSuper(MaskModel);

  function MaskModel() {
    _classCallCheck(this, MaskModel);

    return _super.apply(this, arguments);
  }

  _createClass(MaskModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 0 : _ref$opacity;

      return {
        u_opacity: _isNumber(opacity) ? opacity : 0.0
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      this.layer.zIndex = -1000;
      return this.buildModels();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return [this.layer.buildLayerModel({
        moduleName: 'mask',
        vertexShader: mask_vert,
        fragmentShader: mask_frag,
        triangulation: polygonTriangulation,
        blend: this.getBlend(),
        depth: {
          enable: false
        },
        stencil: {
          enable: true,
          mask: 0xff,
          func: {
            cmp: gl.ALWAYS,
            ref: 1,
            mask: 0xff
          },
          opFront: {
            fail: gl.REPLACE,
            zfail: gl.REPLACE,
            zpass: gl.REPLACE
          }
        }
      })];
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$dataTexture;

      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      return '';
    }
  }]);

  return MaskModel;
}(BaseModel);

export { MaskModel as default };
//# sourceMappingURL=fill.js.map