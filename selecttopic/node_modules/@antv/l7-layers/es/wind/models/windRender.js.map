{"version":3,"sources":["../../../src/wind/models/windRender.ts"],"names":["glUtils","drawFrag","drawVert","fullScreenFrag","fullScreenVert","updateFrag","updateVert","getColorRamp","colors","canvas","document","createElement","ctx","getContext","width","height","gradient","createLinearGradient","Object","keys","stop","addColorStop","fillStyle","fillRect","Uint8Array","getImageData","data","bindAttribute","gl","buffer","attribute","numComponents","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bindFramebuffer","framebuffer","texture","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","Wind","options","glContext","imageWidth","imageHeight","fadeOpacity","speedFactor","dropRate","dropRateBump","rampColors","init","drawProgram","createProgram","fullScreenProgram","updateProgram","quadBuffer","createBuffer","Float32Array","createFramebuffer","colorRampTexture","createTexture","LINEAR","emptyPixels","backgroundTexture","NEAREST","screenTexture","particleRes","particleStateResolution","Math","ceil","sqrt","numParticles","numParticlesSize","particleState","i","length","floor","random","particleStateTexture0","particleStateTexture1","particleIndices","i$1","particleIndexBuffer","windData","windTexture","createDataTexture","image","num","uMin","uMax","vMin","vMax","isColorChanged","deleteTexture","item","key","Number","bindTexture","drawScreen","updateParticles","d","pixels","w","h","viewport","drawFullTexture","drawParticles","disable","BLEND","readPixels","RGBA","UNSIGNED_BYTE","temp","opacity","program","useProgram","a_pos","uniform1i","u_screen","uniform1f","u_opacity","drawArrays","TRIANGLES","a_index","u_wind","u_particles","u_color_ramp","u_particles_res","uniform2f","u_wind_min","u_wind_max","POINTS","u_rand_seed","u_wind_res","u_speed_factor","u_drop_rate","u_drop_rate_bump","deleteBuffer","deleteFramebuffer","deleteShader","vertexShader","fragmentShader","deleteProgram"],"mappings":"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","sourcesContent":["import * as glUtils from './utils';\nimport {\n  drawFrag,\n  drawVert,\n  fullScreenFrag,\n  fullScreenVert,\n  updateFrag,\n  updateVert,\n} from './windShader';\n\nfunction getColorRamp(colors: { [key: number]: string }) {\n  let canvas = document.createElement('canvas') as HTMLCanvasElement;\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n  canvas.width = 256;\n  canvas.height = 1;\n\n  const gradient = ctx.createLinearGradient(0, 0, 256, 0);\n  for (const stop of Object.keys(colors)) {\n    gradient.addColorStop(+stop, colors[+stop]);\n  }\n\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 256, 1);\n\n  // @ts-ignore dispose canvas element\n  canvas = null;\n\n  return new Uint8Array(ctx.getImageData(0, 0, 256, 1).data);\n}\n\nfunction bindAttribute(\n  gl: WebGLRenderingContext,\n  buffer: any,\n  attribute: any,\n  numComponents: any,\n) {\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.enableVertexAttribArray(attribute);\n  gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n}\n\nfunction bindFramebuffer(\n  gl: WebGLRenderingContext,\n  framebuffer: any,\n  texture: any,\n) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  if (texture) {\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0,\n    );\n  }\n}\n\nexport interface IWindData {\n  uMin: number;\n  uMax: number;\n  vMin: number;\n  vMax: number;\n  image: HTMLImageElement;\n}\n\nexport interface IWind {\n  width: number;\n  height: number;\n\n  fadeOpacity: number;\n  speedFactor: number;\n  dropRate: number;\n  dropRateBump: number;\n\n  setWind: (windData: IWindData) => void;\n  draw: () => { d: Uint8Array; w: number; h: number };\n  updateParticelNum: (num: number) => void;\n  updateWindDir: (\n    uMin: number,\n    uMax: number,\n    vMin: number,\n    vMax: number,\n  ) => void;\n  updateColorRampTexture: (rampColors: { [key: number]: string }) => void;\n\n  reSize: (width: number, height: number) => void;\n  destroy: () => void;\n}\n\nexport interface IWindProps {\n  glContext: WebGLRenderingContext;\n  imageWidth: number;\n  imageHeight: number;\n  fadeOpacity: number;\n  speedFactor: number;\n  dropRate: number;\n  dropRateBump: number;\n  rampColors: { [key: number]: string };\n}\n\nexport class Wind {\n  public width: number = 512;\n  public height: number = 512;\n\n  public pixels: Uint8Array;\n\n  public fadeOpacity: number;\n  public speedFactor: number;\n  public dropRate: number;\n  public dropRateBump: number;\n  private gl: WebGLRenderingContext;\n  private drawProgram: WebGLProgram;\n  private fullScreenProgram: WebGLProgram;\n  private updateProgram: WebGLProgram;\n\n  private rampColors: { [key: number]: string };\n\n  private numParticles: number = 65536;\n  private numParticlesSize: number;\n  private particleStateResolution: number;\n\n  private quadBuffer: WebGLBuffer | null;\n  private particleIndexBuffer: WebGLBuffer | null;\n\n  private framebuffer: WebGLFramebuffer | null;\n\n  private colorRampTexture: WebGLTexture | null;\n  private backgroundTexture: WebGLTexture | null;\n  private screenTexture: WebGLTexture | null;\n  private particleStateTexture0: WebGLTexture | null;\n  private particleStateTexture1: WebGLTexture | null;\n  private windTexture: WebGLTexture | null;\n\n  private windData: IWindData;\n\n  constructor(options: IWindProps) {\n    this.gl = options.glContext;\n    this.width = options.imageWidth;\n    this.height = options.imageHeight;\n    this.fadeOpacity = options.fadeOpacity;\n    this.speedFactor = options.speedFactor;\n    this.dropRate = options.dropRate;\n    this.dropRateBump = options.dropRateBump;\n\n    this.rampColors = options.rampColors;\n    this.init();\n  }\n\n  public init() {\n    const gl = this.gl;\n\n    this.fadeOpacity = 0.996; // how fast the particle trails fade on each frame\n    this.speedFactor = 0.25; // how fast the particles move\n    this.dropRate = 0.003; // how often the particles move to a random place\n    this.dropRateBump = 0.01; // drop rate increase relative to individual particle speed\n\n    this.drawProgram = glUtils.createProgram(gl, drawVert, drawFrag);\n    this.fullScreenProgram = glUtils.createProgram(\n      gl,\n      fullScreenVert,\n      fullScreenFrag,\n    );\n    this.updateProgram = glUtils.createProgram(gl, updateVert, updateFrag);\n\n    this.quadBuffer = glUtils.createBuffer(\n      gl,\n      new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]),\n    );\n\n    this.framebuffer = gl.createFramebuffer();\n\n    this.colorRampTexture = glUtils.createTexture(\n      this.gl,\n      this.gl.LINEAR,\n      getColorRamp(this.rampColors),\n      16,\n      16,\n    );\n\n    const emptyPixels = new Uint8Array(this.width * this.height * 4);\n\n    // screen textures to hold the drawn screen for the previous and the current frame\n\n    this.backgroundTexture = glUtils.createTexture(\n      gl,\n      gl.NEAREST,\n      emptyPixels,\n      this.width,\n      this.height,\n    );\n    this.screenTexture = glUtils.createTexture(\n      gl,\n      gl.NEAREST,\n      emptyPixels,\n      this.width,\n      this.height,\n    );\n\n    // we create a square texture where each pixel will hold a particle position encoded as RGBA\n    const particleRes = (this.particleStateResolution = Math.ceil(\n      Math.sqrt(this.numParticles),\n    ));\n    // particleRes size\n    this.numParticlesSize = particleRes * particleRes;\n\n    const particleState = new Uint8Array(this.numParticlesSize * 4);\n    for (let i = 0; i < particleState.length; i++) {\n      particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n    }\n    // textures to hold the particle state for the current and the next frame\n    this.particleStateTexture0 = glUtils.createTexture(\n      gl,\n      gl.NEAREST,\n      particleState,\n      particleRes,\n      particleRes,\n    );\n    this.particleStateTexture1 = glUtils.createTexture(\n      gl,\n      gl.NEAREST,\n      particleState,\n      particleRes,\n      particleRes,\n    );\n\n    const particleIndices = new Float32Array(this.numParticlesSize);\n    for (let i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n      particleIndices[i$1] = i$1;\n    }\n    this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n  }\n\n  public setWind(windData: IWindData) {\n    this.windData = windData;\n    this.windTexture = glUtils.createDataTexture(\n      this.gl,\n      this.gl.LINEAR,\n      windData.image,\n    );\n  }\n\n  /**\n   * 更新风场粒子数量\n   * @param num\n   */\n  public updateParticelNum(num: number) {\n    const gl = this.gl;\n    if (num !== this.numParticles) {\n      this.numParticles = num; // params number\n\n      // we create a square texture where each pixel will hold a particle position encoded as RGBA\n      const particleRes = (this.particleStateResolution = Math.ceil(\n        Math.sqrt(this.numParticles),\n      ));\n      this.numParticlesSize = particleRes * particleRes;\n\n      const particleState = new Uint8Array(this.numParticlesSize * 4);\n      for (let i = 0; i < particleState.length; i++) {\n        particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n      }\n      // textures to hold the particle state for the current and the next frame\n      this.particleStateTexture0 = glUtils.createTexture(\n        gl,\n        gl.NEAREST,\n        particleState,\n        particleRes,\n        particleRes,\n      );\n      this.particleStateTexture1 = glUtils.createTexture(\n        gl,\n        gl.NEAREST,\n        particleState,\n        particleRes,\n        particleRes,\n      );\n\n      const particleIndices = new Float32Array(this.numParticlesSize);\n      for (let i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n        particleIndices[i$1] = i$1;\n      }\n      this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n    }\n  }\n\n  /**\n   * 更新风场风向风速\n   * @param uMin\n   * @param uMax\n   * @param vMin\n   * @param vMax\n   */\n  public updateWindDir(uMin: number, uMax: number, vMin: number, vMax: number) {\n    this.windData.uMin = uMin;\n    this.windData.uMax = uMax;\n    this.windData.vMin = vMin;\n    this.windData.vMax = vMax;\n  }\n\n  /**\n   * update rampColors\n   * @param rampColors\n   */\n  public updateColorRampTexture(rampColors: { [key: number]: string }) {\n    if (this.isColorChanged(rampColors)) {\n      this.rampColors = rampColors;\n\n      const gl = this.gl;\n      gl.deleteTexture(this.colorRampTexture);\n      this.colorRampTexture = glUtils.createTexture(\n        gl,\n        gl.LINEAR,\n        getColorRamp(rampColors),\n        16,\n        16,\n      );\n    }\n  }\n\n  public isColorChanged(rampColors: { [key: number]: string }): boolean {\n    const keys = Object.keys(rampColors);\n    for (const item of keys) {\n      const key = Number(item);\n      // exist new key -> color need update\n      if (!this.rampColors[key]) {\n        return true;\n      }\n      // value changed -> color need update\n      if (this.rampColors[key] && this.rampColors[key] !== rampColors[key]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public reSize(width: number, height: number) {\n    if (width !== this.width || height !== this.height) {\n      const gl = this.gl;\n      gl.deleteTexture(this.backgroundTexture);\n      gl.deleteTexture(this.screenTexture);\n\n      this.width = width;\n      this.height = height;\n      const emptyPixels = new Uint8Array(width * height * 4);\n      // screen textures to hold the drawn screen for the previous and the current frame\n      this.backgroundTexture = glUtils.createTexture(\n        gl,\n        gl.NEAREST,\n        emptyPixels,\n        width,\n        height,\n      );\n      this.screenTexture = glUtils.createTexture(\n        gl,\n        gl.NEAREST,\n        emptyPixels,\n        width,\n        height,\n      );\n    }\n  }\n\n  public draw() {\n    if (this.windData?.image) {\n      const gl = this.gl;\n\n      glUtils.bindTexture(gl, this.windTexture, 0);\n      glUtils.bindTexture(gl, this.particleStateTexture0, 1);\n\n      this.drawScreen(); // draw Particles into framebuffer\n      this.updateParticles();\n\n      return { d: this.pixels, w: this.width, h: this.height };\n    } else {\n      return { d: new Uint8Array([0, 0, 0, 0]), w: 1, h: 1 };\n    }\n  }\n\n  public drawScreen() {\n    const gl = this.gl;\n\n    // draw the screen into a temporary framebuffer to retain it as the background on the next frame\n    bindFramebuffer(gl, this.framebuffer, this.screenTexture);\n\n    gl.viewport(0, 0, this.width, this.height);\n\n    this.drawFullTexture(this.backgroundTexture, this.fadeOpacity);\n    this.drawParticles();\n\n    gl.disable(gl.BLEND);\n\n    this.pixels = new Uint8Array(4 * this.width * this.height);\n    gl.readPixels(\n      0,\n      0,\n      this.width,\n      this.height,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      this.pixels,\n    );\n\n    bindFramebuffer(gl, null, null);\n    gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n    //   save the current screen as the background for the next frame\n    const temp = this.backgroundTexture;\n    this.backgroundTexture = this.screenTexture;\n    this.screenTexture = temp;\n  }\n\n  public drawFullTexture(texture: any, opacity: number) {\n    const gl = this.gl;\n    const program = this.fullScreenProgram as any;\n    gl.useProgram(program);\n\n    // bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadBuffer);\n    gl.vertexAttribPointer(program.a_pos, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(program.a_pos);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    glUtils.bindTexture(gl, texture, 2);\n    gl.uniform1i(program.u_screen, 2);\n    gl.uniform1f(program.u_opacity, opacity);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    // gl.drawArrays(gl.POINTS, 0, 6);\n  }\n\n  public drawParticles() {\n    const gl = this.gl;\n    const program = this.drawProgram as any;\n    gl.useProgram(program);\n\n    bindAttribute(gl, this.particleIndexBuffer, program.a_index, 1);\n    glUtils.bindTexture(gl, this.colorRampTexture, 2);\n\n    gl.uniform1i(program.u_wind, 0);\n    gl.uniform1i(program.u_particles, 1);\n    gl.uniform1i(program.u_color_ramp, 2);\n\n    gl.uniform1f(program.u_particles_res, this.particleStateResolution);\n    gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n    gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n\n    gl.drawArrays(gl.POINTS, 0, this.numParticlesSize);\n  }\n\n  public updateParticles() {\n    const gl = this.gl;\n    bindFramebuffer(gl, this.framebuffer, this.particleStateTexture1);\n    gl.viewport(\n      0,\n      0,\n      this.particleStateResolution,\n      this.particleStateResolution,\n    );\n\n    const program = this.updateProgram as any;\n    gl.useProgram(program);\n\n    bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n\n    gl.uniform1i(program.u_wind, 0);\n    gl.uniform1i(program.u_particles, 1);\n\n    gl.uniform1f(program.u_rand_seed, Math.random());\n    gl.uniform2f(\n      program.u_wind_res,\n      this.windData.image.width * 2,\n      this.windData.image.height * 2,\n    );\n    gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n    gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n    gl.uniform1f(program.u_speed_factor, this.speedFactor);\n    gl.uniform1f(program.u_drop_rate, this.dropRate);\n    gl.uniform1f(program.u_drop_rate_bump, this.dropRateBump);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // swap the particle state textures so the new one becomes the current one\n    const temp = this.particleStateTexture0;\n    this.particleStateTexture0 = this.particleStateTexture1;\n    this.particleStateTexture1 = temp;\n\n    bindFramebuffer(gl, null, null);\n\n    // gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n  }\n\n  public destroy() {\n    // private drawProgram: WebGLProgram;\n    // private fullScreenProgram: WebGLProgram;\n    // private updateProgram: WebGLProgram;\n\n    // private quadBuffer: WebGLBuffer | null;\n    // private particleIndexBuffer: WebGLBuffer | null;\n\n    // private framebuffer: WebGLFramebuffer | null;\n\n    // private colorRampTexture: WebGLTexture | null;\n    // private backgroundTexture: WebGLTexture | null;\n    // private screenTexture: WebGLTexture | null;\n    // private particleStateTexture0: WebGLTexture | null;\n    // private particleStateTexture1: WebGLTexture | null;\n    // private windTexture: WebGLTexture | null;\n\n    this.gl.deleteBuffer(this.quadBuffer);\n    this.gl.deleteBuffer(this.particleIndexBuffer);\n\n    this.gl.deleteFramebuffer(this.framebuffer);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.drawProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.drawProgram.fragmentShader);\n    this.gl.deleteProgram(this.drawProgram);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.fullScreenProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.fullScreenProgram.fragmentShader);\n    this.gl.deleteProgram(this.fullScreenProgram);\n\n    // @ts-ignore\n    this.gl.deleteShader(this.updateProgram.vertexShader);\n    // @ts-ignore\n    this.gl.deleteShader(this.updateProgram.fragmentShader);\n    this.gl.deleteProgram(this.updateProgram);\n\n    this.gl.deleteTexture(this.colorRampTexture);\n    this.gl.deleteTexture(this.backgroundTexture);\n    this.gl.deleteTexture(this.screenTexture);\n    this.gl.deleteTexture(this.particleStateTexture0);\n    this.gl.deleteTexture(this.particleStateTexture1);\n    this.gl.deleteTexture(this.windTexture);\n  }\n}\n"],"file":"windRender.js"}