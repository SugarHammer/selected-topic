export function createProgram(gl, vshader, fshader) {
  var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);
  var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);

  if (!vertexShader || !fragmentShader) {
    return null;
  }

  var program = gl.createProgram();

  if (!program) {
    return null;
  }

  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);

  if (!linked) {
    var error = gl.getProgramInfoLog(program);
    console.warn('Failed to link program: ' + error);
    gl.deleteProgram(program);
    gl.deleteShader(fragmentShader);
    gl.deleteShader(vertexShader);
    return null;
  }

  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

  for (var i = 0; i < numAttributes; i++) {
    var attribute = gl.getActiveAttrib(program, i);
    program[attribute.name] = gl.getAttribLocation(program, attribute.name);
  }

  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

  for (var i$1 = 0; i$1 < numUniforms; i$1++) {
    var uniform = gl.getActiveUniform(program, i$1);
    program[uniform.name] = gl.getUniformLocation(program, uniform.name);
  }

  program.vertexShader = vertexShader;
  program.fragmentShader = fragmentShader;
  return program;
}
export function loadShader(gl, type, source) {
  var shader = gl.createShader(type);

  if (shader == null) {
    console.warn('unable to create shader');
    return null;
  }

  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

  if (!compiled) {
    var error = gl.getShaderInfoLog(shader);
    console.warn('Failed to compile shader: ' + error);
    gl.deleteShader(shader);
    return null;
  }

  return shader;
}
export function createTexture(gl, filter, data, width, height) {
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
  gl.bindTexture(gl.TEXTURE_2D, null);
  return texture;
}
export function createDataTexture(gl, filter, data) {
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);
  gl.bindTexture(gl.TEXTURE_2D, null);
  return texture;
}
export function bindTexture(gl, texture, unit) {
  gl.activeTexture(gl.TEXTURE0 + unit);
  gl.bindTexture(gl.TEXTURE_2D, texture);
}
export function createBuffer(gl, data) {
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
  return buffer;
}
export function bindAttriBuffer(gl, attrName, vertices, count, program) {
  var buffer = gl.createBuffer();

  if (!buffer) {
    console.warn('failed create vertex buffer');
  }

  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
  var attr = gl.getAttribLocation(program, attrName);
  gl.vertexAttribPointer(attr, count, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(attr);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  return {
    buffer: buffer,
    attr: attr,
    count: count
  };
}
export function bindAttriIndicesBuffer(gl, indices) {
  var buffer = gl.createBuffer();

  if (!buffer) {
    console.warn('failed create vertex buffer');
  }

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
  return buffer;
}
export function bindUnifrom(gl, unifromName, data, program, vec) {
  var uniform = gl.getUniformLocation(program, unifromName);

  if (uniform < 0) {
    console.warn('无法获取 uniform 变量的存储位置');
  }

  setUnifrom(gl, uniform, data, vec);
  return uniform;
}
export function setUnifrom(gl, location, data, vec) {
  switch (vec) {
    case 'float':
      gl.uniform1f(location, data);
      break;

    case 'vec2':
      gl.uniform2fv(location, data);
      break;

    case 'vec3':
      gl.uniform3fv(location, data);
      break;

    case 'vec4':
      gl.uniform4fv(location, data);
      break;

    case 'bool':
      gl.uniform1i(location, data);
      break;

    case 'sampler2d':
      break;

    case 'mat4':
      gl.uniformMatrix4fv(location, false, data);
      break;
  }
}
export function initFramebuffer(gl) {
  var drawingBufferWidth = gl.drawingBufferWidth,
      drawingBufferHeight = gl.drawingBufferHeight;
  var OFFER_SCREEN_WIDTH = drawingBufferWidth;
  var OFFER_SCREEN_HEIGHT = drawingBufferHeight;
  var FRAMEBUFFER = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, FRAMEBUFFER);
  var depthbuffer = gl.createRenderbuffer();
  gl.bindRenderbuffer(gl.RENDERBUFFER, depthbuffer);
  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, OFFER_SCREEN_WIDTH, OFFER_SCREEN_HEIGHT);
  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);
  var texture = gl.createTexture();
  var textureSize = 1024;
  FRAMEBUFFER.texture = texture;
  FRAMEBUFFER.width = OFFER_SCREEN_WIDTH;
  FRAMEBUFFER.height = OFFER_SCREEN_HEIGHT;
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, OFFER_SCREEN_WIDTH, OFFER_SCREEN_HEIGHT, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  return {
    FRAMEBUFFER: FRAMEBUFFER,
    OFFER_SCREEN_WIDTH: OFFER_SCREEN_WIDTH,
    OFFER_SCREEN_HEIGHT: OFFER_SCREEN_HEIGHT
  };
}
//# sourceMappingURL=utils.js.map