import _isString from "lodash/isString";
import _isNumber from "lodash/isNumber";
import _isFunction from "lodash/isFunction";
import _isArray from "lodash/isArray";
var WIDTH = 1024;

function registerStyleAttribute(fieldName, layer, field, values, updateOptions) {
  layer.updateStyleAttribute(fieldName, field, values, updateOptions);
}

function handleStyleDataMapping(configToUpdate, layer) {
  if (configToUpdate.opacity) {
    handleStyleFloat('opacity', layer, configToUpdate.opacity);
  }

  if (configToUpdate.strokeWidth) {
    handleStyleFloat('strokeWidth', layer, configToUpdate.strokeWidth);
  }

  if (configToUpdate.strokeOpacity) {
    handleStyleFloat('strokeOpacity', layer, configToUpdate.strokeOpacity);
  }

  if (configToUpdate.stroke) {
    handleStyleColor('stroke', layer, configToUpdate.stroke);
  }

  if (configToUpdate.offsets) {
    handleStyleOffsets('offsets', layer, configToUpdate.offsets);
  }

  if (configToUpdate.textOffset) {
    handleStyleOffsets('textOffset', layer, configToUpdate.textOffset);
  }

  if (configToUpdate.thetaOffset) {
    handleStyleFloat('thetaOffset', layer, configToUpdate.thetaOffset);
  }
}

function handleStyleFloat(fieldName, layer, styleFloat) {
  if (_isString(styleFloat)) {
    registerStyleAttribute(fieldName, layer, styleFloat, function (value) {
      return value;
    });
  } else if (_isNumber(styleFloat)) {
    registerStyleAttribute(fieldName, layer, [styleFloat], undefined);
  } else if (_isArray(styleFloat) && styleFloat.length === 2) {
    if (_isString(styleFloat[0]) && _isFunction(styleFloat[1])) {
      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);
    } else if (_isString(styleFloat[0]) && _isArray(styleFloat[1]) && _isNumber(styleFloat[1][0]) && _isNumber(styleFloat[1][1])) {
      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);
    } else {
      registerStyleAttribute(fieldName, layer, [1.0], undefined);
    }
  } else {
    registerStyleAttribute(fieldName, layer, [1.0], undefined);
  }
}

function handleStyleOffsets(fieldName, layer, styleOffsets) {
  if (_isString(styleOffsets)) {
    registerStyleAttribute(fieldName, layer, styleOffsets, function (value) {
      return value;
    });
  } else if (_isArray(styleOffsets) && styleOffsets.length === 2 && _isString(styleOffsets[0]) && _isFunction(styleOffsets[1])) {
    registerStyleAttribute(fieldName, layer, styleOffsets[0], styleOffsets[1]);
  } else if (_isArray(styleOffsets) && styleOffsets.length === 2 && _isNumber(styleOffsets[0]) && _isNumber(styleOffsets[1])) {
    registerStyleAttribute(fieldName, layer, styleOffsets, undefined);
  } else {
    registerStyleAttribute(fieldName, layer, [0, 0], undefined);
  }
}

function handleStyleColor(fieldName, layer, styleColor) {
  if (_isString(styleColor)) {
    registerStyleAttribute(fieldName, layer, styleColor, undefined);
  } else if (_isArray(styleColor) && styleColor.length === 2) {
    if (_isString(styleColor[0]) && _isFunction(styleColor[1])) {
      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);
    } else if (_isString(styleColor[0]) && _isArray(styleColor[1]) && styleColor[1].length > 0) {
      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);
    } else {
      registerStyleAttribute(fieldName, layer, '#fff', undefined);
    }
  } else {
    registerStyleAttribute(fieldName, layer, '#fff', undefined);
  }
}

export { handleStyleDataMapping, handleStyleFloat, handleStyleColor };
//# sourceMappingURL=dataMappingStyle.js.map