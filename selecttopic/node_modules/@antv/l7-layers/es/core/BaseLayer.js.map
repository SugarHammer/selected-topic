{"version":3,"sources":["../../src/core/BaseLayer.ts"],"names":["SyncBailHook","SyncHook","SyncWaterfallHook","BlendType","lazyInject","TYPES","encodePickingColor","EventEmitter","BlendTypes","handleStyleDataMapping","createMultiPassRenderer","normalizePasses","updateShape","layerIdCounter","BaseLayer","IGlobalConfigService","config","dataSourceNeedUpdate","dataMappingNeedUpdate","filterNeedUpdate","featureScaleNeedUpdate","StyleAttrNeedUpdate","init","afterInit","beforeRender","beforeRenderData","afterRender","beforePickingEncode","afterPickingEncode","beforeHighlight","afterHighlight","beforeSelect","afterSelect","beforeDestroy","afterDestroy","enable","dataState","getLayerConfig","autoFit","fitBoundsOptions","fitBounds","emit","reRender","name","id","zIndex","rawConfig","configService","configToUpdate","inited","needUpdateConfig","sceneId","container","get","SceneID","setLayerConfig","sceneContainer","color","bottomColor","plugin","plugins","push","layerType","iconService","IIconService","fontService","IFontService","rendererService","IRendererService","layerService","ILayerService","interactionService","IInteractionService","pickingService","IPickingService","mapService","IMapService","enableMultiPassRenderer","passes","length","on","renderLayers","cameraService","ICameraService","coordinateService","ICoordinateSystemService","shaderModuleService","IShaderModuleService","postProcessingPassFactory","IFactoryPostProcessingPass","normalPassFactory","IFactoryNormalPass","styleAttributeService","IStyleAttributeService","multiPassRenderer","IMultiPassRenderer","setLayer","pendingStyleAttributes","forEach","attributeName","attributeField","attributeValues","updateOptions","updateStyleAttribute","scale","field","splitValuesAndCallbackInAttribute","getAll","ILayerPlugin","apply","hooks","call","target","type","updateLayerConfig","getDefaultConfig","animateOption","startAnimate","aniamateStatus","values","lastShape","getLayerStyleAttribute","currentShape","shapeOption","options","rawAnimate","data","setSource","sourceOption","clusterZoom","layerSource","setData","rest","pass","postProcessingPass","getPostProcessor","getPostProcessingPassByName","styleNeedUpdate","cfg","scaleOptions","rendering","getEncodedData","renderModels","getRenderFlag","render","activeOption","enableHighlight","highlightColor","mix","activeMix","x","y","pick","pickedFeatureID","then","setTimeout","option","enableSelect","selectColor","selectMix","blend","layerModelNeedUpdate","visible","index","updateLayerRenderList","currentPickId","selectedFeatureID","zoom","getZoom","minZoom","Infinity","maxZoom","enableMultiPass","currentPasses","setRenderFlag","getViewportSize","width","height","resize","source","getSource","extent","isValid","some","v","Math","abs","isDestroied","off","sourceEvent","destroy","clearAllAttributes","models","cleanRemove","removeAllListeners","model","layerModel","clearModels","getLayerStyleAttributes","filter","attribute","needRescale","needRemapping","needRegenerateVertices","cluster","updateClusterData","encodedData","getLayerAttributeScale","invertExtent","items","range","map","item","value","ticks","domain","triggerHover","box","cb","boxPickLayer","moduleName","vertexShader","fragmentShader","triangulation","segmentNumber","registerModule","vs","fs","getModule","uniforms","createModel","createAttributesAndIndices","attributes","elements","normal","clock","getDelta","animateStartTime","getElapsedTime","stopAnimate","isPick","eventNames","indexOf","isVisible","Error","isPicking","buildModels","renderUpdate","draw","getUninforms","getShaderPickStat","time","console","warn","valuesOrCallback","defaultValues","undefined","callback"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from '@antv/async-hook';\nimport {\n  BlendType,\n  gl,\n  IActiveOption,\n  IAnimateOption,\n  ICameraService,\n  ICoordinateSystemService,\n  IDataState,\n  IEncodeFeature,\n  IFontService,\n  IGlobalConfigService,\n  IIconService,\n  IInteractionService,\n  ILayer,\n  ILayerConfig,\n  ILayerModel,\n  ILayerModelInitializationOptions,\n  ILayerPlugin,\n  ILayerService,\n  ILegendClassificaItem,\n  ILegendSegmentItem,\n  IMapService,\n  IModel,\n  IModelInitializationOptions,\n  IMultiPassRenderer,\n  IPass,\n  IPickingService,\n  IPostProcessingPass,\n  IRendererService,\n  IScale,\n  IScaleOptions,\n  IShaderModuleService,\n  ISource,\n  ISourceCFG,\n  IStyleAttributeInitializationOptions,\n  IStyleAttributeService,\n  IStyleAttributeUpdateOptions,\n  lazyInject,\n  LegendItems,\n  ScaleAttributeType,\n  ScaleTypeName,\n  ScaleTypes,\n  StyleAttributeField,\n  StyleAttributeOption,\n  TYPES,\n} from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { encodePickingColor } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container } from 'inversify';\nimport { isFunction, isObject, isUndefined } from 'lodash';\nimport { BlendTypes } from '../utils/blend';\nimport { handleStyleDataMapping } from '../utils/dataMappingStyle';\nimport {\n  createMultiPassRenderer,\n  normalizePasses,\n} from '../utils/multiPassRender';\nimport { updateShape } from '../utils/updateShape';\n/**\n * 分配 layer id\n */\nlet layerIdCounter = 0;\n\nexport default class BaseLayer<ChildLayerStyleOptions = {}> extends EventEmitter\n  implements ILayer {\n  public id: string = `${layerIdCounter++}`;\n  public name: string = `${layerIdCounter}`;\n  public type: string;\n  public visible: boolean = true;\n  public zIndex: number = 0;\n  public minZoom: number;\n  public maxZoom: number;\n  public inited: boolean = false;\n  public layerModelNeedUpdate: boolean = false;\n  public pickedFeatureID: number | null = null;\n  public selectedFeatureID: number | null = null;\n  public styleNeedUpdate: boolean = false;\n  public rendering: boolean;\n  public clusterZoom: number = 0; // 聚合等级标记\n  public layerType?: string | undefined;\n\n  public dataState: IDataState = {\n    dataSourceNeedUpdate: false,\n    dataMappingNeedUpdate: false,\n    filterNeedUpdate: false,\n    featureScaleNeedUpdate: false,\n    StyleAttrNeedUpdate: false,\n  };\n  // 生命周期钩子\n  public hooks = {\n    init: new SyncBailHook(),\n    afterInit: new SyncBailHook(),\n    beforeRender: new SyncBailHook(),\n    beforeRenderData: new SyncWaterfallHook(),\n    afterRender: new SyncHook(),\n    beforePickingEncode: new SyncHook(),\n    afterPickingEncode: new SyncHook(),\n    beforeHighlight: new SyncHook(['pickedColor']),\n    afterHighlight: new SyncHook(),\n    beforeSelect: new SyncHook(['pickedColor']),\n    afterSelect: new SyncHook(),\n    beforeDestroy: new SyncHook(),\n    afterDestroy: new SyncHook(),\n  };\n\n  // 待渲染 model 列表\n  public models: IModel[] = [];\n\n  // 每个 Layer 都有一个\n  public multiPassRenderer: IMultiPassRenderer;\n\n  // 注入插件集\n  public plugins: ILayerPlugin[];\n\n  public sourceOption: {\n    data: any;\n    options?: ISourceCFG;\n  };\n\n  public layerModel: ILayerModel;\n\n  public shapeOption: {\n    field: any;\n    values: any;\n  };\n\n  // TODO: 记录 sceneContainer 供创建子图层的时候使用 如 imageTileLayer\n  public sceneContainer: Container | undefined;\n  // TODO: 用于保存子图层对象\n  public layerChildren: ILayer[] = [];\n\n  @lazyInject(TYPES.IGlobalConfigService)\n  protected readonly configService: IGlobalConfigService;\n\n  // @lazyInject(TYPES.IShaderModuleService)\n  // protected readonly shaderModuleService: IShaderModuleService;\n\n  protected shaderModuleService: IShaderModuleService;\n  protected cameraService: ICameraService;\n\n  protected coordinateService: ICoordinateSystemService;\n\n  protected iconService: IIconService;\n\n  protected fontService: IFontService;\n\n  protected pickingService: IPickingService;\n\n  protected rendererService: IRendererService;\n\n  protected layerService: ILayerService;\n\n  protected interactionService: IInteractionService;\n\n  protected mapService: IMapService;\n\n  protected styleAttributeService: IStyleAttributeService;\n\n  protected layerSource: Source;\n\n  protected postProcessingPassFactory: (\n    name: string,\n  ) => IPostProcessingPass<unknown>;\n  protected normalPassFactory: (name: string) => IPass<unknown>;\n\n  protected animateOptions: IAnimateOption = { enable: false };\n\n  /**\n   * 图层容器\n   */\n  private container: Container;\n\n  private encodedData: IEncodeFeature[];\n\n  private configSchema: object;\n\n  private currentPickId: number | null = null;\n\n  private rawConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  private needUpdateConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  /**\n   * 待更新样式属性，在初始化阶段完成注册\n   */\n  private pendingStyleAttributes: Array<{\n    attributeName: string;\n    attributeField: StyleAttributeField;\n    attributeValues?: StyleAttributeOption;\n    defaultName?: string;\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>;\n  }> = [];\n\n  private scaleOptions: IScaleOptions = {};\n\n  private animateStartTime: number;\n\n  private aniamateStatus: boolean = false;\n\n  // TODO: layer 保底颜色\n  private bottomColor = 'rgba(0, 0, 0, 0)';\n\n  private isDestroied: boolean = false;\n\n  // private pickingPassRender: IPass<'pixelPicking'>;\n\n  constructor(config: Partial<ILayerConfig & ChildLayerStyleOptions> = {}) {\n    super();\n    this.name = config.name || this.id;\n    this.zIndex = config.zIndex || 0;\n    this.rawConfig = config;\n  }\n\n  public getLayerConfig() {\n    return this.configService.getLayerConfig<ChildLayerStyleOptions>(this.id);\n  }\n\n  public updateLayerConfig(\n    configToUpdate: Partial<ILayerConfig | ChildLayerStyleOptions>,\n  ) {\n    if (!this.inited) {\n      this.needUpdateConfig = {\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      };\n    } else {\n      const sceneId = this.container.get<string>(TYPES.SceneID);\n\n      // @ts-ignore\n      handleStyleDataMapping(configToUpdate, this); // 处理 style 中进行数据映射的属性字段\n\n      this.configService.setLayerConfig(sceneId, this.id, {\n        ...this.configService.getLayerConfig(this.id),\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      });\n      this.needUpdateConfig = {};\n    }\n  }\n\n  /**\n   * 注入图层容器，父容器为场景容器\n   * RootContainer 1\n   *  -> SceneContainer 1.*\n   *   -> LayerContainer 1.*\n   */\n  public setContainer(container: Container, sceneContainer: Container) {\n    this.container = container;\n    this.sceneContainer = sceneContainer;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public setBottomColor(color: string) {\n    this.bottomColor = color;\n  }\n\n  public getBottomColor() {\n    return this.bottomColor;\n  }\n\n  public addPlugin(plugin: ILayerPlugin): ILayer {\n    // TODO: 控制插件注册顺序\n    // @example:\n    // pointLayer.addPlugin(new MyCustomPlugin(), {\n    //   before: 'L7BuiltinPlugin'\n    // });\n    this.plugins.push(plugin);\n    return this;\n  }\n\n  public init() {\n    // 设置配置项\n    const sceneId = this.container.get<string>(TYPES.SceneID);\n    // 初始化图层配置项\n    // const { enableMultiPassRenderer = false } = this.rawConfig;\n    // this.configService.setLayerConfig(sceneId, this.id, {\n    //   enableMultiPassRenderer,\n    // });\n    this.configService.setLayerConfig(sceneId, this.id, this.rawConfig);\n    this.layerType = this.rawConfig.layerType;\n\n    // 全局容器服务\n\n    // 场景容器服务\n    this.iconService = this.container.get<IIconService>(TYPES.IIconService);\n    this.fontService = this.container.get<IFontService>(TYPES.IFontService);\n\n    this.rendererService = this.container.get<IRendererService>(\n      TYPES.IRendererService,\n    );\n    this.layerService = this.container.get<ILayerService>(TYPES.ILayerService);\n    this.interactionService = this.container.get<IInteractionService>(\n      TYPES.IInteractionService,\n    );\n\n    this.pickingService = this.container.get<IPickingService>(\n      TYPES.IPickingService,\n    );\n    this.mapService = this.container.get<IMapService>(TYPES.IMapService);\n    const { enableMultiPassRenderer, passes } = this.getLayerConfig();\n    if (enableMultiPassRenderer && passes?.length && passes.length > 0) {\n      // Tip: 兼容 multiPassRender 在 amap1 时存在的图层不同步问题 zoom\n      this.mapService.on('mapAfterFrameChange', () => {\n        this.renderLayers();\n      });\n    }\n\n    this.cameraService = this.container.get<ICameraService>(\n      TYPES.ICameraService,\n    );\n    this.coordinateService = this.container.get<ICoordinateSystemService>(\n      TYPES.ICoordinateSystemService,\n    );\n    this.shaderModuleService = this.container.get<IShaderModuleService>(\n      TYPES.IShaderModuleService,\n    );\n    this.postProcessingPassFactory = this.container.get(\n      TYPES.IFactoryPostProcessingPass,\n    );\n    this.normalPassFactory = this.container.get(TYPES.IFactoryNormalPass);\n\n    // 图层容器服务\n    this.styleAttributeService = this.container.get<IStyleAttributeService>(\n      TYPES.IStyleAttributeService,\n    );\n    this.multiPassRenderer = this.container.get<IMultiPassRenderer>(\n      TYPES.IMultiPassRenderer,\n    );\n    this.multiPassRenderer.setLayer(this);\n\n    // 完成样式服务注册完成前添加的属性\n    this.pendingStyleAttributes.forEach(\n      ({ attributeName, attributeField, attributeValues, updateOptions }) => {\n        this.styleAttributeService.updateStyleAttribute(\n          attributeName,\n          {\n            // @ts-ignore\n            scale: {\n              field: attributeField,\n              ...this.splitValuesAndCallbackInAttribute(\n                // @ts-ignore\n                attributeValues,\n                // @ts-ignore\n                this.getLayerConfig()[attributeName],\n              ),\n            },\n          },\n          // @ts-ignore\n          updateOptions,\n        );\n      },\n    );\n    this.pendingStyleAttributes = [];\n\n    // 获取插件集\n    this.plugins = this.container.getAll<ILayerPlugin>(TYPES.ILayerPlugin);\n    // 完成插件注册，传入场景和图层容器内的服务\n    for (const plugin of this.plugins) {\n      plugin.apply(this, {\n        rendererService: this.rendererService,\n        mapService: this.mapService,\n        styleAttributeService: this.styleAttributeService,\n        normalPassFactory: this.normalPassFactory,\n        postProcessingPassFactory: this.postProcessingPassFactory,\n      });\n    }\n\n    // 触发 init 生命周期插件\n    this.hooks.init.call();\n    // this.pickingPassRender = this.normalPassFactory('pixelPicking');\n    // this.pickingPassRender.init(this);\n    this.hooks.afterInit.call();\n\n    // 触发初始化完成事件;\n    this.emit('inited', {\n      target: this,\n      type: 'inited',\n    });\n    this.emit('add', {\n      target: this,\n      type: 'add',\n    });\n    return this;\n  }\n  /**\n   * Model初始化前需要更新Model样式\n   */\n  public prepareBuildModel() {\n    this.inited = true;\n    this.updateLayerConfig({\n      ...(this.getDefaultConfig() as object),\n      ...this.rawConfig,\n    });\n\n    // 启动动画\n    const { animateOption } = this.getLayerConfig();\n    if (animateOption?.enable) {\n      this.layerService.startAnimate();\n      this.aniamateStatus = true;\n    }\n  }\n  public color(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    // 设置 color、size、shape、style 时由于场景服务尚未完成（并没有调用 scene.addLayer），因此暂时加入待更新属性列表\n    this.updateStyleAttribute('color', field, values, updateOptions);\n\n    // this.pendingStyleAttributes.push({\n    //   attributeName: 'color',\n    //   attributeField: field,\n    //   attributeValues: values,\n    //   defaultName: 'colors',\n    //   updateOptions,\n    // });\n    return this;\n  }\n\n  // 为对应的图层传入纹理的编号名称（point/image 在 shape 方法中传入纹理名称的方法并不通用）\n  public texture(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('texture', field, values, updateOptions);\n    return this;\n  }\n\n  public rotate(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('rotate', field, values, updateOptions);\n    return this;\n  }\n  public size(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('size', field, values, updateOptions);\n    return this;\n  }\n  // 对mapping后的数据过滤，scale保持不变\n  public filter(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('filter', field, values, updateOptions);\n    return this;\n  }\n\n  public shape(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    const lastShape = this.styleAttributeService?.getLayerStyleAttribute(\n      'shape',\n    )?.scale?.field;\n    const currentShape = field;\n    this.shapeOption = {\n      field,\n      values,\n    };\n    this.updateStyleAttribute('shape', field, values, updateOptions);\n    // TODO: 根据 shape 判断是否需要更新 model\n    updateShape(this, lastShape, currentShape);\n    return this;\n  }\n  public label(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'label',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions,\n    });\n    return this;\n  }\n  public animate(options: IAnimateOption | boolean) {\n    let rawAnimate: Partial<IAnimateOption> = {};\n    if (isObject(options)) {\n      rawAnimate.enable = true;\n      rawAnimate = {\n        ...rawAnimate,\n        ...options,\n      };\n    } else {\n      rawAnimate.enable = options;\n    }\n    this.updateLayerConfig({\n      animateOption: rawAnimate,\n    });\n    // this.animateOptions = options;\n    return this;\n  }\n\n  public source(data: any, options?: ISourceCFG): ILayer {\n    if (data?.data) {\n      // 判断是否为source\n      this.setSource(data);\n      return this;\n    }\n    this.sourceOption = {\n      data,\n      options,\n    };\n    this.clusterZoom = 0;\n    return this;\n  }\n  public setData(data: any, options?: ISourceCFG) {\n    if (this.inited) {\n      this.layerSource.setData(data, options);\n    } else {\n      this.on('inited', () => {\n        this.layerSource.setData(data, options);\n      });\n    }\n\n    return this;\n  }\n  public style(\n    options: Partial<ChildLayerStyleOptions> & Partial<ILayerConfig>,\n  ): ILayer {\n    const { passes, ...rest } = options;\n\n    // passes 特殊处理\n    if (passes) {\n      normalizePasses(passes).forEach(\n        (pass: [string, { [key: string]: unknown }]) => {\n          const postProcessingPass = this.multiPassRenderer\n            .getPostProcessor()\n            .getPostProcessingPassByName(pass[0]);\n          if (postProcessingPass) {\n            postProcessingPass.updateOptions(pass[1]);\n          }\n        },\n      );\n    }\n\n    this.rawConfig = {\n      ...this.rawConfig,\n      ...rest,\n    };\n    if (this.container) {\n      this.updateLayerConfig(this.rawConfig);\n      this.styleNeedUpdate = true;\n    }\n    return this;\n  }\n  public scale(field: string | number | IScaleOptions, cfg?: IScale) {\n    if (isObject(field)) {\n      this.scaleOptions = {\n        ...this.scaleOptions,\n        ...field,\n      };\n    } else {\n      this.scaleOptions[field] = cfg;\n    }\n    return this;\n  }\n\n  /**\n   * 渲染所有的图层\n   */\n  public renderLayers(): void {\n    this.rendering = true;\n\n    this.layerService.renderLayers();\n\n    this.rendering = false;\n  }\n\n  public render(): ILayer {\n    // TODO: this.getEncodedData().length !== 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.getEncodedData().length !== 0) {\n      this.renderModels();\n    }\n    return this;\n  }\n\n  /**\n   * renderMultiPass 专门用于渲染支持 multipass 的 layer\n   */\n  public async renderMultiPass() {\n    if (this.getEncodedData().length !== 0) {\n      if (this.multiPassRenderer && this.multiPassRenderer.getRenderFlag()) {\n        // multi render 开始执行 multiPassRender 的渲染流程\n        await this.multiPassRenderer.render();\n      } else if (this.multiPassRenderer) {\n        // renderPass 触发的渲染\n        this.renderModels();\n      } else {\n        this.renderModels();\n      }\n    }\n  }\n\n  public active(options: IActiveOption | boolean) {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableHighlight = isObject(options) ? true : options;\n    if (isObject(options)) {\n      activeOption.enableHighlight = true;\n      if (options.color) {\n        activeOption.highlightColor = options.color;\n      }\n      if (options.mix) {\n        activeOption.activeMix = options.mix;\n      }\n    } else {\n      activeOption.enableHighlight = !!options;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  public setActive(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().activeMix,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().activeMix,\n      });\n      this.hooks.beforeSelect\n        .call(encodePickingColor(id as number) as number[])\n        // @ts-ignore\n        .then(() => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        });\n    }\n  }\n\n  public select(option: IActiveOption | boolean): ILayer {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableSelect = isObject(option) ? true : option;\n    if (isObject(option)) {\n      activeOption.enableSelect = true;\n      if (option.color) {\n        activeOption.selectColor = option.color;\n      }\n      if (option.mix) {\n        activeOption.selectMix = option.mix;\n      }\n    } else {\n      activeOption.enableSelect = !!option;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n\n  public setSelect(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n        selectMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().selectMix,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n        selectMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().selectMix,\n      });\n      this.hooks.beforeSelect\n        .call(encodePickingColor(id as number) as number[])\n        // @ts-ignore\n        .then(() => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        });\n    }\n  }\n  public setBlend(type: keyof typeof BlendType): ILayer {\n    this.updateLayerConfig({\n      blend: type,\n    });\n    this.layerModelNeedUpdate = true;\n    this.reRender();\n    return this;\n  }\n  public show(): ILayer {\n    this.updateLayerConfig({\n      visible: true,\n    });\n    this.reRender();\n    return this;\n  }\n\n  public hide(): ILayer {\n    this.updateLayerConfig({\n      visible: false,\n    });\n    this.reRender();\n    return this;\n  }\n  public setIndex(index: number): ILayer {\n    this.zIndex = index;\n    this.layerService.updateLayerRenderList();\n    this.layerService.renderLayers();\n    return this;\n  }\n\n  public setCurrentPickId(id: number) {\n    this.currentPickId = id;\n  }\n\n  public getCurrentPickId(): number | null {\n    return this.currentPickId;\n  }\n\n  public setCurrentSelectedId(id: number) {\n    this.selectedFeatureID = id;\n  }\n\n  public getCurrentSelectedId(): number | null {\n    return this.selectedFeatureID;\n  }\n  public isVisible(): boolean {\n    const zoom = this.mapService.getZoom();\n    const {\n      visible,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n    } = this.getLayerConfig();\n    return !!visible && zoom >= minZoom && zoom <= maxZoom;\n  }\n\n  public setMultiPass(\n    enableMultiPass: boolean,\n    currentPasses?: Array<string | [string, { [key: string]: unknown }]>,\n  ) {\n    this.updateLayerConfig({\n      enableMultiPassRenderer: enableMultiPass,\n    });\n    if (currentPasses) {\n      this.updateLayerConfig({\n        passes: currentPasses,\n      });\n    }\n\n    if (enableMultiPass) {\n      const { passes = [] } = this.getLayerConfig();\n      this.multiPassRenderer = createMultiPassRenderer(\n        this,\n        passes,\n        this.postProcessingPassFactory,\n        this.normalPassFactory,\n      );\n      this.multiPassRenderer.setRenderFlag(true);\n      const { width, height } = this.rendererService.getViewportSize();\n      this.multiPassRenderer.resize(width, height);\n    }\n\n    return this;\n  }\n\n  public setMinZoom(minZoom: number): ILayer {\n    this.updateLayerConfig({\n      minZoom,\n    });\n    return this;\n  }\n\n  public getMinZoom(): number {\n    const { minZoom } = this.getLayerConfig();\n    return minZoom as number;\n  }\n\n  public getMaxZoom(): number {\n    const { maxZoom } = this.getLayerConfig();\n    return maxZoom as number;\n  }\n\n  public get(name: string) {\n    const cfg = this.getLayerConfig();\n    // @ts-ignore\n    return cfg[name];\n  }\n\n  public setMaxZoom(maxZoom: number): ILayer {\n    this.updateLayerConfig({\n      maxZoom,\n    });\n    return this;\n  }\n\n  public setAutoFit(autoFit: boolean): ILayer {\n    this.updateLayerConfig({\n      autoFit,\n    });\n    return this;\n  }\n\n  /**\n   * zoom to layer Bounds\n   */\n  public fitBounds(fitBoundsOptions?: unknown): ILayer {\n    if (!this.inited) {\n      this.updateLayerConfig({\n        autoFit: true,\n      });\n      return this;\n    }\n    const source = this.getSource();\n    const extent = source.extent;\n    const isValid = extent.some((v) => Math.abs(v) === Infinity);\n    if (isValid) {\n      return this;\n    }\n    this.mapService.fitBounds(\n      [\n        [extent[0], extent[1]],\n        [extent[2], extent[3]],\n      ],\n      fitBoundsOptions,\n    );\n    return this;\n  }\n\n  public destroy() {\n    // debugger\n    if (this.isDestroied) {\n      return;\n    }\n    this.hooks.beforeDestroy.call();\n    // 清除sources事件\n    this.layerSource.off('update', this.sourceEvent);\n\n    this.multiPassRenderer.destroy();\n    // console.log(this.styleAttributeService.getAttributes())\n    // 清除所有属性以及关联的 vao == 销毁所有 => model this.models.forEach((model) => model.destroy());\n    this.styleAttributeService.clearAllAttributes();\n\n    // 执行每个图层单独的 clearModels 方法 （清除一些额外的 texture、program、buffer 等）\n\n    this.hooks.afterDestroy.call();\n\n    // TODO: 清除各个图层自定义的 models 资源\n    // this.layerModel?.clearModels();\n\n    this.models = [];\n\n    this.layerService.cleanRemove(this);\n\n    this.emit('remove', {\n      target: this,\n      type: 'remove',\n    });\n\n    this.emit('destroy', {\n      target: this,\n      type: 'destroy',\n    });\n\n    this.removeAllListeners();\n    // 解绑图层容器中的服务\n    // this.container.unbind(TYPES.IStyleAttributeService);\n\n    this.isDestroied = true;\n  }\n  public clear() {\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n  }\n  public clearModels() {\n    this.models.forEach((model) => model.destroy());\n    this.layerModel.clearModels();\n  }\n\n  public isDirty() {\n    return !!(\n      this.styleAttributeService.getLayerStyleAttributes() || []\n    ).filter(\n      (attribute) =>\n        attribute.needRescale ||\n        attribute.needRemapping ||\n        attribute.needRegenerateVertices,\n    ).length;\n  }\n\n  public setSource(source: Source) {\n    // 清除旧 sources 事件\n    if (this.layerSource) {\n      this.layerSource.off('update', this.sourceEvent);\n    }\n\n    this.layerSource = source;\n    this.clusterZoom = 0;\n\n    // 已 inited 且启用聚合进行更新聚合数据\n    if (this.inited && this.layerSource.cluster) {\n      const zoom = this.mapService.getZoom();\n      this.layerSource.updateClusterData(zoom);\n    }\n    // source 可能会复用，会在其它layer被修改\n    this.layerSource.on('update', this.sourceEvent);\n  }\n  public getSource() {\n    return this.layerSource;\n  }\n\n  public getScaleOptions() {\n    return this.scaleOptions;\n  }\n\n  public setEncodedData(encodedData: IEncodeFeature[]) {\n    this.encodedData = encodedData;\n  }\n  public getEncodedData() {\n    return this.encodedData;\n  }\n\n  public getScale(name: string): any {\n    return this.styleAttributeService.getLayerAttributeScale(name);\n  }\n\n  public getLegendItems(name: string): LegendItems {\n    const scale = this.styleAttributeService.getLayerAttributeScale(name);\n\n    // 函数自定义映射，没有 scale 返回为空数组\n    if (!scale) {\n      return [];\n    }\n\n    if (scale.invertExtent) {\n      // 分段类型  Quantize、Quantile、Threshold\n      const items: ILegendSegmentItem[] = scale.range().map((item: number) => {\n        return {\n          value: scale.invertExtent(item),\n          [name]: item,\n        };\n      });\n\n      return items;\n    } else if (scale.ticks) {\n      // 连续类型 Continuous (Linear, Power, Log, Identity, Time)\n      const items: ILegendClassificaItem[] = scale\n        .ticks()\n        .map((item: string) => {\n          return {\n            value: item,\n            [name]: scale(item),\n          };\n        });\n\n      return items;\n    } else if (scale?.domain) {\n      // 枚举类型 Cat\n      const items: ILegendClassificaItem[] = scale\n        .domain()\n        .filter((item: string | number | undefined) => !isUndefined(item))\n        .map((item: string | number) => {\n          return {\n            value: item,\n            [name]: scale(item) as string,\n          };\n        });\n\n      return items;\n    }\n\n    return [];\n  }\n\n  public pick({ x, y }: { x: number; y: number }) {\n    this.interactionService.triggerHover({ x, y });\n  }\n\n  public boxSelect(\n    box: [number, number, number, number],\n    cb: (...args: any[]) => void,\n  ) {\n    this.pickingService.boxPickLayer(this, box, cb);\n  }\n\n  public buildLayerModel(\n    options: ILayerModelInitializationOptions &\n      Partial<IModelInitializationOptions>,\n  ): IModel {\n    const {\n      moduleName,\n      vertexShader,\n      fragmentShader,\n      triangulation,\n      segmentNumber,\n      ...rest\n    } = options;\n    this.shaderModuleService.registerModule(moduleName, {\n      vs: vertexShader,\n      fs: fragmentShader,\n    });\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(moduleName);\n    const { createModel } = this.rendererService;\n    const {\n      attributes,\n      elements,\n    } = this.styleAttributeService.createAttributesAndIndices(\n      this.encodedData,\n      triangulation,\n      segmentNumber,\n    );\n    return createModel({\n      attributes,\n      uniforms,\n      fs,\n      vs,\n      elements,\n      blend: BlendTypes[BlendType.normal],\n      ...rest,\n    });\n  }\n\n  public getTime() {\n    return this.layerService.clock.getDelta();\n  }\n  public setAnimateStartTime() {\n    this.animateStartTime = this.layerService.clock.getElapsedTime();\n  }\n  public stopAnimate() {\n    if (this.aniamateStatus) {\n      this.layerService.stopAnimate();\n      this.aniamateStatus = false;\n      this.updateLayerConfig({\n        animateOption: {\n          enable: false,\n        },\n      });\n    }\n  }\n  public getLayerAnimateTime(): number {\n    return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n  }\n\n  public needPick(type: string): boolean {\n    const {\n      enableHighlight = true,\n      enableSelect = true,\n    } = this.getLayerConfig();\n    // 判断layer是否监听事件;\n    let isPick =\n      this.eventNames().indexOf(type) !== -1 ||\n      this.eventNames().indexOf('un' + type) !== -1;\n    if ((type === 'click' || type === 'dblclick') && enableSelect) {\n      isPick = true;\n    }\n    if (\n      type === 'mousemove' &&\n      (enableHighlight ||\n        this.eventNames().indexOf('mouseenter') !== -1 ||\n        this.eventNames().indexOf('unmousemove') !== -1 ||\n        this.eventNames().indexOf('mouseout') !== -1)\n    ) {\n      isPick = true;\n    }\n    return this.isVisible() && isPick;\n  }\n\n  public buildModels() {\n    throw new Error('Method not implemented.');\n  }\n  public rebuildModels() {\n    throw new Error('Method not implemented.');\n  }\n\n  public async renderMulPass(multiPassRenderer: IMultiPassRenderer) {\n    await multiPassRenderer.render();\n  }\n\n  public renderModels(isPicking?: boolean) {\n    // TODO: this.getEncodedData().length > 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.getEncodedData().length > 0) {\n      if (this.layerModelNeedUpdate && this.layerModel) {\n        this.models = this.layerModel.buildModels();\n        this.hooks.beforeRender.call();\n        this.layerModelNeedUpdate = false;\n      }\n\n      if (this.layerModel.renderUpdate) {\n        this.layerModel.renderUpdate();\n      }\n      this.models.forEach((model) => {\n        model.draw(\n          {\n            uniforms: this.layerModel.getUninforms(),\n          },\n          isPicking,\n        );\n      });\n    }\n    return this;\n  }\n\n  public updateStyleAttribute(\n    type: string,\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    if (!this.inited) {\n      this.pendingStyleAttributes.push({\n        attributeName: type,\n        attributeField: field,\n        attributeValues: values,\n        updateOptions,\n      });\n    } else {\n      this.styleAttributeService.updateStyleAttribute(\n        type,\n        {\n          // @ts-ignore\n          scale: {\n            field,\n            ...this.splitValuesAndCallbackInAttribute(\n              // @ts-ignore\n              values,\n              // @ts-ignore\n              this.getLayerConfig()[field],\n            ),\n          },\n        },\n        // @ts-ignore\n        updateOptions,\n      );\n    }\n  }\n\n  public getShaderPickStat() {\n    return this.layerService.getShaderPickStat();\n  }\n\n  /**\n   * 继承空方法\n   * @param time\n   */\n  public setEarthTime(time: number) {\n    console.warn('empty fn');\n  }\n\n  protected getConfigSchema() {\n    throw new Error('Method not implemented.');\n  }\n\n  protected getModelType(): unknown {\n    throw new Error('Method not implemented.');\n  }\n  protected getDefaultConfig() {\n    return {};\n  }\n\n  private sourceEvent = () => {\n    this.dataState.dataSourceNeedUpdate = true;\n    const { autoFit, fitBoundsOptions } = this.getLayerConfig();\n    if (autoFit) {\n      this.fitBounds(fitBoundsOptions);\n    }\n    // 对外暴露事件\n    this.emit('dataUpdate');\n    this.reRender();\n  };\n\n  private reRender() {\n    if (this.inited) {\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n    }\n  }\n  private splitValuesAndCallbackInAttribute(\n    valuesOrCallback?: unknown[],\n    defaultValues?: unknown[],\n  ) {\n    return {\n      values: isFunction(valuesOrCallback)\n        ? undefined\n        : valuesOrCallback || defaultValues,\n      callback: isFunction(valuesOrCallback) ? valuesOrCallback : undefined,\n    };\n  }\n}\n"],"file":"BaseLayer.js"}