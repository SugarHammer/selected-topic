{"version":3,"sources":["../../src/earth/utils.ts"],"names":["mat4","vec3","EARTH_RADIUS","EARTH_SEGMENTS","EARTH_RADIUS_OUTER","torad","deg","Math","acos","lglt2xyz","lnglat","lng","PI","lat","radius","random","z","cos","x","sin","y","primitiveSphere","opt","matRotY","create","matRotZ","up","fromValues","tmpVec3","segments","totalZRotationSteps","totalYRotationSteps","indices","indicesArr","positions","positionsArr","normalArr","uvs","zRotationStep","normalizedZ","angleZ","yRotationStep","normalizedY","angleY","identity","rotateZ","rotateY","transformMat4","scale","push","slice","normalize","verticesCount","length","firstIndex","cells"],"mappings":"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","sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\n// 该文件专门记录地球模式的数值\n\n// 地球网格半径\nexport const EARTH_RADIUS = 100;\nexport const EARTH_SEGMENTS = 36;\n\nexport const EARTH_RADIUS_OUTER = 40;\n\n/**\n * 角度转弧度\n * @param deg\n * @returns\n */\nfunction torad(deg: number) {\n  return (deg / 180) * Math.acos(-1);\n}\n/**\n * 经纬度转xyz\n * @param longitude 经度\n * @param latitude 纬度\n * @param radius 半径\n */\nexport function lglt2xyz(lnglat: [number, number]) {\n  // TODO: + Math.PI/2 是为了对齐坐标\n  const lng = torad(lnglat[0]) + Math.PI / 2;\n  const lat = torad(lnglat[1]);\n\n  // TODO: 手动增加一些偏移，减轻面的冲突\n  const radius = EARTH_RADIUS + Math.random() * 0.4;\n\n  const z = radius * Math.cos(lat) * Math.cos(lng);\n  const x = radius * Math.cos(lat) * Math.sin(lng);\n  const y = radius * Math.sin(lat);\n  return [x, y, z];\n}\n\n/**\n * 构建地球球体网格\n * @param radius\n * @param opt\n * @returns\n */\nexport function primitiveSphere(\n  radius: number,\n  opt: {\n    segments: number;\n  },\n) {\n  const matRotY = mat4.create();\n  const matRotZ = mat4.create();\n  const up = vec3.fromValues(0, 1, 0);\n  const tmpVec3 = vec3.fromValues(0, 0, 0);\n\n  opt = opt || {};\n  radius = typeof radius !== 'undefined' ? radius : 1;\n  const segments = typeof opt.segments !== 'undefined' ? opt.segments : 32;\n\n  const totalZRotationSteps = 2 + segments;\n  const totalYRotationSteps = 2 * totalZRotationSteps;\n\n  const indices = [];\n  const indicesArr = [];\n  const positions = [];\n  const positionsArr = [];\n  const normalArr = [];\n  const uvs = [];\n\n  for (\n    let zRotationStep = 0;\n    zRotationStep <= totalZRotationSteps;\n    zRotationStep++\n  ) {\n    const normalizedZ = zRotationStep / totalZRotationSteps;\n    const angleZ = normalizedZ * Math.PI;\n\n    for (\n      let yRotationStep = 0;\n      yRotationStep <= totalYRotationSteps;\n      yRotationStep++\n    ) {\n      const normalizedY = yRotationStep / totalYRotationSteps;\n      const angleY = normalizedY * Math.PI * 2;\n\n      mat4.identity(matRotZ);\n      mat4.rotateZ(matRotZ, matRotZ, -angleZ);\n\n      mat4.identity(matRotY);\n      mat4.rotateY(matRotY, matRotY, angleY);\n\n      vec3.transformMat4(tmpVec3, up, matRotZ);\n      vec3.transformMat4(tmpVec3, tmpVec3, matRotY);\n\n      vec3.scale(tmpVec3, tmpVec3, -radius);\n\n      positions.push(tmpVec3.slice());\n      positionsArr.push(...tmpVec3.slice());\n\n      vec3.normalize(tmpVec3, tmpVec3);\n      normalArr.push(...tmpVec3.slice());\n\n      uvs.push([normalizedY, 1 - normalizedZ]);\n\n      // position 和 uv 一起存储\n      positionsArr.push(normalizedY, 1 - normalizedZ);\n    }\n\n    if (zRotationStep > 0) {\n      const verticesCount = positions.length;\n      let firstIndex = verticesCount - 2 * (totalYRotationSteps + 1);\n      for (\n        ;\n        firstIndex + totalYRotationSteps + 2 < verticesCount;\n        firstIndex++\n      ) {\n        indices.push([\n          firstIndex,\n          firstIndex + 1,\n          firstIndex + totalYRotationSteps + 1,\n        ]);\n\n        indicesArr.push(\n          firstIndex,\n          firstIndex + 1,\n          firstIndex + totalYRotationSteps + 1,\n        );\n        indices.push([\n          firstIndex + totalYRotationSteps + 1,\n          firstIndex + 1,\n          firstIndex + totalYRotationSteps + 2,\n        ]);\n        indicesArr.push(\n          firstIndex + totalYRotationSteps + 1,\n          firstIndex + 1,\n          firstIndex + totalYRotationSteps + 2,\n        );\n      }\n    }\n  }\n\n  return {\n    cells: indices,\n    positions,\n    uvs,\n    positionsArr,\n    indicesArr,\n    normalArr,\n  };\n}\n"],"file":"utils.js"}