{"version":3,"sources":["../../../src/point/models/fillmage.ts"],"names":["AttributeType","gl","getMask","BaseModel","PointFillTriangulation","Version","FillImageModel","createTexture2D","rendererService","texture","update","data","iconService","getCanvas","mag","min","mipmap","layer","renderLayers","LINEAR","LINEAR_MIPMAP_LINEAR","premultiplyAlpha","width","height","canvasHeight","getLayerConfig","opacity","strokeOpacity","strokeWidth","stroke","offsets","blend","rotation","getDirty","bind","rotateFlag","mapService","version","radian","Math","PI","getRotation","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","rowCount","dataTexture","length","flipY","format","LUMINANCE","type","FLOAT","u_isMeter","Number","isMeter","u_RotateMatrix","Float32Array","cos","sin","u_additive","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_texture","u_textSize","u_opacity","u_offsets","isOffsetStatic","styleAttributeService","createAttributesAndIndices","updateTexture","on","unit","L7MAP","GLOBEL","calMeter2Coord","buildModels","getSource","extent","minLng","minLat","maxLng","maxLat","center","MAPBOX","window","mapboxgl","MercatorCoordinate","coord","fromLngLat","lng","lat","offsetInMeters","offsetInMercatorCoordinateUnits","meterInMercatorCoordinateUnits","westCoord","x","y","z","westLnglat","toLngLat","meter2coord","m1","meterToCoord","m2","Boolean","mask","maskInside","getShaders","frag","vert","buildLayerModel","moduleName","vertexShader","fragmentShader","triangulation","depth","enable","getBlend","stencil","pointFillFrag","pointFillVert","off","destroy","registerStyleAttribute","name","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","size","feature","featureIdx","vertex","attributeIdx","iconMap","getIconMap","shape","extrude","extrudeIndex","Array","isArray"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAttribute,\n  IElements,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { getMask } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { IPointLayerStyleOptions } from '../../core/interface';\nimport { PointFillTriangulation } from '../../core/triangulation';\n// static pointLayer shader - not support animate\nimport pointFillFrag from '../shaders/image/fillImage_frag.glsl';\nimport pointFillVert from '../shaders/image/fillImage_vert.glsl';\n\nimport { isNumber } from 'lodash';\n\nimport { Version } from '@antv/l7-maps';\n\nexport default class FillImageModel extends BaseModel {\n  public meter2coord: number = 1;\n  private texture: ITexture2D;\n  private isMeter: boolean = false;\n  private radian: number = 0; // 旋转的弧度\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      strokeOpacity = 1,\n      strokeWidth = 0,\n      stroke = 'rgba(0,0,0,0)',\n      offsets = [0, 0],\n      blend,\n      rotation,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n\n    if (this.rendererService.getDirty()) {\n      this.texture.bind();\n    }\n\n    /**\n     *               rotateFlag\n     * L7MAP            1\n     * MAPBOX           1\n     * GAODE2.x         -1\n     * GAODE1.x         -1\n     */\n    let rotateFlag = 1;\n    if (\n      this.mapService.version === 'GAODE2.x' ||\n      this.mapService.version === 'GAODE1.x'\n    ) {\n      rotateFlag = -1;\n    }\n    // 控制图标的旋转角度（绕 Z 轴旋转）\n    this.radian = rotation\n      ? (rotateFlag * Math.PI * rotation) / 180\n      : (rotateFlag * Math.PI * (this.mapService.getRotation() % 360)) / 180;\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      })\n    ) {\n      // 判断当前的样式中哪些是需要进行数据映射的，哪些是常量，同时计算用于构建数据纹理的一些中间变量\n      this.judgeStyleAttributes({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      });\n\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_isMeter: Number(this.isMeter),\n      u_RotateMatrix: new Float32Array([\n        Math.cos(this.radian),\n        Math.sin(this.radian),\n        -Math.sin(this.radian),\n        Math.cos(this.radian),\n      ]),\n      u_additive: blend === 'additive' ? 1.0 : 0.0,\n\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_texture: this.texture,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_offsets: this.isOffsetStatic(offsets)\n        ? (offsets as [number, number])\n        : [0, 0],\n    };\n  }\n\n  public getAttribute(): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    return this.styleAttributeService.createAttributesAndIndices(\n      this.layer.getEncodedData(),\n      PointFillTriangulation,\n    );\n  }\n\n  public initModels(): IModel[] {\n    this.updateTexture();\n    this.iconService.on('imageUpdate', this.updateTexture);\n\n    const {\n      unit = 'l7size',\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const { version } = this.mapService;\n    if (\n      unit === 'meter' &&\n      version !== Version.L7MAP &&\n      version !== Version.GLOBEL\n    ) {\n      this.isMeter = true;\n      this.calMeter2Coord();\n    }\n\n    return this.buildModels();\n  }\n\n  /**\n   * 计算等面积点图层（unit meter）笛卡尔坐标标度与世界坐标标度的比例\n   * @returns\n   */\n  public calMeter2Coord() {\n    // @ts-ignore\n    const [minLng, minLat, maxLng, maxLat] = this.layer.getSource().extent;\n    const center = [(minLng + maxLng) / 2, (minLat + maxLat) / 2];\n\n    const { version } = this.mapService;\n    if (version === Version.MAPBOX && window.mapboxgl.MercatorCoordinate) {\n      const coord = window.mapboxgl.MercatorCoordinate.fromLngLat(\n        { lng: center[0], lat: center[1] },\n        0,\n      );\n      const offsetInMeters = 1;\n      const offsetInMercatorCoordinateUnits =\n        offsetInMeters * coord.meterInMercatorCoordinateUnits();\n      const westCoord = new window.mapboxgl.MercatorCoordinate(\n        coord.x - offsetInMercatorCoordinateUnits,\n        coord.y,\n        coord.z,\n      );\n      const westLnglat = westCoord.toLngLat();\n\n      this.meter2coord = center[0] - westLnglat.lng;\n      return;\n    }\n\n    // @ts-ignore\n    const m1 = this.mapService.meterToCoord(center, [minLng, minLat]);\n    // @ts-ignore\n    const m2 = this.mapService.meterToCoord(center, [\n      maxLng === minLng ? maxLng + 0.1 : maxLng,\n      maxLat === minLat ? minLat + 0.1 : maxLat,\n    ]);\n    this.meter2coord = (m1 + m2) / 2;\n    if (!Boolean(this.meter2coord)) {\n      // Tip: 兼容单个数据导致的 m1、m2 为 NaN\n      this.meter2coord = 7.70681090738883;\n    }\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const { frag, vert, type } = this.getShaders();\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointfill_' + type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        triangulation: PointFillTriangulation,\n        depth: { enable: false },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  public getShaders(): { frag: string; vert: string; type: string } {\n    return {\n      frag: pointFillFrag,\n      vert: pointFillVert,\n      type: 'normal',\n    };\n  }\n\n  public clearModels() {\n    this.iconService.off('imageUpdate', this.updateTexture);\n    this.texture.destroy();\n    this.dataTexture?.destroy();\n  }\n\n  // overwrite baseModel func\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n          const { shape } = feature;\n          const { x, y } = iconMap[shape as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n\n          const extrudeIndex = (attributeIdx % 4) * 3;\n          return [\n            extrude[extrudeIndex],\n            extrude[extrudeIndex + 1],\n            extrude[extrudeIndex + 2],\n          ];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          // console.log('featureIdx', featureIdx, feature)\n          return Array.isArray(size)\n            ? [size[0] * this.meter2coord]\n            : [(size as number) * this.meter2coord];\n        },\n      },\n    });\n  }\n\n  private updateTexture = () => {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.update({\n        data: this.iconService.getCanvas(),\n        mag: 'linear',\n        min: 'linear mipmap nearest',\n        mipmap: true,\n      });\n      // this.layer.render();\n      // TODO: 更新完纹理后在更新的图层的时候需要更新所有的图层\n      this.layer.renderLayers();\n      return;\n    }\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.LINEAR,\n      // min: gl.LINEAR,\n      min: gl.LINEAR_MIPMAP_LINEAR,\n      premultiplyAlpha: false,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n      mipmap: true,\n    });\n  };\n}\n"],"file":"fillmage.js"}