{"version":3,"sources":["../../../src/point/models/image.ts"],"names":["AttributeType","gl","getMask","BaseModel","PointImageTriangulation","ImageModel","createTexture2D","rendererService","texture","update","data","iconService","getCanvas","mag","min","mipmap","layer","renderLayers","LINEAR","LINEAR_MIPMAP_LINEAR","premultiplyAlpha","width","height","canvasHeight","getLayerConfig","opacity","offsets","getDirty","bind","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","rowCount","dataTexture","length","flipY","format","LUMINANCE","type","FLOAT","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_texture","u_textSize","u_opacity","u_offsets","isOffsetStatic","registerBuiltinAttributes","updateTexture","on","buildModels","destroy","off","mask","maskInside","buildLayerModel","moduleName","vertexShader","pointImageVert","fragmentShader","pointImageFrag","triangulation","primitive","POINTS","depth","enable","blend","getBlend","stencil","styleAttributeService","registerStyleAttribute","name","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","size","feature","featureIdx","vertex","attributeIdx","Array","isArray","iconMap","getIconMap","shape","x","y"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { getMask } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { IPointLayerStyleOptions } from '../../core/interface';\nimport { PointImageTriangulation } from '../../core/triangulation';\nimport pointImageFrag from '../shaders/image_frag.glsl';\nimport pointImageVert from '../shaders/image_vert.glsl';\nexport default class ImageModel extends BaseModel {\n  private texture: ITexture2D;\n\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      offsets = [0, 0],\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    if (this.rendererService.getDirty()) {\n      this.texture.bind();\n    }\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        offsets,\n      })\n    ) {\n      this.judgeStyleAttributes({\n        opacity,\n        offsets,\n      });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_texture: this.texture,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n      // u_opacity: opacity || 1.0,\n      // u_offsets: [-offsets[0], offsets[1]],\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_offsets: this.isOffsetStatic(offsets)\n        ? (offsets as [number, number])\n        : [0, 0],\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.registerBuiltinAttributes();\n    this.updateTexture();\n    this.iconService.on('imageUpdate', this.updateTexture);\n    return this.buildModels();\n  }\n\n  public clearModels() {\n    this.texture?.destroy();\n    this.dataTexture?.destroy();\n    this.iconService.off('imageUpdate', this.updateTexture);\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: { enable: false },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n          const { shape } = feature;\n          const { x, y } = iconMap[shape as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private updateTexture = () => {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.update({\n        data: this.iconService.getCanvas(),\n        mag: 'linear',\n        min: 'linear mipmap nearest',\n        mipmap: true,\n      });\n      // this.layer.render();\n      // TODO: 更新完纹理后在更新的图层的时候需要更新所有的图层\n      this.layer.renderLayers();\n      return;\n    }\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.LINEAR,\n      // min: gl.LINEAR,\n      min: gl.LINEAR_MIPMAP_LINEAR,\n      premultiplyAlpha: false,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n      mipmap: true,\n    });\n  };\n}\n"],"file":"image.js"}