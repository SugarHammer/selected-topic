{"version":3,"sources":["../../src/point/index.ts"],"names":["BaseLayer","PointModels","PointLayer","modelType","getModelType","layerModel","models","initModels","buildModels","shapeOption","field","values","getLayerConfig","shape2d","shape3d","iconMap","iconService","getIconMap","indexOf","Array","v","hasOwnProperty","properties","opacity","type","minimum","maximum","defaultConfig","fillImage","normal","blend","radar","simplePoint","fill","extrude","image","icon","text","PointTypes","layerType","includes","layerData","getEncodedData","item","find","fe","getModelTypeWillEmptyData","shape","fontService","getGlyph"],"mappings":"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","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport BaseLayer from '../core/BaseLayer';\nimport { IPointLayerStyleOptions } from '../core/interface';\nimport PointModels, { PointType } from './models/index';\n\nexport default class PointLayer extends BaseLayer<IPointLayerStyleOptions> {\n  public type: string = 'PointLayer';\n  public buildModels() {\n    const modelType = this.getModelType();\n    this.layerModel = new PointModels[modelType](this);\n    this.models = this.layerModel.initModels();\n  }\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n\n  /**\n   * 在未传入数据的时候判断点图层的 shape 类型\n   * @returns\n   */\n  public getModelTypeWillEmptyData(): PointType {\n    if (this.shapeOption) {\n      const { field, values } = this.shapeOption;\n      const { shape2d, shape3d } = this.getLayerConfig();\n\n      const iconMap = this.iconService.getIconMap();\n\n      if (field && shape2d?.indexOf(field as string) !== -1) {\n        return 'fill';\n      }\n\n      if (values && values instanceof Array) {\n        for (const v of values) {\n          if (typeof v === 'string' && iconMap.hasOwnProperty(v as string)) {\n            return 'image';\n          }\n        }\n      }\n    }\n    return 'normal';\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n  protected getDefaultConfig() {\n    const type = this.getModelType();\n    const defaultConfig = {\n      fillImage: {},\n      normal: {\n        blend: 'additive',\n      },\n      radar: {},\n      simplePoint: {},\n      fill: { blend: 'normal' },\n      extrude: {},\n      image: {},\n      icon: {},\n      text: {\n        blend: 'normal',\n      },\n    };\n    return defaultConfig[type];\n  }\n\n  protected getModelType(): PointType {\n    const PointTypes = [\n      'fillImage',\n      'fill',\n      'radar',\n      'image',\n      'normal',\n      'simplePoint',\n      'extrude',\n      'text',\n      'icon',\n    ];\n    if (this.layerType && PointTypes.includes(this.layerType)) {\n      return this.layerType as PointType;\n    }\n    // pointlayer\n    //  2D、 3d、 shape、image、text、normal、\n    const layerData = this.getEncodedData();\n    const { shape2d, shape3d } = this.getLayerConfig();\n    const iconMap = this.iconService.getIconMap();\n    const item = layerData.find((fe: IEncodeFeature) => {\n      return fe.hasOwnProperty('shape');\n    });\n    if (!item) {\n      // return 'normal';\n      return this.getModelTypeWillEmptyData();\n    } else {\n      const shape = item.shape;\n      if (shape === 'dot') {\n        return 'normal';\n      }\n      if (shape === 'simple') {\n        return 'simplePoint';\n      }\n      if (shape === 'radar') {\n        return 'radar';\n      }\n      if (shape === 'fillImage') {\n        return 'fillImage';\n      }\n      if (shape2d?.indexOf(shape as string) !== -1) {\n        return 'fill';\n      }\n      if (shape3d?.indexOf(shape as string) !== -1) {\n        return 'extrude';\n      }\n      if (iconMap.hasOwnProperty(shape as string)) {\n        return 'image';\n      }\n      if (this.fontService.getGlyph(shape as string) !== '') {\n        return 'icon';\n      }\n      return 'text';\n    }\n  }\n}\n"],"file":"index.js"}