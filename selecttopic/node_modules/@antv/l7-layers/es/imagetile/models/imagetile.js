import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { gl } from '@antv/l7-core';
import BaseModel from '../../core/BaseModel';
import { RasterImageTriangulation } from '../../core/triangulation';
var ImageTileFrag = "precision mediump float;\nvoid main() {\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n";
var ImageTileVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nattribute vec3 a_Position;\n#pragma include \"projection\"\nvoid main() {\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\n   } else {\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n   }\n}\n";
import Tile from '../utils/Tile';

var ImageTileModel = function (_BaseModel) {
  _inherits(ImageTileModel, _BaseModel);

  var _super = _createSuper(ImageTileModel);

  function ImageTileModel() {
    var _this;

    _classCallCheck(this, ImageTileModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "tileLayer", void 0);

    _defineProperty(_assertThisInitialized(_this), "timestamp", void 0);

    return _this;
  }

  _createClass(ImageTileModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      return {};
    }
  }, {
    key: "tile",
    value: function tile() {
      var _this$mapService$getB = this.mapService.getBounds(),
          _this$mapService$getB2 = _slicedToArray(_this$mapService$getB, 2),
          WS = _this$mapService$getB2[0],
          EN = _this$mapService$getB2[1];

      var NE = {
        lng: EN[0],
        lat: EN[1]
      };
      var SW = {
        lng: WS[0],
        lat: WS[1]
      };
      this.tileLayer.calCurrentTiles({
        NE: NE,
        SW: SW,
        tileCenter: this.mapService.getCenter(),
        currentZoom: this.mapService.getZoom(),
        minSourceZoom: this.mapService.getMinZoom(),
        minZoom: this.mapService.getMinZoom(),
        maxZoom: this.mapService.getMaxZoom()
      });
    }
  }, {
    key: "initModels",
    value: function initModels() {
      var _this2 = this;

      this.layer.zIndex = -999;

      var _ref = this.layer.getLayerConfig(),
          _ref$resolution = _ref.resolution,
          resolution = _ref$resolution === void 0 ? 'low' : _ref$resolution,
          _ref$maxSourceZoom = _ref.maxSourceZoom,
          maxSourceZoom = _ref$maxSourceZoom === void 0 ? 17 : _ref$maxSourceZoom;

      var source = this.layer.getSource();

      if (source.data.tileurl) {
        this.tileLayer = new Tile({
          url: source.data.tileurl,
          layerService: this.layerService,
          layer: this.layer,
          resolution: resolution,
          maxSourceZoom: maxSourceZoom,
          crstype: 'epsg3857'
        });
        this.tile();
        this.mapService.on('mapchange', function (e) {
          if (_this2.timestamp) {
            clearTimeout(_this2.timestamp);
            _this2.timestamp = null;
          }

          _this2.timestamp = setTimeout(function () {
            if (_this2.mapService.getZoom() >= 2.0) {
              _this2.tile();
            }
          }, 500);
        });
      }

      return [this.layer.buildLayerModel({
        moduleName: 'ImageTileLayer',
        vertexShader: ImageTileVert,
        fragmentShader: ImageTileFrag,
        triangulation: RasterImageTriangulation,
        primitive: gl.TRIANGLES,
        depth: {
          enable: false
        },
        blend: this.getBlend()
      })];
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      this.tileLayer.removeTiles();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return this.initModels();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      return;
    }
  }]);

  return ImageTileModel;
}(BaseModel);

export { ImageTileModel as default };
//# sourceMappingURL=imagetile.js.map