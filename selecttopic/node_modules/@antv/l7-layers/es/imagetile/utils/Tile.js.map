{"version":3,"sources":["../../../src/imagetile/utils/Tile.ts"],"names":["Bounds","GeoCoordinates","Point","toLngLat","createLayerContainer","ImageTile","TileCache","CacheLimit","Tile","props","layerService","layer","url","resolution","maxSourceZoom","crstype","currentCrs","default","start","x","y","end","projection","crs","destroyTile","bind","tileCache","updateTileList","removeTiles","oprions","NE","SW","tileCenter","currentZoom","minSourceZoom","minZoom","maxZoom","zoom","Math","floor","tileZoom","centerPoint","lngLatToPoint","lng","lat","centerXY","divideBy","pixelBounds","getPixelBounds","tileRange","pxBoundsToTileRange","margin","noPruneRange","getBottomLeft","subtract","getTopRight","add","isFinite","min","max","Error","j","i","coords","tile","tileList","join","current","push","sort","a","b","tile1","tile2","d1","pow","d2","pruneTiles","forEach","key","requestTile","ceil","NEPoint","SWPoint","topHeight","bottomHeight","leftWidth","rightWidth","width","Object","keys","map","c","contains","retain","active","split","v","Number","z","retainParent","retainChildren","removeOutTiles","t","getTile","container","sceneContainer","name","layerChildren","imageLayer","setTile","updateLayerRenderList","renderLayers","show","x2","y2","z2","loaded","layerIndex","indexOf","splice","destroy","hide","destory"],"mappings":"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","sourcesContent":["import { Bounds, GeoCoordinates, Point, toLngLat } from '@antv/geo-coord';\nimport {\n  createLayerContainer,\n  ILayer,\n  ILayerService,\n  ILngLat,\n} from '@antv/l7-core';\nimport { Container } from 'inversify';\n\nimport ImageTile from './ImageTile';\nimport TileCache from './tileCache';\n\n// Tip: 瓦片地图的存储上限\nconst CacheLimit = 30;\n\nexport default class Tile {\n  public tileList: any = {};\n  public tileCache: any;\n\n  public updateTileList: any[];\n  public tileZoom: number;\n  public noPruneRange: any;\n  public url: string;\n  public resolution: number;\n  public maxSourceZoom: number;\n  public crstype: string;\n  public currentCrs: any;\n\n  public layerService: ILayerService;\n  public layer: ILayer;\n  constructor(props: any) {\n    this.layerService = props.layerService;\n    this.layer = props.layer;\n    this.url = props.url;\n    this.resolution = props.resolution === 'low' ? -1 : 0;\n    this.maxSourceZoom = props.maxSourceZoom;\n    this.crstype = props.crstype;\n\n    this.currentCrs = new GeoCoordinates.default({\n      start: { x: 0, y: 0 },\n      end: { x: 0, y: 0 },\n      projection: this.crstype,\n    }).crs as any;\n\n    this.destroyTile = this.destroyTile.bind(this);\n    this.tileCache = new TileCache(CacheLimit, this.destroyTile);\n\n    this.updateTileList = [];\n\n    this.removeTiles = this.removeTiles.bind(this);\n  }\n\n  public calCurrentTiles(oprions: any) {\n    const {\n      NE,\n      SW,\n      tileCenter,\n      currentZoom,\n      minSourceZoom,\n      minZoom,\n      maxZoom,\n    } = oprions;\n    // TODO: 当前瓦片的层级要比地图底图的层级低\n    if (currentZoom >= this.maxSourceZoom) {\n      return;\n    }\n    const zoom = Math.floor(currentZoom) + this.resolution;\n\n    this.tileZoom = zoom > this.maxSourceZoom ? this.maxSourceZoom : zoom;\n\n    if (\n      currentZoom < minZoom ||\n      currentZoom >= maxZoom ||\n      currentZoom < minSourceZoom\n    ) {\n      this.removeTiles();\n      return;\n    }\n\n    this.updateTileList = [];\n\n    // 计算瓦片中心\n    const centerPoint = this.currentCrs.lngLatToPoint(\n      toLngLat(tileCenter.lng, tileCenter.lat),\n      this.tileZoom,\n    );\n    const centerXY = centerPoint.divideBy(256).floor();\n\n    const pixelBounds = this.getPixelBounds(\n      NE,\n      SW,\n      tileCenter,\n      this.tileZoom,\n      this.currentCrs,\n    ); // 计算像素范围\n    const tileRange = this.pxBoundsToTileRange(pixelBounds); // 计算瓦片范围\n\n    const margin = 4;\n\n    this.noPruneRange = new Bounds(\n      tileRange.getBottomLeft().subtract([margin, -margin]),\n      tileRange.getTopRight().add([margin, -margin]),\n    );\n\n    // T: isFinite(n: number) 用于检测 n 是否无穷大\n    if (\n      !(\n        isFinite(tileRange.min.x) &&\n        isFinite(tileRange.min.y) &&\n        isFinite(tileRange.max.x) &&\n        isFinite(tileRange.max.y)\n      )\n    ) {\n      throw new Error('Attempted to load an infinite number of tiles');\n    }\n\n    // 根据视野判断新增的瓦片索引\n    for (let j = tileRange.min.y; j <= tileRange.max.y; j++) {\n      for (let i = tileRange.min.x; i <= tileRange.max.x; i++) {\n        const coords = [i, j, this.tileZoom];\n        const tile = this.tileList[coords.join('_')];\n        if (tile) {\n          tile.current = true;\n        } else {\n          this.tileList[coords.join('_')] = {\n            current: true,\n            coords,\n          };\n          this.updateTileList.push(coords);\n        }\n      }\n    }\n\n    // 瓦片列表排序\n    this.updateTileList.sort((a: any, b: any) => {\n      const tile1 = a;\n      const tile2 = b;\n      const d1 =\n        Math.pow(tile1[0] * 1 - centerXY.x, 2) +\n        Math.pow(tile1[1] * 1 - centerXY.y, 2);\n      const d2 =\n        Math.pow(tile2[0] * 1 - centerXY.x, 2) +\n        Math.pow(tile2[1] * 1 - centerXY.y, 2);\n      return d1 - d2;\n    });\n\n    this.pruneTiles();\n    this.updateTileList.forEach((coords: any) => {\n      const key = coords.join('_');\n      if (this.tileList[key].current) {\n        this.requestTile(key);\n      }\n    });\n  }\n\n  public pxBoundsToTileRange(pixelBounds: any) {\n    return new Bounds(\n      pixelBounds.min.divideBy(256).floor(),\n      pixelBounds.max\n        .divideBy(256)\n        .ceil()\n        .subtract([1, 1]),\n    );\n  }\n\n  public getPixelBounds(\n    NE: ILngLat,\n    SW: ILngLat,\n    tileCenter: ILngLat,\n    tileZoom: number,\n    crs: any,\n  ) {\n    const zoom = tileZoom;\n    const NEPoint = crs.lngLatToPoint(toLngLat(NE.lng, NE.lat), zoom);\n    const SWPoint = crs.lngLatToPoint(toLngLat(SW.lng, SW.lat), zoom);\n    const centerPoint = crs.lngLatToPoint(\n      toLngLat(tileCenter.lng, tileCenter.lat),\n      zoom,\n    );\n    const topHeight = centerPoint.y - NEPoint.y;\n    const bottomHeight = SWPoint.y - centerPoint.y;\n    // 跨日界线的情况\n    let leftWidth;\n    let rightWidth;\n    if (tileCenter.lng - NE.lng > 0 || tileCenter.lng - SW.lng < 0) {\n      const width =\n        ((Math.pow(2, zoom) * 256) / 360) * (180 - NE.lng) +\n        ((Math.pow(2, zoom) * 256) / 360) * (SW.lng + 180);\n      if (tileCenter.lng - NE.lng > 0) {\n        // 日界线在右侧\n        leftWidth =\n          ((Math.pow(2, zoom) * 256) / 360) * (tileCenter.lng - NE.lng);\n        rightWidth = width - leftWidth;\n      } else {\n        rightWidth =\n          ((Math.pow(2, zoom) * 256) / 360) * (SW.lng - tileCenter.lng);\n        leftWidth = width - rightWidth;\n      }\n    } else {\n      // 不跨日界线\n      leftWidth = ((Math.pow(2, zoom) * 256) / 360) * (tileCenter.lng - SW.lng);\n      rightWidth =\n        ((Math.pow(2, zoom) * 256) / 360) * (NE.lng - tileCenter.lng);\n    }\n    const pixelBounds = new Bounds(\n      centerPoint.subtract(leftWidth, topHeight),\n      centerPoint.add(rightWidth, bottomHeight),\n    );\n    return pixelBounds;\n  }\n\n  public pruneTiles() {\n    Object.keys(this.tileList).map((key) => {\n      const c = this.tileList[key].coords;\n      // 如果不是同一个缩放层级，则将瓦片设为不显示\n      if (\n        c[2] !== this.tileZoom ||\n        !this.noPruneRange.contains(new Point(c[0], c[1]))\n      ) {\n        this.tileList[key].current = false;\n      }\n    });\n\n    Object.keys(this.tileList).map((key) => {\n      const tile = this.tileList[key];\n      tile.retain = tile.current;\n    });\n\n    Object.keys(this.tileList).map((key) => {\n      const tile = this.tileList[key];\n      if (tile.current && !tile.active) {\n        const [x, y, z] = key.split('_').map((v) => Number(v));\n\n        if (!this.retainParent(x, y, z, z - 5)) {\n          this.retainChildren(x, y, z, z + 2);\n        }\n      }\n    });\n\n    this.removeOutTiles();\n  }\n\n  public requestTile(key: string) {\n    const t = this.tileList[key];\n    if (!t) {\n      return;\n    }\n    let tile = this.tileCache.getTile(key);\n    if (!tile) {\n      const container = createLayerContainer(\n        this.layer.sceneContainer as Container,\n      );\n      tile = new ImageTile(\n        key,\n        this.url,\n        container,\n        this.layer.sceneContainer as Container,\n      );\n      tile.name = key;\n\n      t.current = true;\n      t.retain = true;\n      t.active = true;\n\n      // 往 imageTileLayer 中添加子图层\n      this.layer.layerChildren.push(tile.imageLayer);\n\n      this.tileCache.setTile(tile, key);\n\n      this.pruneTiles();\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n    } else {\n      // Tip: show 方法就是将相应的瓦片图片添加到渲染队列\n      tile.imageLayer.show();\n      t.current = true;\n      t.retain = true;\n      t.active = true;\n\n      this.pruneTiles();\n    }\n  }\n\n  public retainParent(x: number, y: number, z: number, minZoom: number): any {\n    const x2 = Math.floor(x / 2);\n    const y2 = Math.floor(y / 2);\n    const z2 = z - 1;\n    const tile = this.tileList[[x2, y2, z2].join('_')];\n    if (tile && tile.active) {\n      tile.retain = true;\n      return true;\n    } else if (tile && tile.loaded) {\n      tile.retain = true;\n    }\n    if (z2 > minZoom) {\n      return this.retainParent(x2, y2, z2, minZoom);\n    }\n    return false;\n  }\n\n  public retainChildren(x: number, y: number, z: number, maxZoom: number) {\n    for (let i = 2 * x; i < 2 * x + 2; i++) {\n      for (let j = 2 * y; j < 2 * y + 2; j++) {\n        const key = [i, j, z + 1].join('_');\n        const tile = this.tileList[key];\n        if (tile && tile.active) {\n          tile.retain = true;\n          continue;\n        } else if (tile && tile.loaded) {\n          tile.retain = true;\n        }\n\n        if (z + 1 < maxZoom) {\n          this.retainChildren(i, j, z + 1, maxZoom);\n        }\n      }\n    }\n  }\n\n  public destroyTile(tile: any) {\n    const layerIndex = this.layer.layerChildren.indexOf(tile.imageLayer);\n    if (layerIndex > -1) {\n      this.layer.layerChildren.splice(layerIndex, 1);\n    }\n\n    tile.imageLayer.destroy();\n    this.layerService.updateLayerRenderList();\n    this.layerService.renderLayers();\n\n    // 清除 tileCache 中的存储 相当于 tileCache.setTile(tile, null)\n    tile = null;\n  }\n\n  public removeOutTiles() {\n    for (const key in this.tileList) {\n      if (!this.tileList[key].retain) {\n        // Tip: 不需要显示的瓦片对象\n        const tile = this.tileCache.getTile(key);\n        // Tip: 若是网格对象存在\n        if (tile) {\n          // Tip: hide 方法就是将相应的瓦片图片从渲染队列中剔除\n          tile.imageLayer.hide();\n        }\n        delete this.tileList[key];\n      }\n    }\n  }\n\n  public removeTiles() {\n    this.layer.layerChildren.forEach((layer: any) => {\n      layer.destroy();\n    });\n\n    this.layer.layerChildren = [];\n    this.layerService.updateLayerRenderList();\n    this.layerService.renderLayers();\n    this.tileList = {};\n    this.tileCache.destory();\n  }\n}\n"],"file":"Tile.js"}