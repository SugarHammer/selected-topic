/**
 * LRU Cache class with limit
 *
 * Update order for each get/set operation
 * Delete oldest when reach given limit
 */
export default class LRUCache {
    limit: number;
    order: any[];
    cache: any;
    destroy: any;
    constructor(limit?: number, destroy?: () => string);
    clear(): void;
    get(key: string): any;
    set(key: string, value: any): void;
    delete(key: string): void;
    deleteCache(key: string): void;
    deleteOrder(key: string): void;
    appendOrder(key: string): void;
}
