"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _l7Core = require("@antv/l7-core");

var _l7Source = _interopRequireWildcard(require("@antv/l7-source"));

var _inversify = require("inversify");

require("reflect-metadata");

var _dec, _class;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var DataSourcePlugin = (_dec = (0, _inversify.injectable)(), _dec(_class = function () {
  function DataSourcePlugin() {
    (0, _classCallCheck2.default)(this, DataSourcePlugin);
    (0, _defineProperty2.default)(this, "mapService", void 0);
  }

  (0, _createClass2.default)(DataSourcePlugin, [{
    key: "apply",
    value: function apply(layer) {
      var _this = this;

      this.mapService = layer.getContainer().get(_l7Core.TYPES.IMapService);
      layer.hooks.init.tap('DataSourcePlugin', function () {
        var source = layer.getSource();

        if (!source) {
          var _ref = layer.sourceOption || {
            data: _l7Source.DEFAULT_DATA,
            options: _l7Source.DEFAULT_PARSER
          },
              data = _ref.data,
              options = _ref.options;

          layer.setSource(new _l7Source.default(data, options));
        }

        _this.updateClusterData(layer);
      });
      layer.hooks.beforeRenderData.tap('DataSourcePlugin', function () {
        var neeUpdateCluster = _this.updateClusterData(layer);

        var dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;
        layer.dataState.dataSourceNeedUpdate = false;
        return neeUpdateCluster || dataSourceNeedUpdate;
      });
    }
  }, {
    key: "updateClusterData",
    value: function updateClusterData(layer) {
      var source = layer.getSource();
      var cluster = source.cluster;
      var _source$clusterOption = source.clusterOptions,
          _source$clusterOption2 = _source$clusterOption.zoom,
          zoom = _source$clusterOption2 === void 0 ? 0 : _source$clusterOption2,
          _source$clusterOption3 = _source$clusterOption.maxZoom,
          maxZoom = _source$clusterOption3 === void 0 ? 16 : _source$clusterOption3;
      var newZoom = this.mapService.getZoom() - 1;
      var dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;

      if (cluster && (dataSourceNeedUpdate || Math.abs(layer.clusterZoom - newZoom) >= 1)) {
        if (zoom !== Math.floor(newZoom)) {
          source.updateClusterData(Math.floor(newZoom));
        }

        layer.clusterZoom = newZoom;
        return true;
      }

      return false;
    }
  }]);
  return DataSourcePlugin;
}()) || _class);
exports.default = DataSourcePlugin;
//# sourceMappingURL=DataSourcePlugin.js.map