"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _l7Core = require("@antv/l7-core");

var _inversify = require("inversify");

require("reflect-metadata");

var _dec, _class;

var RegisterStyleAttributePlugin = (_dec = (0, _inversify.injectable)(), _dec(_class = function () {
  function RegisterStyleAttributePlugin() {
    (0, _classCallCheck2.default)(this, RegisterStyleAttributePlugin);
  }

  (0, _createClass2.default)(RegisterStyleAttributePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tap('RegisterStyleAttributePlugin', function () {
        _this.registerBuiltinAttributes(styleAttributeService);
      });
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes(styleAttributeService) {
      styleAttributeService.registerStyleAttribute({
        name: 'position',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Position',
          buffer: {
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex) {
            return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];
          }
        }
      });
      styleAttributeService.registerStyleAttribute({
        name: 'filter',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'filter',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx) {
            var filter = feature.filter;
            return filter ? [1] : [0];
          }
        }
      });
      styleAttributeService.registerStyleAttribute({
        name: 'color',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Color',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 4,
          update: function update(feature, featureIdx) {
            var color = feature.color;
            return !color || !color.length ? [1, 1, 1, 1] : color;
          }
        }
      });
      styleAttributeService.registerStyleAttribute({
        name: 'vertexId',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_vertexId',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [featureIdx];
          }
        }
      });
    }
  }]);
  return RegisterStyleAttributePlugin;
}()) || _class);
exports.default = RegisterStyleAttributePlugin;
//# sourceMappingURL=RegisterStyleAttributePlugin.js.map