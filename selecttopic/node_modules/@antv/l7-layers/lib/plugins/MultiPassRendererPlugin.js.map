{"version":3,"sources":["../../src/plugins/MultiPassRendererPlugin.ts"],"names":["MultiPassRendererPlugin","TYPES","IGlobalConfigService","layer","rendererService","postProcessingPassFactory","normalPassFactory","hooks","init","tap","getLayerConfig","enableMultiPassRenderer","passes","enabled","multiPassRenderer","setRenderFlag","beforeRender","getViewportSize","width","height","resize"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AASA;;AACA;;AACA;;;;IAgBqBA,uB,WADpB,4B,UAEE,uBAAOC,cAAMC,oBAAb,C;;;;;;;;;WAKD,eACEC,KADF,QAWE;AAAA;;AAAA,UAREC,eAQF,QAREA,eAQF;AAAA,UAPEC,yBAOF,QAPEA,yBAOF;AAAA,UANEC,iBAMF,QANEA,iBAMF;AACAH,MAAAA,KAAK,CAACI,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,yBAArB,EAAgD,YAAM;AACpD,oCAAiDN,KAAK,CAACO,cAAN,EAAjD;AAAA,YAAQC,uBAAR,yBAAQA,uBAAR;AAAA,2DAAiCC,MAAjC;AAAA,YAAiCA,MAAjC,uCAA0C,EAA1C;;AAGA,QAAA,KAAI,CAACC,OAAL,GACE,CAAC,CAACF,uBAAF,IACAR,KAAK,CAACO,cAAN,GAAuBC,uBAAvB,KAAmD,KAFrD;;AAKA,YAAI,KAAI,CAACE,OAAT,EAAkB;AAChBV,UAAAA,KAAK,CAACW,iBAAN,GAA0B,8CACxBX,KADwB,EAExBS,MAFwB,EAGxBP,yBAHwB,EAIxBC,iBAJwB,CAA1B;AAMAH,UAAAA,KAAK,CAACW,iBAAN,CAAwBC,aAAxB,CAAsC,IAAtC;AACD;AACF,OAlBD;AAoBAZ,MAAAA,KAAK,CAACI,KAAN,CAAYS,YAAZ,CAAyBP,GAAzB,CAA6B,yBAA7B,EAAwD,YAAM;AAC5D,YAAI,KAAI,CAACI,OAAT,EAAkB;AAEhB,sCAA0BT,eAAe,CAACa,eAAhB,EAA1B;AAAA,cAAQC,KAAR,yBAAQA,KAAR;AAAA,cAAeC,MAAf,yBAAeA,MAAf;;AACAhB,UAAAA,KAAK,CAACW,iBAAN,CAAwBM,MAAxB,CAA+BF,KAA/B,EAAsCC,MAAtC;AACD;AACF,OAND;AAOD","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  IPass,\n  IPostProcessingPass,\n  IRendererService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { createMultiPassRenderer } from '../utils/multiPassRender';\n\n/**\n * 自定义渲染管线：\n * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass\n * 根据 Layer 配置的 passes 创建 PostProcessing\n * @example\n * new PolygonLayer({\n *   enableMultiPassRenderer: true,\n *   passes: [\n *     'blurH',\n *     ['blurV', { radius: 10 }],\n *   ],\n * })\n */\n@injectable()\nexport default class MultiPassRendererPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  private enabled: boolean;\n\n  public apply(\n    layer: ILayer,\n    {\n      rendererService,\n      postProcessingPassFactory,\n      normalPassFactory,\n    }: {\n      rendererService: IRendererService;\n      postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>;\n      normalPassFactory: (name: string) => IPass<unknown>;\n    },\n  ) {\n    layer.hooks.init.tap('MultiPassRendererPlugin', () => {\n      const { enableMultiPassRenderer, passes = [] } = layer.getLayerConfig();\n\n      // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭\n      this.enabled =\n        !!enableMultiPassRenderer &&\n        layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n      // 根据 LayerConfig passes 配置项初始化\n      if (this.enabled) {\n        layer.multiPassRenderer = createMultiPassRenderer(\n          layer,\n          passes,\n          postProcessingPassFactory,\n          normalPassFactory,\n        );\n        layer.multiPassRenderer.setRenderFlag(true);\n      }\n    });\n\n    layer.hooks.beforeRender.tap('MultiPassRendererPlugin', () => {\n      if (this.enabled) {\n        // 渲染前根据 viewport 调整 FBO size\n        const { width, height } = rendererService.getViewportSize();\n        layer.multiPassRenderer.resize(width, height);\n      }\n    });\n  }\n}\n"],"file":"MultiPassRendererPlugin.js"}