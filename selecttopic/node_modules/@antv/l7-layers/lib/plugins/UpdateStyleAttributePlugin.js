"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inversify = require("inversify");

require("reflect-metadata");

var _dec, _class;

var UpdateStyleAttributePlugin = (_dec = (0, _inversify.injectable)(), _dec(_class = function () {
  function UpdateStyleAttributePlugin() {
    (0, _classCallCheck2.default)(this, UpdateStyleAttributePlugin);
  }

  (0, _createClass2.default)(UpdateStyleAttributePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tap('UpdateStyleAttributePlugin', function () {
        _this.initStyleAttribute(layer, {
          styleAttributeService: styleAttributeService
        });
      });
      layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', function () {
        if (layer.layerModelNeedUpdate) {
          return;
        }

        _this.updateStyleAtrribute(layer, {
          styleAttributeService: styleAttributeService
        });
      });
    }
  }, {
    key: "updateStyleAtrribute",
    value: function updateStyleAtrribute(layer, _ref2) {
      var styleAttributeService = _ref2.styleAttributeService;
      var attributes = styleAttributeService.getLayerStyleAttributes() || [];
      var filter = styleAttributeService.getLayerStyleAttribute('filter');
      var shape = styleAttributeService.getLayerStyleAttribute('shape');

      if (filter && filter.needRegenerateVertices) {
        layer.layerModelNeedUpdate = true;
        attributes.forEach(function (attr) {
          return attr.needRegenerateVertices = false;
        });
        return;
      }

      attributes.filter(function (attribute) {
        return attribute.needRegenerateVertices;
      }).forEach(function (attribute) {
        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(), attribute.featureRange.startIndex, attribute.featureRange.endIndex);
        attribute.needRegenerateVertices = false;
      });
    }
  }, {
    key: "initStyleAttribute",
    value: function initStyleAttribute(layer, _ref3) {
      var styleAttributeService = _ref3.styleAttributeService;
      var attributes = styleAttributeService.getLayerStyleAttributes() || [];
      attributes.filter(function (attribute) {
        return attribute.needRegenerateVertices;
      }).forEach(function (attribute) {
        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(), attribute.featureRange.startIndex, attribute.featureRange.endIndex);
        attribute.needRegenerateVertices = false;
      });
    }
  }]);
  return UpdateStyleAttributePlugin;
}()) || _class);
exports.default = UpdateStyleAttributePlugin;
//# sourceMappingURL=UpdateStyleAttributePlugin.js.map