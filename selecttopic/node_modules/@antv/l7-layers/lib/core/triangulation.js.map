{"version":3,"sources":["../../src/core/triangulation.ts"],"names":["GeometryCache","PointFillTriangulation","feature","coordinates","vertices","indices","size","length","GlobelPointFillTriangulation","xyz","PointExtrudeTriangulation","shape","getGeometry","positions","index","normals","PointImageTriangulation","LineTriangulation","originCoordinates","version","line","ExtrudePolyline","dash","join","path1","Array","isArray","path2","i","item1","item2","extrude_gaode2","path","forEach","item","extrude","linebuffer","complex","SimpleLineTriangulation","simpleExtrude_gaode2","simpleExtrude","polygonTriangulation","flattengeo","earcut","flatten","dimensions","holes","polygonTriangulationWithCenter","getVerticesWithCenter","verticesWithCenter","center","radius","lng","lat","push","PolygonExtrudeTriangulation","HeatmapGridTriangulation","getHeatmapGeometry","RasterImageTriangulation","indexs","LineArcTriangulation","segmentNumber","segNum","indexArray","map","v","HeatmapTriangulation","dir","addDir","dir1","dir2","dir3","needFlat","geometryShape","cylinder","geometry","computeVertexNormals","dim","Float32Array","vA","vB","vC","cb","vec3","create","ab","normal","li","p1","p2","p3","ax","ay","pA","fromValues","bx","by","pB","cx","cy","pC","sub","cross","normalizeNormals","newNormal","normalize","set","checkIsClosed","points","shape3d","circle","indexOf","dirX","dirY","x","y","earthTriangulation","earthmesh","EARTH_RADIUS","segments","EARTH_SEGMENTS","positionsArr","indicesArr","normalArr","earthOuterTriangulation","EARTH_RADIUS_OUTER"],"mappings":"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","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport { aProjectFlat, lngLatToMeters } from '@antv/l7-utils';\nimport earcut from 'earcut';\n// @ts-ignore\nimport { mat4, vec3 } from 'gl-matrix';\nimport {\n  EARTH_RADIUS,\n  EARTH_RADIUS_OUTER,\n  EARTH_SEGMENTS,\n  lglt2xyz,\n  primitiveSphere,\n} from '../earth/utils';\nimport ExtrudePolyline from '../utils/extrude_polyline';\nimport {\n  calculateCentroid,\n  calculatePointsCenterAndRadius,\n} from '../utils/geo';\nimport extrudePolygon, {\n  extrude_PolygonNormal,\n  fillPolygon,\n  IExtrudeGeomety,\n} from './shape/extrude';\nimport {\n  geometryShape,\n  IPosition,\n  ShapeType2D,\n  ShapeType3D,\n} from './shape/Path';\ntype IShape = ShapeType2D & ShapeType3D;\ninterface IGeometryCache {\n  [key: string]: IExtrudeGeomety;\n}\nconst GeometryCache: IGeometryCache = {};\n\n/**\n * 计算2D 填充点图顶点\n * @param feature 映射feature\n */\n\nexport function PointFillTriangulation(feature: IEncodeFeature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates, ...coordinates, ...coordinates, ...coordinates],\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length,\n  };\n}\n/**\n * 计算2D 填充点图顶点 (地球模式)\n * @param feature 映射feature\n */\nexport function GlobelPointFillTriangulation(feature: IEncodeFeature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  const xyz = lglt2xyz(coordinates as [number, number]);\n  return {\n    vertices: [...xyz, ...xyz, ...xyz, ...xyz],\n    indices: [0, 1, 2, 2, 3, 0],\n    size: xyz.length,\n  };\n}\n\n/**\n * 计算3D 拉伸点图\n * @param feature 映射feature\n */\nexport function PointExtrudeTriangulation(feature: IEncodeFeature) {\n  const { shape } = feature;\n  const { positions, index, normals } = getGeometry(\n    shape as ShapeType3D,\n    false,\n  );\n  return {\n    vertices: positions,\n    indices: index,\n    normals,\n    size: 5,\n  };\n}\n\n/**\n * 计算图片标注\n * @param feature 映射feature\n */\nexport function PointImageTriangulation(feature: IEncodeFeature) {\n  const coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates],\n    indices: [0],\n    size: coordinates.length,\n  };\n}\n\n/**\n * 线三角化\n * @param feature 映射feature\n */\nexport function LineTriangulation(feature: IEncodeFeature) {\n  const { coordinates, originCoordinates, version } = feature;\n  // let path = coordinates as number[][][] | number[][];\n  // if (!Array.isArray(path[0][0])) {\n  //   path = [coordinates] as number[][][];\n  // }\n\n  const line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel',\n  });\n\n  if (version === 'GAODE2.x') {\n    // 处理高德2.0几何体构建\n    let path1 = coordinates as number[][][] | number[][]; // 计算位置\n    if (!Array.isArray(path1[0][0])) {\n      path1 = [coordinates] as number[][][];\n    }\n    let path2 = originCoordinates as number[][][] | number[][]; // 计算法线\n    if (!Array.isArray(path2[0][0])) {\n      path2 = [originCoordinates] as number[][][];\n    }\n\n    for (let i = 0; i < path1.length; i++) {\n      // 高德2.0在计算线时，需要使用经纬度计算发现，使用 customCoords.lnglatToCoords 计算的数据来计算顶点的位置\n      const item1 = path1[i];\n      const item2 = path2[i];\n      line.extrude_gaode2(item1 as number[][], item2 as number[][]);\n    }\n  } else {\n    // 处理非高德2.0的几何体构建\n    let path = coordinates as number[][][] | number[][];\n    if (path[0] && !Array.isArray(path[0][0])) {\n      path = [coordinates] as number[][][];\n    }\n    path.forEach((item: any) => {\n      line.extrude(item as number[][]);\n    });\n  }\n\n  const linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions, // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    size: 6,\n  };\n}\n\nexport function SimpleLineTriangulation(feature: IEncodeFeature) {\n  const { coordinates, originCoordinates, version } = feature;\n\n  const line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel',\n  });\n\n  if (version === 'GAODE2.x') {\n    // 处理高德2.0几何体构建\n    let path1 = coordinates as number[][][] | number[][]; // 计算位置\n    if (!Array.isArray(path1[0][0])) {\n      path1 = [coordinates] as number[][][];\n    }\n    let path2 = originCoordinates as number[][][] | number[][]; // 计算法线\n    if (!Array.isArray(path2[0][0])) {\n      path2 = [originCoordinates] as number[][][];\n    }\n\n    for (let i = 0; i < path1.length; i++) {\n      // 高德2.0在计算线时，需要使用经纬度计算发现，使用 customCoords.lnglatToCoords 计算的数据来计算顶点的位置\n      const item1 = path1[i];\n      const item2 = path2[i];\n      line.simpleExtrude_gaode2(item1 as number[][], item2 as number[][]);\n    }\n  } else {\n    // 处理非高德2.0的几何体构建\n    let path = coordinates as number[][][] | number[][];\n    if (path[0] && !Array.isArray(path[0][0])) {\n      path = [coordinates] as number[][][];\n    }\n    path.forEach((item: any) => {\n      line.simpleExtrude(item as number[][]);\n    });\n  }\n\n  const linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions, // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    size: 6,\n  };\n}\n\nexport function polygonTriangulation(feature: IEncodeFeature) {\n  const { coordinates } = feature;\n  const flattengeo = earcut.flatten(coordinates as number[][][]);\n  const { vertices, dimensions, holes } = flattengeo;\n  return {\n    indices: earcut(vertices, holes, dimensions),\n    vertices,\n    size: dimensions,\n  };\n}\n\n// TODO：构建几何图形（带有中心点和大小）\nexport function polygonTriangulationWithCenter(feature: IEncodeFeature) {\n  const { coordinates } = feature;\n  const flattengeo = earcut.flatten(coordinates as number[][][]);\n  const { vertices, dimensions, holes } = flattengeo;\n\n  return {\n    indices: earcut(vertices, holes, dimensions),\n    vertices: getVerticesWithCenter(vertices),\n    size: dimensions + 4,\n  };\n}\n\nfunction getVerticesWithCenter(vertices: number[]) {\n  const verticesWithCenter = [];\n  const { center, radius } = calculatePointsCenterAndRadius(vertices);\n  for (let i = 0; i < vertices.length; i += 2) {\n    const lng = vertices[i];\n    const lat = vertices[i + 1];\n    verticesWithCenter.push(lng, lat, 0, ...center, radius);\n  }\n  return verticesWithCenter;\n}\n\nexport function PolygonExtrudeTriangulation(feature: IEncodeFeature) {\n  const coordinates = feature.coordinates as IPosition[][];\n  const { positions, index, normals } = extrude_PolygonNormal(\n    coordinates,\n    true,\n  );\n  return {\n    vertices: positions, // [ x, y, z, uv.x,uv.y ]\n    indices: index,\n    normals,\n    size: 5,\n  };\n}\n\nexport function HeatmapGridTriangulation(feature: IEncodeFeature) {\n  const { shape } = feature;\n  const { positions, index } = getHeatmapGeometry(shape as IShape);\n  return {\n    vertices: positions, // [ x, y, z ] 多边形顶点\n    indices: index,\n    size: 3,\n  };\n}\n\n/**\n * 图片图层顶点构造\n * @param feature 数据\n */\nexport function RasterImageTriangulation(feature: IEncodeFeature) {\n  const coordinates = feature.coordinates as IPosition[];\n  // [ x, y, z. uv.x, uv.y]\n  const positions: number[] = [\n    ...coordinates[0],\n    0,\n    0,\n    1,\n    coordinates[1][0],\n    coordinates[0][1],\n    0,\n    1,\n    1,\n    ...coordinates[1],\n    0,\n    1,\n    0,\n    ...coordinates[0],\n    0,\n    0,\n    1,\n    ...coordinates[1],\n    0,\n    1,\n    0,\n    coordinates[0][0],\n    coordinates[1][1],\n    0,\n    0,\n    0,\n  ];\n  const indexs = [0, 1, 2, 3, 4, 5];\n  return {\n    vertices: positions,\n    indices: indexs,\n    size: 5,\n  };\n}\n\n/**\n *  计算3D弧线顶点\n * @param feature 映射数据\n * @param segNum 弧线线段数\n */\nexport function LineArcTriangulation(\n  feature: IEncodeFeature,\n  segmentNumber?: number,\n) {\n  const segNum = segmentNumber ? segmentNumber : 30;\n  const coordinates = feature.coordinates as IPosition[];\n  const positions = [];\n  const indexArray = [];\n  for (let i = 0; i < segNum; i++) {\n    // 上线两个顶点\n    // [ x, y, z, sx,sy, tx,ty]\n    positions.push(\n      i,\n      1,\n      i,\n      coordinates[0][0],\n      coordinates[0][1],\n      coordinates[1][0],\n      coordinates[1][1],\n      i,\n      -1,\n      i,\n      coordinates[0][0],\n      coordinates[0][1],\n      coordinates[1][0],\n      coordinates[1][1],\n    );\n\n    if (i !== segNum - 1) {\n      indexArray.push(\n        ...[0, 1, 2, 1, 3, 2].map((v) => {\n          return i * 2 + v;\n        }),\n      );\n    }\n  }\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 7,\n  };\n}\n\n/**\n * 构建热力图密度图的顶点\n * @param feature\n * @returns\n */\nexport function HeatmapTriangulation(feature: IEncodeFeature) {\n  const coordinates = feature.coordinates as number[];\n  if (coordinates.length === 2) {\n    coordinates.push(0);\n  }\n  const size = feature.size as number;\n  const dir = addDir(-1, 1);\n  const dir1 = addDir(1, 1);\n  const dir2 = addDir(-1, -1);\n  const dir3 = addDir(1, -1);\n  // [x,y,z, dirx ,diry, weight]\n  const positions = [\n    ...coordinates,\n    ...dir,\n    ...coordinates,\n    ...dir2,\n    ...coordinates,\n    ...dir3,\n    ...coordinates,\n    ...dir1,\n  ];\n  const indexArray = [0, 1, 2, 3, 0, 2];\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 5,\n  };\n}\n\n/**\n * 点图层3d geomerty\n * @param shape 3D形状\n */\nfunction getGeometry(shape: ShapeType3D, needFlat = false): IExtrudeGeomety {\n  if (GeometryCache && GeometryCache[shape]) {\n    return GeometryCache[shape];\n  }\n  const path = geometryShape[shape]\n    ? geometryShape[shape]()\n    : geometryShape.cylinder();\n  const geometry = extrude_PolygonNormal([path], needFlat);\n  GeometryCache[shape] = geometry;\n  return geometry;\n}\n\nfunction computeVertexNormals(\n  positions: number[],\n  indexArray: number[],\n  dim: number = 3,\n  needFlat: boolean = false,\n) {\n  const normals = new Float32Array((positions.length / dim) * 3);\n  let vA: number;\n  let vB: number;\n  let vC: number;\n  const cb = vec3.create();\n  const ab = vec3.create();\n  const normal = vec3.create();\n  for (let i = 0, li = indexArray.length; i < li; i += 3) {\n    vA = indexArray[i + 0] * 3;\n    vB = indexArray[i + 1] * 3;\n    vC = indexArray[i + 2] * 3;\n    let p1 = [positions[vA], positions[vA + 1]];\n    let p2 = [positions[vB], positions[vB + 1]];\n    let p3 = [positions[vC], positions[vC + 1]];\n    if (needFlat) {\n      p1 = lngLatToMeters(p1);\n      p2 = lngLatToMeters(p2);\n      p3 = lngLatToMeters(p3);\n    }\n    const [ax, ay] = p1;\n    const pA = vec3.fromValues(ax, ay, positions[vA + 2]);\n    const [bx, by] = p2;\n    const pB = vec3.fromValues(bx, by, positions[vB + 2]);\n    const [cx, cy] = p3;\n    const pC = vec3.fromValues(cx, cy, positions[vC + 2]);\n    vec3.sub(cb, pC, pB);\n    vec3.sub(ab, pA, pB);\n    vec3.cross(normal, cb, ab);\n    normals[vA] += cb[0];\n    normals[vA + 1] += cb[1];\n    normals[vA + 2] += cb[2];\n    normals[vB] += cb[0];\n    normals[vB + 1] += cb[1];\n    normals[vB + 2] += cb[2];\n    normals[vC] += cb[0];\n    normals[vC + 1] += cb[1];\n    normals[vC + 2] += cb[2];\n  }\n  normalizeNormals(normals);\n  return normals;\n}\n\nfunction normalizeNormals(normals: Float32Array) {\n  for (let i = 0, li = normals.length; i < li; i += 3) {\n    const normal = vec3.fromValues(normals[i], normals[i + 1], normals[i + 2]);\n    const newNormal = vec3.create();\n    vec3.normalize(newNormal, normal);\n    normals.set(newNormal, i);\n  }\n}\n\nfunction checkIsClosed(points: number[][][]) {\n  const p1 = points[0][0];\n  const p2 = points[0][points[0].length - 1];\n  return p1[0] === p2[0] && p1[1] === p2[1];\n}\n\nfunction getHeatmapGeometry(shape: ShapeType2D | ShapeType3D): IExtrudeGeomety {\n  const shape3d = [\n    'cylinder',\n    'triangleColumn',\n    'hexagonColumn',\n    'squareColumn',\n  ];\n  const path = geometryShape[shape]\n    ? geometryShape[shape]()\n    : geometryShape.circle();\n  const geometry =\n    shape3d.indexOf(shape) === -1\n      ? fillPolygon([path])\n      : extrudePolygon([path]);\n  // const geometry = fillPolygon([path]);\n  return geometry;\n}\n// 热力图计算范围\nfunction addDir(dirX: number, dirY: number) {\n  const x = (dirX + 1) / 2;\n  const y = (dirY + 1) / 2;\n  return [x, y];\n}\n\n/**\n * 构建地球三角网格\n * @returns\n */\nexport function earthTriangulation() {\n  const earthmesh = primitiveSphere(EARTH_RADIUS, { segments: EARTH_SEGMENTS });\n  const { positionsArr, indicesArr, normalArr } = earthmesh;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr,\n  };\n}\n\nexport function earthOuterTriangulation() {\n  const earthmesh = primitiveSphere(EARTH_RADIUS + EARTH_RADIUS_OUTER, {\n    segments: EARTH_SEGMENTS,\n  });\n  const { positionsArr, indicesArr, normalArr } = earthmesh;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr,\n  };\n}\n"],"file":"triangulation.js"}