"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _d3Color = require("d3-color");

var _blend = require("../utils/blend");

var _dec, _class, _descriptor;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var BaseModel = (_dec = (0, _l7Core.lazyInject)(_l7Core.TYPES.IGlobalConfigService), (_class = function () {
  function BaseModel(layer) {
    (0, _classCallCheck2.default)(this, BaseModel);
    (0, _defineProperty2.default)(this, "triangulation", void 0);
    (0, _defineProperty2.default)(this, "createTexture2D", void 0);
    (0, _defineProperty2.default)(this, "layer", void 0);
    (0, _defineProperty2.default)(this, "dataTexture", void 0);
    (0, _defineProperty2.default)(this, "DATA_TEXTURE_WIDTH", void 0);
    (0, _defineProperty2.default)(this, "rowCount", void 0);
    (0, _defineProperty2.default)(this, "cacheStyleProperties", void 0);
    (0, _defineProperty2.default)(this, "cellLength", void 0);
    (0, _defineProperty2.default)(this, "cellProperties", void 0);
    (0, _defineProperty2.default)(this, "cellTypeLayout", void 0);
    (0, _defineProperty2.default)(this, "stylePropertyesExist", void 0);
    (0, _defineProperty2.default)(this, "dataTextureTest", void 0);
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor, this);
    (0, _defineProperty2.default)(this, "shaderModuleService", void 0);
    (0, _defineProperty2.default)(this, "rendererService", void 0);
    (0, _defineProperty2.default)(this, "iconService", void 0);
    (0, _defineProperty2.default)(this, "fontService", void 0);
    (0, _defineProperty2.default)(this, "styleAttributeService", void 0);
    (0, _defineProperty2.default)(this, "mapService", void 0);
    (0, _defineProperty2.default)(this, "cameraService", void 0);
    (0, _defineProperty2.default)(this, "layerService", void 0);
    this.layer = layer;
    this.rendererService = layer.getContainer().get(_l7Core.TYPES.IRendererService);
    this.shaderModuleService = layer.getContainer().get(_l7Core.TYPES.IShaderModuleService);
    this.styleAttributeService = layer.getContainer().get(_l7Core.TYPES.IStyleAttributeService);
    this.mapService = layer.getContainer().get(_l7Core.TYPES.IMapService);
    this.iconService = layer.getContainer().get(_l7Core.TYPES.IIconService);
    this.fontService = layer.getContainer().get(_l7Core.TYPES.IFontService);
    this.cameraService = layer.getContainer().get(_l7Core.TYPES.ICameraService);
    this.layerService = layer.getContainer().get(_l7Core.TYPES.ILayerService);
    this.registerBuiltinAttributes();
    this.startModelAnimate();
    var createTexture2D = this.rendererService.createTexture2D;
    this.createTexture2D = createTexture2D;
    this.DATA_TEXTURE_WIDTH = 1024;
    this.rowCount = 1;
    this.cellLength = 0;
    this.cellProperties = [];
    this.cacheStyleProperties = {
      thetaOffset: undefined,
      opacity: undefined,
      strokeOpacity: undefined,
      strokeWidth: undefined,
      stroke: undefined,
      offsets: undefined
    };
    this.stylePropertyesExist = {
      hasThetaOffset: 0,
      hasOpacity: 0,
      hasStrokeOpacity: 0,
      hasStrokeWidth: 0,
      hasStroke: 0,
      hasOffsets: 0
    };
    this.dataTextureTest = this.layerService.getOESTextureFloat();

    if (!this.dataTextureTest) {
      this.dataTexture = this.createTexture2D({
        data: new Uint8Array(4),
        mag: _l7Core.gl.NEAREST,
        min: _l7Core.gl.NEAREST,
        width: 1,
        height: 1
      });
    }
  }

  (0, _createClass2.default)(BaseModel, [{
    key: "clearLastCalRes",
    value: function clearLastCalRes() {
      this.cellProperties = [];
      this.cellLength = 0;
      this.stylePropertyesExist = {
        hasThetaOffset: 0,
        hasOpacity: 0,
        hasStrokeOpacity: 0,
        hasStrokeWidth: 0,
        hasStroke: 0,
        hasOffsets: 0
      };
    }
  }, {
    key: "getCellTypeLayout",
    value: function getCellTypeLayout() {
      if (this.dataTextureTest) {
        return [this.rowCount, this.DATA_TEXTURE_WIDTH, 0.0, 0.0, this.stylePropertyesExist.hasOpacity, this.stylePropertyesExist.hasStrokeOpacity, this.stylePropertyesExist.hasStrokeWidth, this.stylePropertyesExist.hasStroke, this.stylePropertyesExist.hasOffsets, this.stylePropertyesExist.hasThetaOffset, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0];
      } else {
        return [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0];
      }
    }
  }, {
    key: "dataTextureNeedUpdate",
    value: function dataTextureNeedUpdate(options) {
      var isUpdate = false;

      if (!(0, _isEqual2.default)(options.thetaOffset, this.cacheStyleProperties.thetaOffset)) {
        isUpdate = true;
        this.cacheStyleProperties.thetaOffset = options.thetaOffset;
      }

      if (!(0, _isEqual2.default)(options.opacity, this.cacheStyleProperties.opacity)) {
        isUpdate = true;
        this.cacheStyleProperties.opacity = options.opacity;
      }

      if (!(0, _isEqual2.default)(options.strokeOpacity, this.cacheStyleProperties.strokeOpacity)) {
        isUpdate = true;
        this.cacheStyleProperties.strokeOpacity = options.strokeOpacity;
      }

      if (!(0, _isEqual2.default)(options.strokeWidth, this.cacheStyleProperties.strokeWidth)) {
        isUpdate = true;
        this.cacheStyleProperties.strokeWidth = options.strokeWidth;
      }

      if (!(0, _isEqual2.default)(options.stroke, this.cacheStyleProperties.stroke)) {
        isUpdate = true;
        this.cacheStyleProperties.stroke = options.stroke;
      }

      if (!(0, _isEqual2.default)(options.offsets, this.cacheStyleProperties.offsets)) {
        isUpdate = true;
        this.cacheStyleProperties.offsets = options.offsets;
      }

      if (this.dataTexture === undefined) {
        isUpdate = true;
      }

      return isUpdate;
    }
  }, {
    key: "judgeStyleAttributes",
    value: function judgeStyleAttributes(options) {
      this.clearLastCalRes();

      if (options.opacity !== undefined && !(0, _isNumber2.default)(options.opacity)) {
        this.cellProperties.push({
          attr: 'opacity',
          count: 1
        });
        this.stylePropertyesExist.hasOpacity = 1;
        this.cellLength += 1;
      }

      if (options.strokeOpacity !== undefined && !(0, _isNumber2.default)(options.strokeOpacity)) {
        this.cellProperties.push({
          attr: 'strokeOpacity',
          count: 1
        });
        this.stylePropertyesExist.hasStrokeOpacity = 1;
        this.cellLength += 1;
      }

      if (options.strokeWidth !== undefined && !(0, _isNumber2.default)(options.strokeWidth)) {
        this.cellProperties.push({
          attr: 'strokeWidth',
          count: 1
        });
        this.stylePropertyesExist.hasStrokeWidth = 1;
        this.cellLength += 1;
      }

      if (options.stroke !== undefined && !this.isStaticColor(options.stroke)) {
        this.cellProperties.push({
          attr: 'stroke',
          count: 4
        });
        this.stylePropertyesExist.hasStroke = 1;
        this.cellLength += 4;
      }

      if (options.offsets !== undefined && !this.isOffsetStatic(options.offsets)) {
        this.cellProperties.push({
          attr: 'offsets',
          count: 2
        });
        this.stylePropertyesExist.hasOffsets = 1;
        this.cellLength += 2;
      }

      if (options.thetaOffset !== undefined && !(0, _isNumber2.default)(options.thetaOffset)) {
        this.cellProperties.push({
          attr: 'thetaOffset',
          count: 1
        });
        this.stylePropertyesExist.hasThetaOffset = 1;
        this.cellLength += 1;
      }
    }
  }, {
    key: "isStaticColor",
    value: function isStaticColor(stroke) {
      if ((0, _isString2.default)(stroke)) {
        if ((0, _d3Color.color)(stroke)) {
          return true;
        } else {
          return false;
        }
      }

      return false;
    }
  }, {
    key: "getStrokeColor",
    value: function getStrokeColor(stroke) {
      if (this.isStaticColor(stroke)) {
        var strokeColor = (0, _l7Utils.rgb2arr)(stroke);
        strokeColor[0] = strokeColor[0] ? strokeColor[0] : 0;
        strokeColor[1] = strokeColor[1] ? strokeColor[1] : 0;
        strokeColor[2] = strokeColor[2] ? strokeColor[2] : 0;
        strokeColor[3] = strokeColor[3] ? strokeColor[3] : 0;
        return strokeColor;
      } else {
        return [0, 0, 0, 0];
      }
    }
  }, {
    key: "isOffsetStatic",
    value: function isOffsetStatic(offsets) {
      if ((0, _isArray2.default)(offsets) && offsets.length === 2 && (0, _isNumber2.default)(offsets[0]) && (0, _isNumber2.default)(offsets[1])) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "patchMod",
    value: function patchMod(d, count) {
      for (var i = 0; i < count; i++) {
        d.push(-1);
      }
    }
  }, {
    key: "patchData",
    value: function patchData(d, cellData, cellPropertiesLayouts) {
      var _iterator = _createForOfIteratorHelper(cellPropertiesLayouts),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var layout = _step.value;
          var attr = layout.attr,
              count = layout.count;
          var value = cellData[attr];

          if (value !== undefined) {
            if (attr === 'stroke') {
              d.push.apply(d, (0, _toConsumableArray2.default)((0, _l7Utils.rgb2arr)(value)));
            } else if (attr === 'offsets') {
              if (this.isOffsetStatic(value)) {
                d.push(-value[0], value[1]);
              } else {
                d.push(0, 0);
              }
            } else {
              d.push((0, _isNumber2.default)(value) ? value : 1.0);
            }
          } else {
            this.patchMod(d, count);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "calDataFrame",
    value: function calDataFrame(cellLength, encodeData, cellPropertiesLayouts) {
      var encodeDatalength = encodeData.length;
      var rowCount = Math.ceil(encodeDatalength * cellLength / this.DATA_TEXTURE_WIDTH);
      var totalLength = rowCount * this.DATA_TEXTURE_WIDTH;
      var d = [];

      for (var i = 0; i < encodeDatalength; i++) {
        var cellData = encodeData[i];
        this.patchData(d, cellData, cellPropertiesLayouts);
      }

      for (var _i = d.length; _i < totalLength; _i++) {
        d.push(-1);
      }

      return {
        data: d,
        width: this.DATA_TEXTURE_WIDTH,
        height: rowCount
      };
    }
  }, {
    key: "getBlend",
    value: function getBlend() {
      var _this$layer$getLayerC = this.layer.getLayerConfig(),
          _this$layer$getLayerC2 = _this$layer$getLayerC.blend,
          blend = _this$layer$getLayerC2 === void 0 ? 'normal' : _this$layer$getLayerC2;

      return _blend.BlendTypes[_l7Core.BlendType[blend]];
    }
  }, {
    key: "getDefaultStyle",
    value: function getDefaultStyle() {
      return {};
    }
  }, {
    key: "getUninforms",
    value: function getUninforms() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      return {};
    }
  }, {
    key: "needUpdate",
    value: function needUpdate() {
      return false;
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "initModels",
    value: function initModels() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      return;
    }
  }, {
    key: "getAttribute",
    value: function getAttribute() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "render",
    value: function render() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "animateOption2Array",
    value: function animateOption2Array(option) {
      return [option.enable ? 0 : 1.0, option.duration || 4.0, option.interval || 0.2, option.trailLength || 0.1];
    }
  }, {
    key: "startModelAnimate",
    value: function startModelAnimate() {
      var _ref = this.layer.getLayerConfig(),
          animateOption = _ref.animateOption;

      if (animateOption.enable) {
        this.layer.setAnimateStartTime();
      }
    }
  }]);
  return BaseModel;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class.prototype, "configService", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class));
exports.default = BaseModel;
//# sourceMappingURL=BaseModel.js.map