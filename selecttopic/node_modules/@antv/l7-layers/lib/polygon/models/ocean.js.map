{"version":3,"sources":["../../../src/polygon/models/ocean.ts"],"names":["OceanModel","layer","getLayerConfig","opacity","watercolor","watercolor2","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","gl","LUMINANCE","type","FLOAT","u_texture1","texture1","u_texture2","texture2","u_texture3","texture3","u_watercolor","u_watercolor2","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","u_time","getLayerAnimateTime","loadTexture","buildModels","mask","maskInside","buildLayerModel","moduleName","vertexShader","ocean_vert","fragmentShader","ocean_frag","triangulation","polygonTriangulation","depth","enable","stencil","destroy","bbox","getSource","extent","minLng","minLat","maxLng","maxLat","lngLen","latLen","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","STATIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","normal","lng","lat","rendererService","defaultTextureOptions","initImage","images","initTex","layerService","updateLayerRenderList","renderLayers","callback","loadedCount","loadedImages","map","imgSrc","image","Image","crossOrigin","src","push","onload","wrapS","MIRRORED_REPEAT","wrapT","min","LINEAR","mag","BaseModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AAEA;;AAEA;;;;;;;;;IAGqBA,U;;;;;;;;;;;;;;;;;;;;;;;WAInB,wBAAsB;AACpB,iBAII,KAAKC,KAAL,CAAWC,cAAX,EAJJ;AAAA,8BACEC,OADF;AAAA,UACEA,OADF,6BACY,CADZ;AAAA,iCAEEC,UAFF;AAAA,UAEEA,UAFF,gCAEe,SAFf;AAAA,kCAGEC,WAHF;AAAA,UAGEA,WAHF,iCAGgB,SAHhB;;AAKA,UAAI,KAAKC,eAAL,IAAwB,KAAKC,qBAAL,CAA2B;AAAEJ,QAAAA,OAAO,EAAPA;AAAF,OAA3B,CAA5B,EAAqE;AACnE,aAAKK,oBAAL,CAA0B;AAAEL,UAAAA,OAAO,EAAPA;AAAF,SAA1B;AACA,YAAMM,UAAU,GAAG,KAAKR,KAAL,CAAWS,cAAX,EAAnB;;AACA,iCAAgC,KAAKC,YAAL,CAC9B,KAAKC,UADyB,EAE9BH,UAF8B,EAG9B,KAAKI,cAHyB,CAAhC;AAAA,YAAQC,IAAR,sBAAQA,IAAR;AAAA,YAAcC,KAAd,sBAAcA,KAAd;AAAA,YAAqBC,MAArB,sBAAqBA,MAArB;;AAKA,aAAKC,QAAL,GAAgBD,MAAhB;AAEA,aAAKE,WAAL,GACE,KAAKN,UAAL,GAAkB,CAAlB,IAAuBE,IAAI,CAACK,MAAL,GAAc,CAArC,GACI,KAAKC,eAAL,CAAqB;AACnBC,UAAAA,KAAK,EAAE,IADY;AAEnBP,UAAAA,IAAI,EAAJA,IAFmB;AAGnBQ,UAAAA,MAAM,EAAEC,WAAGC,SAHQ;AAInBC,UAAAA,IAAI,EAAEF,WAAGG,KAJU;AAKnBX,UAAAA,KAAK,EAALA,KALmB;AAMnBC,UAAAA,MAAM,EAANA;AANmB,SAArB,CADJ,GASI,KAAKI,eAAL,CAAqB;AACnBC,UAAAA,KAAK,EAAE,IADY;AAEnBP,UAAAA,IAAI,EAAE,CAAC,CAAD,CAFa;AAGnBQ,UAAAA,MAAM,EAAEC,WAAGC,SAHQ;AAInBC,UAAAA,IAAI,EAAEF,WAAGG,KAJU;AAKnBX,UAAAA,KAAK,EAAE,CALY;AAMnBC,UAAAA,MAAM,EAAE;AANW,SAArB,CAVN;AAkBD;;AACD,aAAO;AACLW,QAAAA,UAAU,EAAE,KAAKC,QADZ;AAELC,QAAAA,UAAU,EAAE,KAAKC,QAFZ;AAGLC,QAAAA,UAAU,EAAE,KAAKC,QAHZ;AAILC,QAAAA,YAAY,EAAE,sBAAQ7B,UAAR,CAJT;AAKL8B,QAAAA,aAAa,EAAE,sBAAQ7B,WAAR,CALV;AAML8B,QAAAA,aAAa,EAAE,KAAKjB,WANf;AAOLkB,QAAAA,gBAAgB,EAAE,KAAKC,iBAAL,EAPb;AAQLC,QAAAA,SAAS,EAAE,wBAASnC,OAAT,IAAoBA,OAApB,GAA8B;AARpC,OAAP;AAUD;;;WAED,8BAA2C;AACzC,aAAO;AACLoC,QAAAA,MAAM,EAAE,KAAKtC,KAAL,CAAWuC,mBAAX;AADH,OAAP;AAGD;;;WAED,sBAA8B;AAC5B,WAAKC,WAAL;AACA,aAAO,KAAKC,WAAL,EAAP;AACD;;;WAED,uBAA+B;AAC7B,kBAGI,KAAKzC,KAAL,CAAWC,cAAX,EAHJ;AAAA,6BACEyC,IADF;AAAA,UACEA,IADF,2BACS,KADT;AAAA,mCAEEC,UAFF;AAAA,UAEEA,UAFF,iCAEe,IAFf;;AAIA,aAAO,CACL,KAAK3C,KAAL,CAAW4C,eAAX,CAA2B;AACzBC,QAAAA,UAAU,EAAE,eADa;AAEzBC,QAAAA,YAAY,EAAEC,UAFW;AAGzBC,QAAAA,cAAc,EAAEC,UAHS;AAIzBC,QAAAA,aAAa,EAAEC,mCAJU;AAKzBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SALkB;AAOzBC,QAAAA,OAAO,EAAE,sBAAQZ,IAAR,EAAcC,UAAd;AAPgB,OAA3B,CADK,CAAP;AAWD;;;WAED,uBAAqB;AAAA;;AACnB,WAAKhB,QAAL,CAAc4B,OAAd;AACA,WAAK1B,QAAL,CAAc0B,OAAd;AACA,WAAKxB,QAAL,CAAcwB,OAAd;AACA,gCAAKtC,WAAL,wEAAkBsC,OAAlB;AACD;;;WAED,qCAAsC;AACpC,UAAMC,IAAI,GAAG,KAAKxD,KAAL,CAAWyD,SAAX,GAAuBC,MAApC;;AACA,+CAAyCF,IAAzC;AAAA,UAAOG,MAAP;AAAA,UAAeC,MAAf;AAAA,UAAuBC,MAAvB;AAAA,UAA+BC,MAA/B;;AACA,UAAMC,MAAM,GAAGF,MAAM,GAAGF,MAAxB;AACA,UAAMK,MAAM,GAAGF,MAAM,GAAGF,MAAxB;AAEA,WAAKK,qBAAL,CAA2BC,sBAA3B,CAAkD;AAChDC,QAAAA,IAAI,EAAE,QAD0C;AAEhD3C,QAAAA,IAAI,EAAE4C,sBAAcC,SAF4B;AAGhDC,QAAAA,UAAU,EAAE;AACVH,UAAAA,IAAI,EAAE,MADI;AAEVI,UAAAA,MAAM,EAAE;AAENC,YAAAA,KAAK,EAAElD,WAAGmD,WAFJ;AAGN5D,YAAAA,IAAI,EAAE,EAHA;AAINW,YAAAA,IAAI,EAAEF,WAAGG;AAJH,WAFE;AAQViD,UAAAA,IAAI,EAAE,CARI;AASVC,UAAAA,MAAM,EAAE,gBACNC,OADM,EAENC,UAFM,EAGNC,MAHM,EAINC,YAJM,EAKNC,MALM,EAMH;AACH,uDAAmBF,MAAnB;AAAA,gBAAOG,GAAP;AAAA,gBAAYC,GAAZ;;AACA,mBAAO,CAAC,CAACD,GAAG,GAAGtB,MAAP,IAAiBI,MAAlB,EAA0B,CAACmB,GAAG,GAAGtB,MAAP,IAAiBI,MAA3C,CAAP;AACD;AAlBS;AAHoC,OAAlD;AAwBD;;;WAED,uBAAsB;AAAA;;AACpB,UAAQ7C,eAAR,GAA4B,KAAKgE,eAAjC,CAAQhE,eAAR;AACA,UAAMiE,qBAAqB,GAAG;AAAErE,QAAAA,MAAM,EAAE,CAAV;AAAaD,QAAAA,KAAK,EAAE;AAApB,OAA9B;AAEA,WAAKa,QAAL,GAAgBR,eAAe,CAACiE,qBAAD,CAA/B;AACA,WAAKvD,QAAL,GAAgBV,eAAe,CAACiE,qBAAD,CAA/B;AACA,WAAKrD,QAAL,GAAgBZ,eAAe,CAACiE,qBAAD,CAA/B;AAGAC,MAAAA,SAAS,CAAC,UAACC,MAAD,EAAgC;AACxC,QAAA,MAAI,CAAC3D,QAAL,GAAgB4D,OAAO,CAACD,MAAM,CAAC,CAAD,CAAP,CAAvB;AACA,QAAA,MAAI,CAACzD,QAAL,GAAgB0D,OAAO,CAACD,MAAM,CAAC,CAAD,CAAP,CAAvB;AACA,QAAA,MAAI,CAACvD,QAAL,GAAgBwD,OAAO,CAACD,MAAM,CAAC,CAAD,CAAP,CAAvB;;AACA,QAAA,MAAI,CAACE,YAAL,CAAkBC,qBAAlB;;AACA,QAAA,MAAI,CAACD,YAAL,CAAkBE,YAAlB;AACD,OANQ,CAAT;;AAQA,eAASL,SAAT,CAAmBM,QAAnB,EAAyE;AACvE,YAAIC,WAAW,GAAG,CAAlB;AACA,YAAMC,YAAgC,GAAG,EAAzC;AACA,YAAMP,MAAM,GAAG,CACb,uFADa,EAEb,uFAFa,EAGb,uFAHa,CAAf;AAKAA,QAAAA,MAAM,CAACQ,GAAP,CAAW,UAACC,MAAD,EAAoB;AAC7B,cAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,UAAAA,KAAK,CAACE,WAAN,GAAoB,EAApB;AACAF,UAAAA,KAAK,CAACG,GAAN,GAAYJ,MAAZ;AACAF,UAAAA,YAAY,CAACO,IAAb,CAAkBJ,KAAlB;;AACAA,UAAAA,KAAK,CAACK,MAAN,GAAe,YAAM;AACnBT,YAAAA,WAAW;;AACX,gBAAIA,WAAW,KAAK,CAApB,EAAuB;AACrBD,cAAAA,QAAQ,CAACE,YAAD,CAAR;AACD;AACF,WALD;AAMD,SAXD;AAYD;;AAED,eAASN,OAAT,CAAiBS,KAAjB,EAA0C;AACxC,eAAO7E,eAAe,CAAC;AACrBN,UAAAA,IAAI,EAAEmF,KADe;AAErBlF,UAAAA,KAAK,EAAEkF,KAAK,CAAClF,KAFQ;AAGrBC,UAAAA,MAAM,EAAEiF,KAAK,CAACjF,MAHO;AAIrBuF,UAAAA,KAAK,EAAEhF,WAAGiF,eAJW;AAKrBC,UAAAA,KAAK,EAAElF,WAAGiF,eALW;AAMrBE,UAAAA,GAAG,EAAEnF,WAAGoF,MANa;AAOrBC,UAAAA,GAAG,EAAErF,WAAGoF;AAPa,SAAD,CAAtB;AASD;AACF;;;EAzKqCE,mB","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { getMask, rgb2arr } from '@antv/l7-utils';\nimport { create, isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { IPolygonLayerStyleOptions } from '../../core/interface';\nimport { polygonTriangulation } from '../../core/triangulation';\nimport ocean_frag from '../shaders/water/polygon_ocean_frag.glsl';\nimport ocean_vert from '../shaders/water/polygon_ocean_vert.glsl';\nexport default class OceanModel extends BaseModel {\n  private texture1: ITexture2D;\n  private texture2: ITexture2D;\n  private texture3: ITexture2D;\n  public getUninforms() {\n    const {\n      opacity = 1,\n      watercolor = '#6D99A8',\n      watercolor2 = '#0F121C',\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_texture1: this.texture1,\n      u_texture2: this.texture2,\n      u_texture3: this.texture3,\n      u_watercolor: rgb2arr(watercolor),\n      u_watercolor2: rgb2arr(watercolor2),\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n    };\n  }\n\n  public getAnimateUniforms(): IModelUniform {\n    return {\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.loadTexture();\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'polygon_ocean',\n        vertexShader: ocean_vert,\n        fragmentShader: ocean_frag,\n        triangulation: polygonTriangulation,\n        depth: { enable: false },\n\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.texture1.destroy();\n    this.texture2.destroy();\n    this.texture3.destroy();\n    this.dataTexture?.destroy();\n  }\n\n  protected registerBuiltinAttributes() {\n    const bbox = this.layer.getSource().extent;\n    const [minLng, minLat, maxLng, maxLat] = bbox;\n    const lngLen = maxLng - minLng;\n    const latLen = maxLat - minLat;\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'linear',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          const [lng, lat] = vertex;\n          return [(lng - minLng) / lngLen, (lat - minLat) / latLen];\n        },\n      },\n    });\n  }\n\n  private loadTexture() {\n    const { createTexture2D } = this.rendererService;\n    const defaultTextureOptions = { height: 0, width: 0 };\n    // 默认索引为 undefined，所以单独赋值\n    this.texture1 = createTexture2D(defaultTextureOptions);\n    this.texture2 = createTexture2D(defaultTextureOptions);\n    this.texture3 = createTexture2D(defaultTextureOptions);\n\n    // 加载完 image 后单独给 texture f赋值\n    initImage((images: HTMLImageElement[]) => {\n      this.texture1 = initTex(images[0]);\n      this.texture2 = initTex(images[1]);\n      this.texture3 = initTex(images[2]);\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n    });\n\n    function initImage(callback: (loadedImages: HTMLImageElement[]) => void) {\n      let loadedCount = 0;\n      const loadedImages: HTMLImageElement[] = [];\n      const images = [\n        'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ',\n        'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*MJ22QbpuCzIAAAAAAAAAAAAAARQnAQ',\n        'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*-z2HSIVDsHIAAAAAAAAAAAAAARQnAQ',\n      ];\n      images.map((imgSrc: string) => {\n        const image = new Image();\n        image.crossOrigin = '';\n        image.src = imgSrc;\n        loadedImages.push(image);\n        image.onload = () => {\n          loadedCount++;\n          if (loadedCount === 3) {\n            callback(loadedImages);\n          }\n        };\n      });\n    }\n\n    function initTex(image: HTMLImageElement) {\n      return createTexture2D({\n        data: image,\n        width: image.width,\n        height: image.height,\n        wrapS: gl.MIRRORED_REPEAT,\n        wrapT: gl.MIRRORED_REPEAT,\n        min: gl.LINEAR,\n        mag: gl.LINEAR,\n      });\n    }\n  }\n}\n"],"file":"ocean.js"}