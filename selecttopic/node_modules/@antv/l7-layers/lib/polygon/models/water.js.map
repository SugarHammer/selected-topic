{"version":3,"sources":["../../../src/polygon/models/water.ts"],"names":["WaterModel","layer","getLayerConfig","opacity","speed","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","gl","LUMINANCE","type","FLOAT","u_texture","texture","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_speed","u_opacity","u_time","getLayerAnimateTime","loadTexture","buildModels","mask","maskInside","buildLayerModel","moduleName","vertexShader","water_vert","fragmentShader","water_frag","triangulation","polygonTriangulation","depth","enable","stencil","destroy","bbox","getSource","extent","minLng","minLat","maxLng","maxLat","lngLen","latLen","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","STATIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","normal","lng","lat","waterTexture","rendererService","image","Image","crossOrigin","console","warn","src","onload","wrapS","MIRRORED_REPEAT","wrapT","min","LINEAR","mag","layerService","updateLayerRenderList","renderLayers","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { getMask } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { IPolygonLayerStyleOptions } from '../../core/interface';\nimport { polygonTriangulation } from '../../core/triangulation';\nimport water_frag from '../shaders/water/polygon_water_frag.glsl';\nimport water_vert from '../shaders/water/polygon_water_vert.glsl';\nexport default class WaterModel extends BaseModel {\n  private texture: ITexture2D;\n  public getUninforms() {\n    const {\n      opacity = 1,\n      speed = 0.5,\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_texture: this.texture,\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n      u_speed: speed,\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n    };\n  }\n\n  public getAnimateUniforms(): IModelUniform {\n    return {\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.loadTexture();\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'polygon_water',\n        vertexShader: water_vert,\n        fragmentShader: water_frag,\n        triangulation: polygonTriangulation,\n        depth: { enable: false },\n\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.texture.destroy();\n    this.dataTexture?.destroy();\n  }\n\n  protected registerBuiltinAttributes() {\n    const bbox = this.layer.getSource().extent;\n    const [minLng, minLat, maxLng, maxLat] = bbox;\n    const lngLen = maxLng - minLng;\n    const latLen = maxLat - minLat;\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'linear',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          const [lng, lat] = vertex;\n          return [(lng - minLng) / lngLen, (lat - minLat) / latLen];\n        },\n      },\n    });\n  }\n\n  private loadTexture() {\n    const {\n      waterTexture,\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 0,\n      width: 0,\n    });\n    const image = new Image();\n    image.crossOrigin = '';\n    if (waterTexture) {\n      // custom texture\n      console.warn(\n        'L7 recommend：https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ',\n      );\n      image.src = waterTexture;\n    } else {\n      // default texture\n      image.src =\n        'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ';\n    }\n\n    image.onload = () => {\n      this.texture = createTexture2D({\n        data: image,\n        width: image.width,\n        height: image.height,\n        wrapS: gl.MIRRORED_REPEAT,\n        wrapT: gl.MIRRORED_REPEAT,\n        min: gl.LINEAR,\n        mag: gl.LINEAR,\n      });\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n    };\n  }\n}\n"],"file":"water.js"}