"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var water_frag = "\nuniform sampler2D u_texture;\nuniform float u_time;\nuniform float u_speed: 1.0;\nuniform float u_opacity: 1.0;\n\nvarying vec4 v_Color;\nvarying vec2 v_uv;\nvarying mat4 styleMappingMat; // \u4F20\u9012\u4ECE\u7247\u5143\u4E2D\u4F20\u9012\u7684\u6620\u5C04\u6570\u636E\n\n#pragma include \"picking\"\n\n  float rand(vec2 n) { return 0.5 + 0.5 * fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453); }\n\n  float water(vec3 p) {\n    float t = u_time * u_speed;\n    p.z += t * 2.; p.x += t * 2.;\n    vec3 c1 = texture2D(u_texture, p.xz / 30.).xyz;\n    p.z += t * 3.; p.x += t * 0.52;\n    vec3 c2 = texture2D(u_texture, p.xz / 30.).xyz;\n    p.z += t * 4.; p.x += t * 0.8;\n    vec3 c3 = texture2D(u_texture, p.xz / 30.).xyz;\n    c1 += c2 - c3;\n    float z = (c1.x + c1.y + c1.z) / 3.;\n    return p.y + z / 4.;\n  }\n\n  float map(vec3 p) {\n    float d = 100.0;\n    d = water(p);\n    return d;\n  }\n\n  float intersect(vec3 ro, vec3 rd) {\n    float d = 0.0;\n    for (int i = 0; i <= 100; i++) {\n      float h = map(ro + rd * d);\n      if (h < 0.1) return  d;\n      d += h;\n    }\n    return 0.0;\n  }\n  \n  vec3 norm(vec3 p) {\n    float eps = .1;\n    return normalize(vec3(\n      map(p + vec3(eps, 0, 0)) - map(p + vec3(-eps, 0, 0)),\n      map(p + vec3(0, eps, 0)) - map(p + vec3(0, -eps, 0)),\n      map(p + vec3(0, 0, eps)) - map(p + vec3(0, 0, -eps))\n    ));\n  } \n\n  float calSpc() {\n    vec3 l1 = normalize(vec3(1, 1, 1));\n    vec3 ro = vec3(-3, 20, -8);\n    vec3 rc = vec3(0, 0, 0);\n    vec3 ww = normalize(rc - ro);\n    vec3 uu = normalize(cross(vec3(0,1,0), ww));\n    vec3 vv = normalize(cross(rc - ro, uu));\n    vec3 rd = normalize(uu * v_uv.x + vv * v_uv.y + ww);\n    float d = intersect(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 n = norm(p);\n    float spc = pow(max(0.0, dot(reflect(l1, n), rd)), 30.0);\n    return spc;\n  }\n\nvoid main() {\n  float opacity = styleMappingMat[0][0];\n  gl_FragColor = v_Color;\n  gl_FragColor.a *= opacity;\n\n  float spc = calSpc();\n  gl_FragColor += spc * 0.4;\n}\n";
var water_vert = "attribute vec4 a_Color;\nattribute vec2 a_uv;\nattribute vec3 a_Position;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\n\nvarying vec4 v_Color;\nvarying vec2 v_uv;\nuniform float u_opacity: 1.0;\nvarying mat4 styleMappingMat; // \u7528\u4E8E\u5C06\u5728\u9876\u70B9\u7740\u8272\u5668\u4E2D\u8BA1\u7B97\u597D\u7684\u6837\u5F0F\u503C\u4F20\u9012\u7ED9\u7247\u5143\n\n#pragma include \"styleMapping\"\n#pragma include \"styleMappingCalOpacity\"\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvoid main() {\n  v_uv = a_uv;\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\nstyleMappingMat = mat4(\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\n    0.0, 0.0, 0.0, 0.0\n  );\n\n  float rowCount = u_cellTypeLayout[0][0];    // \u5F53\u524D\u7684\u6570\u636E\u7EB9\u7406\u6709\u51E0\u884C\n  float columnCount = u_cellTypeLayout[0][1]; // \u5F53\u770B\u5230\u6570\u636E\u7EB9\u7406\u6709\u51E0\u5217\n  float columnWidth = 1.0/columnCount;  // \u5217\u5BBD\n  float rowHeight = 1.0/rowCount;       // \u884C\u9AD8\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\n  float id = a_vertexId; // \u7B2Cn\u4E2A\u9876\u70B9\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \u8D77\u59CB\u70B9\u5728\u7B2C\u51E0\u884C\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \u8D77\u59CB\u70B9\u5728\u7B2C\u51E0\u5217\n  \n  // cell \u56FA\u5B9A\u987A\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \n  // \u6309\u987A\u5E8F\u4ECE cell \u4E2D\u53D6\u503C\u3001\u82E5\u6CA1\u6709\u5219\u81EA\u52A8\u5F80\u4E0B\u53D6\u503C\n  float textureOffset = 0.0; // \u5728 cell \u4E2D\u53D6\u503C\u7684\u504F\u79FB\u91CF\n\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\n  styleMappingMat[0][0] = opacityAndOffset.r;\n  textureOffset = opacityAndOffset.g;\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\n\n  v_Color = a_Color;\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n  }\n\n  setPickingColor(a_PickingColor);\n}\n\n";

var WaterModel = function (_BaseModel) {
  (0, _inherits2.default)(WaterModel, _BaseModel);

  var _super = _createSuper(WaterModel);

  function WaterModel() {
    var _this;

    (0, _classCallCheck2.default)(this, WaterModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "texture", void 0);
    return _this;
  }

  (0, _createClass2.default)(WaterModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          _ref$speed = _ref.speed,
          speed = _ref$speed === void 0 ? 0.5 : _ref$speed;

      if (this.dataTextureTest && this.dataTextureNeedUpdate({
        opacity: opacity
      })) {
        this.judgeStyleAttributes({
          opacity: opacity
        });
        var encodeData = this.layer.getEncodedData();

        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),
            data = _this$calDataFrame.data,
            width = _this$calDataFrame.width,
            height = _this$calDataFrame.height;

        this.rowCount = height;
        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({
          flipY: true,
          data: data,
          format: _l7Core.gl.LUMINANCE,
          type: _l7Core.gl.FLOAT,
          width: width,
          height: height
        }) : this.createTexture2D({
          flipY: true,
          data: [1],
          format: _l7Core.gl.LUMINANCE,
          type: _l7Core.gl.FLOAT,
          width: 1,
          height: 1
        });
      }

      return {
        u_texture: this.texture,
        u_dataTexture: this.dataTexture,
        u_cellTypeLayout: this.getCellTypeLayout(),
        u_speed: speed,
        u_opacity: (0, _isNumber2.default)(opacity) ? opacity : 1.0
      };
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      return {
        u_time: this.layer.getLayerAnimateTime()
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      this.loadTexture();
      return this.buildModels();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      var _ref2 = this.layer.getLayerConfig(),
          _ref2$mask = _ref2.mask,
          mask = _ref2$mask === void 0 ? false : _ref2$mask,
          _ref2$maskInside = _ref2.maskInside,
          maskInside = _ref2$maskInside === void 0 ? true : _ref2$maskInside;

      return [this.layer.buildLayerModel({
        moduleName: 'polygon_water',
        vertexShader: water_vert,
        fragmentShader: water_frag,
        triangulation: _triangulation.polygonTriangulation,
        depth: {
          enable: false
        },
        stencil: (0, _l7Utils.getMask)(mask, maskInside)
      })];
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$dataTexture;

      this.texture.destroy();
      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var bbox = this.layer.getSource().extent;

      var _bbox = (0, _slicedToArray2.default)(bbox, 4),
          minLng = _bbox[0],
          minLat = _bbox[1],
          maxLng = _bbox[2],
          maxLat = _bbox[3];

      var lngLen = maxLng - minLng;
      var latLen = maxLat - minLat;
      this.styleAttributeService.registerStyleAttribute({
        name: 'linear',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_uv',
          buffer: {
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            var _vertex = (0, _slicedToArray2.default)(vertex, 2),
                lng = _vertex[0],
                lat = _vertex[1];

            return [(lng - minLng) / lngLen, (lat - minLat) / latLen];
          }
        }
      });
    }
  }, {
    key: "loadTexture",
    value: function loadTexture() {
      var _this2 = this;

      var _ref3 = this.layer.getLayerConfig(),
          waterTexture = _ref3.waterTexture;

      var createTexture2D = this.rendererService.createTexture2D;
      this.texture = createTexture2D({
        height: 0,
        width: 0
      });
      var image = new Image();
      image.crossOrigin = '';

      if (waterTexture) {
        console.warn('L7 recommend：https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ');
        image.src = waterTexture;
      } else {
        image.src = 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ';
      }

      image.onload = function () {
        _this2.texture = createTexture2D({
          data: image,
          width: image.width,
          height: image.height,
          wrapS: _l7Core.gl.MIRRORED_REPEAT,
          wrapT: _l7Core.gl.MIRRORED_REPEAT,
          min: _l7Core.gl.LINEAR,
          mag: _l7Core.gl.LINEAR
        });

        _this2.layerService.updateLayerRenderList();

        _this2.layerService.renderLayers();
      };
    }
  }]);
  return WaterModel;
}(_BaseModel2.default);

exports.default = WaterModel;
//# sourceMappingURL=water.js.map