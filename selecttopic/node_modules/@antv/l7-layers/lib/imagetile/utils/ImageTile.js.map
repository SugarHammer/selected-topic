{"version":3,"sources":["../../../src/imagetile/utils/ImageTile.ts"],"names":["r2d","Math","PI","tileURLRegex","ImageTile","key","url","container","sceneContainer","name","tile","split","map","v","Number","urlParams","x","y","z","imageSrc","getTileURL","lnglatBounds","tileLnglatBounds","west","getWest","south","getSouth","east","getEast","north","getNorth","imageLayer","ImageLayer","zIndex","source","parser","type","extent","setContainer","init","clearModels","destroy","path","s","String","fromCharCode","floor","random","lastIndex","replace","value","e","tile2lng","w","tile2lat","n","pow","atan","exp"],"mappings":"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","sourcesContent":["import { LngLatBounds, toBounds, toLngLatBounds } from '@antv/geo-coord';\nimport { Container } from 'inversify';\nimport ImageLayer from '../../image';\n\ninterface IUrlParams {\n  x: number;\n  y: number;\n  z: number;\n  s?: string;\n}\n\nconst r2d = 180 / Math.PI;\nconst tileURLRegex = /\\{([zxy])\\}/g;\n\nexport default class ImageTile {\n  public tile: number[]; // 当前图片瓦片的索引\n  public name: string;\n  public imageLayer: any;\n  constructor(\n    key: string,\n    url: string,\n    container: Container,\n    sceneContainer: Container,\n  ) {\n    this.name = key;\n    this.tile = key.split('_').map((v) => Number(v));\n\n    const urlParams = {\n      x: this.tile[0],\n      y: this.tile[1],\n      z: this.tile[2],\n    };\n    const imageSrc = this.getTileURL(urlParams, url);\n\n    const lnglatBounds = this.tileLnglatBounds(this.tile);\n    const west = lnglatBounds.getWest();\n    const south = lnglatBounds.getSouth();\n    const east = lnglatBounds.getEast();\n    const north = lnglatBounds.getNorth();\n\n    const imageLayer = new ImageLayer({ zIndex: -999 });\n    imageLayer.source(\n      // 'https://gw.alipayobjects.com/zos/rmsportal/FnHFeFklTzKDdUESRNDv.jpg',\n      imageSrc,\n      {\n        parser: {\n          type: 'image',\n          // extent: [121.168, 30.2828, 121.384, 30.4219],\n          extent: [west, south, east, north],\n        },\n      },\n    );\n\n    imageLayer.setContainer(container, sceneContainer);\n    imageLayer.init();\n\n    this.imageLayer = imageLayer;\n  }\n\n  public destroy() {\n    this.imageLayer.clearModels();\n    this.imageLayer.destroy();\n  }\n\n  public getTileURL(urlParams: IUrlParams, path: string) {\n    if (!urlParams.s) {\n      // Default to a random choice of a, b or c\n      urlParams.s = String.fromCharCode(97 + Math.floor(Math.random() * 3));\n    }\n\n    tileURLRegex.lastIndex = 0;\n    return path.replace(tileURLRegex, (value, key: any) => {\n      // @ts-ignore\n      return urlParams[key];\n    });\n  }\n\n  // Get tile bounds in WGS84 coordinates\n  public tileLnglatBounds(tile: number[]) {\n    const e = this.tile2lng(tile[0] + 1, tile[2]);\n    const w = this.tile2lng(tile[0], tile[2]);\n    const s = this.tile2lat(tile[1] + 1, tile[2]);\n    const n = this.tile2lat(tile[1], tile[2]);\n    return toLngLatBounds([w, n], [e, s]);\n  }\n\n  public tile2lng(x: number, z: number) {\n    return (x / Math.pow(2, z)) * 360 - 180;\n  }\n\n  public tile2lat(y: number, z: number) {\n    const n = Math.PI - (2 * Math.PI * y) / Math.pow(2, z);\n    return r2d * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  }\n}\n"],"file":"ImageTile.js"}