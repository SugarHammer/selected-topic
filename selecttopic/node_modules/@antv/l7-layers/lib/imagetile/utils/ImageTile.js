"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _geoCoord = require("@antv/geo-coord");

var _image = _interopRequireDefault(require("../../image"));

var r2d = 180 / Math.PI;
var tileURLRegex = /\{([zxy])\}/g;

var ImageTile = function () {
  function ImageTile(key, url, container, sceneContainer) {
    (0, _classCallCheck2.default)(this, ImageTile);
    (0, _defineProperty2.default)(this, "tile", void 0);
    (0, _defineProperty2.default)(this, "name", void 0);
    (0, _defineProperty2.default)(this, "imageLayer", void 0);
    this.name = key;
    this.tile = key.split('_').map(function (v) {
      return Number(v);
    });
    var urlParams = {
      x: this.tile[0],
      y: this.tile[1],
      z: this.tile[2]
    };
    var imageSrc = this.getTileURL(urlParams, url);
    var lnglatBounds = this.tileLnglatBounds(this.tile);
    var west = lnglatBounds.getWest();
    var south = lnglatBounds.getSouth();
    var east = lnglatBounds.getEast();
    var north = lnglatBounds.getNorth();
    var imageLayer = new _image.default({
      zIndex: -999
    });
    imageLayer.source(imageSrc, {
      parser: {
        type: 'image',
        extent: [west, south, east, north]
      }
    });
    imageLayer.setContainer(container, sceneContainer);
    imageLayer.init();
    this.imageLayer = imageLayer;
  }

  (0, _createClass2.default)(ImageTile, [{
    key: "destroy",
    value: function destroy() {
      this.imageLayer.clearModels();
      this.imageLayer.destroy();
    }
  }, {
    key: "getTileURL",
    value: function getTileURL(urlParams, path) {
      if (!urlParams.s) {
        urlParams.s = String.fromCharCode(97 + Math.floor(Math.random() * 3));
      }

      tileURLRegex.lastIndex = 0;
      return path.replace(tileURLRegex, function (value, key) {
        return urlParams[key];
      });
    }
  }, {
    key: "tileLnglatBounds",
    value: function tileLnglatBounds(tile) {
      var e = this.tile2lng(tile[0] + 1, tile[2]);
      var w = this.tile2lng(tile[0], tile[2]);
      var s = this.tile2lat(tile[1] + 1, tile[2]);
      var n = this.tile2lat(tile[1], tile[2]);
      return (0, _geoCoord.toLngLatBounds)([w, n], [e, s]);
    }
  }, {
    key: "tile2lng",
    value: function tile2lng(x, z) {
      return x / Math.pow(2, z) * 360 - 180;
    }
  }, {
    key: "tile2lat",
    value: function tile2lat(y, z) {
      var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);
      return r2d * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));
    }
  }]);
  return ImageTile;
}();

exports.default = ImageTile;
//# sourceMappingURL=ImageTile.js.map