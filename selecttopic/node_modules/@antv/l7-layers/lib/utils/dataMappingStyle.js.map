{"version":3,"sources":["../../src/utils/dataMappingStyle.ts"],"names":["WIDTH","registerStyleAttribute","fieldName","layer","field","values","updateOptions","updateStyleAttribute","handleStyleDataMapping","configToUpdate","opacity","handleStyleFloat","strokeWidth","strokeOpacity","stroke","handleStyleColor","offsets","handleStyleOffsets","textOffset","thetaOffset","styleFloat","value","undefined","length","styleOffsets","styleColor"],"mappings":"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","sourcesContent":["import {\n  gl,\n  ILayer,\n  IStyleAttributeUpdateOptions,\n  ITexture2D,\n  StyleAttributeField,\n  StyleAttributeOption,\n} from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport { isArray, isFunction, isNumber, isString } from 'lodash';\n/**\n * 该文件中的工具方法主要用于对 style 中的属性进行 数据映射\n */\n\ninterface IConfigToUpdate {\n  thetaOffset?: any;\n  opacity?: any;\n  strokeOpacity?: any;\n  stroke?: any;\n  strokeWidth?: any;\n  offsets?: any;\n  textOffset?: any;\n}\n\n// 画布默认的宽度\nconst WIDTH = 1024;\n\n/**\n * 当 style 中使用的 opacity 不是常数的时候根据数据进行映射\n * @param field\n * @param values\n * @param updateOptions\n */\nfunction registerStyleAttribute(\n  fieldName: string,\n  layer: ILayer,\n  field: StyleAttributeField,\n  values?: StyleAttributeOption,\n  updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n) {\n  layer.updateStyleAttribute(fieldName, field, values, updateOptions);\n}\n\n/**\n * 当样式发生变化时判断是否需要进行数据映射\n * @param configToUpdate\n * @param layer\n */\nfunction handleStyleDataMapping(configToUpdate: IConfigToUpdate, layer: any) {\n  if (configToUpdate.opacity) {\n    // 处理 style 中 opacity 属性的数据映射\n    handleStyleFloat('opacity', layer, configToUpdate.opacity);\n  }\n\n  if (configToUpdate.strokeWidth) {\n    // 处理 style 中 strokeWidth 属性的数据映射\n\n    handleStyleFloat('strokeWidth', layer, configToUpdate.strokeWidth);\n  }\n\n  if (configToUpdate.strokeOpacity) {\n    // 处理 style 中 strokeOpacity 属性的数据映射\n    handleStyleFloat('strokeOpacity', layer, configToUpdate.strokeOpacity);\n  }\n\n  if (configToUpdate.stroke) {\n    // 处理 style 中 stroke (strokeColor) 属性的数据映射\n    handleStyleColor('stroke', layer, configToUpdate.stroke);\n  }\n\n  if (configToUpdate.offsets) {\n    // 处理 style 中 offsets 属性的数据映射\n    handleStyleOffsets('offsets', layer, configToUpdate.offsets);\n  }\n\n  if (configToUpdate.textOffset) {\n    // 处理 style 中 textOffset 属性的数据映射\n    handleStyleOffsets('textOffset', layer, configToUpdate.textOffset);\n  }\n\n  if (configToUpdate.thetaOffset) {\n    // 处理 style 中 thetaOffset 属性的数据映射\n    handleStyleFloat('thetaOffset', layer, configToUpdate.thetaOffset);\n  }\n}\n\n/**\n * 根据传入参数 float 的类型和值做相应的操作\n */\nfunction handleStyleFloat(fieldName: string, layer: ILayer, styleFloat: any) {\n  if (isString(styleFloat)) {\n    // 如果传入的 styleFloat 是 string 类型，那么就认为其对应的是传入数据的字段\n    registerStyleAttribute(fieldName, layer, styleFloat, (value: any) => {\n      return value;\n    });\n  } else if (isNumber(styleFloat)) {\n    // 传入 number、默认值处理\n    registerStyleAttribute(fieldName, layer, [styleFloat], undefined);\n  } else if (isArray(styleFloat) && styleFloat.length === 2) {\n    // 传入的 styleFloat 是长度为 2 的数组\n    if (isString(styleFloat[0]) && isFunction(styleFloat[1])) {\n      // 字段回调函数 [string, callback]\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else if (\n      isString(styleFloat[0]) &&\n      isArray(styleFloat[1]) &&\n      isNumber(styleFloat[1][0]) &&\n      isNumber(styleFloat[1][1])\n    ) {\n      // 字段映射 [string, [start: number, end: number]]\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else {\n      // 兼容\n      registerStyleAttribute(fieldName, layer, [1.0], undefined);\n    }\n  } else {\n    // 兼容\n    registerStyleAttribute(fieldName, layer, [1.0], undefined);\n  }\n}\n/**\n * 根据传入参数 offsets 的类型和值做相应的操作\n * @param fieldName\n * @param layer\n * @param styleOffsets\n */\nfunction handleStyleOffsets(\n  fieldName: string,\n  layer: ILayer,\n  styleOffsets: any,\n) {\n  if (isString(styleOffsets)) {\n    // 如果传入的 styleOffsets 是 string 类型，那么就认为其对应的是传入数据的字段\n    registerStyleAttribute(fieldName, layer, styleOffsets, (value: any) => {\n      return value;\n    });\n  } else if (\n    isArray(styleOffsets) &&\n    styleOffsets.length === 2 &&\n    isString(styleOffsets[0]) &&\n    isFunction(styleOffsets[1])\n  ) {\n    // 字段回调函数 [string, callback]\n    registerStyleAttribute(fieldName, layer, styleOffsets[0], styleOffsets[1]);\n  } else if (\n    isArray(styleOffsets) &&\n    styleOffsets.length === 2 &&\n    isNumber(styleOffsets[0]) &&\n    isNumber(styleOffsets[1])\n  ) {\n    // 字段映射 [string, [start: number, end: number]]\n    registerStyleAttribute(fieldName, layer, styleOffsets, undefined);\n  } else {\n    // 兼容\n    registerStyleAttribute(fieldName, layer, [0, 0], undefined);\n  }\n}\n\n/**\n * 根据传入参数 stroke / color 的类型和值做相应的操作\n * @param fieldName\n * @param layer\n * @param styleColor\n */\nfunction handleStyleColor(fieldName: string, layer: ILayer, styleColor: any) {\n  if (isString(styleColor)) {\n    // 如果传入的 styleColor 是 string 类型，那么就认为其是颜色值\n    registerStyleAttribute(fieldName, layer, styleColor, undefined);\n  } else if (isArray(styleColor) && styleColor.length === 2) {\n    // 传入的 styleColor 是长度为 2 的数组\n    if (isString(styleColor[0]) && isFunction(styleColor[1])) {\n      // 字段回调函数 [string, callback]\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else if (\n      isString(styleColor[0]) &&\n      isArray(styleColor[1]) &&\n      styleColor[1].length > 0\n    ) {\n      // 字段映射 [string, [start: string, end: string]]\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else {\n      // 兼容\n      registerStyleAttribute(fieldName, layer, '#fff', undefined);\n    }\n  } else {\n    // 兼容\n    registerStyleAttribute(fieldName, layer, '#fff', undefined);\n  }\n}\n\nexport { handleStyleDataMapping, handleStyleFloat, handleStyleColor };\n"],"file":"dataMappingStyle.js"}