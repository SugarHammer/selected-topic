{"version":3,"sources":["../../src/utils/multiPassRender.ts"],"names":["normalizePasses","passes","map","pass","createMultiPassRenderer","layer","postProcessingPassFactory","normalPassFactory","multiPassRenderer","getLayerConfig","enablePicking","enableTAA","add","forEach","passName","initializationOptions"],"mappings":";;;;;;;;;;;;AAaO,SAASA,eAAT,CACLC,MADK,EAEL;AACA,SAAOA,MAAM,CAACC,GAAP,CAAW,UAACC,IAAD,EAAyD;AACzE,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAG,CAACA,IAAD,EAAO,EAAP,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GALM,CAAP;AAMD;;AAMM,SAASC,uBAAT,CACLC,KADK,EAELJ,MAFK,EAGLK,yBAHK,EAILC,iBAJK,EAKL;AACA,MAAMC,iBAAiB,GAAGH,KAAK,CAACG,iBAAhC;;AACA,8BAAqCH,KAAK,CAACI,cAAN,EAArC;AAAA,MAAQC,aAAR,yBAAQA,aAAR;AAAA,MAAuBC,SAAvB,yBAAuBA,SAAvB;;AAQA,MAAIA,SAAJ,EAAe;AACbH,IAAAA,iBAAiB,CAACI,GAAlB,CAAsBL,iBAAiB,CAAC,KAAD,CAAvC;AACD,GAFD,MAEO;AAELC,IAAAA,iBAAiB,CAACI,GAAlB,CAAsBL,iBAAiB,CAAC,QAAD,CAAvC;AACD;;AAGDP,EAAAA,eAAe,CAACC,MAAD,CAAf,CAAwBY,OAAxB,CACE,UAACV,IAAD,EAAgD;AAC9C,6CAA0CA,IAA1C;AAAA,QAAOW,QAAP;AAAA,QAAiBC,qBAAjB;;AACAP,IAAAA,iBAAiB,CAACI,GAAlB,CACEN,yBAAyB,CAACQ,QAAD,CAD3B,EAEEC,qBAFF;AAID,GAPH;AAWAP,EAAAA,iBAAiB,CAACI,GAAlB,CAAsBN,yBAAyB,CAAC,MAAD,CAA/C;AAEA,SAAOE,iBAAP;AACD","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  IPass,\n  IPostProcessingPass,\n  IRendererService,\n  TYPES,\n} from '@antv/l7-core';\n\n/**\n * 'blurH' -> ['blurH', {}]\n */\nexport function normalizePasses(\n  passes: Array<string | [string, { [key: string]: unknown }]>,\n) {\n  return passes.map((pass: string | [string, { [key: string]: unknown }]) => {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n    return pass;\n  });\n}\n\n/**\n * 默认添加 ClearPass、RenderPass\n * 以及 PostProcessing 中的最后一个 CopyPass\n */\nexport function createMultiPassRenderer(\n  layer: ILayer,\n  passes: Array<string | [string, { [key: string]: unknown }]>,\n  postProcessingPassFactory: (name: string) => IPostProcessingPass<unknown>,\n  normalPassFactory: (name: string) => IPass<unknown>,\n) {\n  const multiPassRenderer = layer.multiPassRenderer;\n  const { enablePicking, enableTAA } = layer.getLayerConfig();\n\n  // picking pass if enabled\n  // if (enablePicking) {\n  //   multiPassRenderer.add(normalPassFactory('pixelPicking'));\n  // }\n\n  // use TAA pass if enabled instead of render pass\n  if (enableTAA) {\n    multiPassRenderer.add(normalPassFactory('taa'));\n  } else {\n    // render all layers in this pass\n    multiPassRenderer.add(normalPassFactory('render'));\n  }\n\n  // post processing\n  normalizePasses(passes).forEach(\n    (pass: [string, { [key: string]: unknown }]) => {\n      const [passName, initializationOptions] = pass;\n      multiPassRenderer.add(\n        postProcessingPassFactory(passName),\n        initializationOptions,\n      );\n    },\n  );\n\n  // 末尾为固定的 CopyPass\n  multiPassRenderer.add(postProcessingPassFactory('copy'));\n\n  return multiPassRenderer;\n}\n"],"file":"multiPassRender.js"}