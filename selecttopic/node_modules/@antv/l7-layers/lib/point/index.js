"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _BaseLayer2 = _interopRequireDefault(require("../core/BaseLayer"));

var _index = _interopRequireDefault(require("./models/index"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var PointLayer = function (_BaseLayer) {
  (0, _inherits2.default)(PointLayer, _BaseLayer);

  var _super = _createSuper(PointLayer);

  function PointLayer() {
    var _this;

    (0, _classCallCheck2.default)(this, PointLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", 'PointLayer');
    return _this;
  }

  (0, _createClass2.default)(PointLayer, [{
    key: "buildModels",
    value: function buildModels() {
      var modelType = this.getModelType();
      this.layerModel = new _index.default[modelType](this);
      this.models = this.layerModel.initModels();
    }
  }, {
    key: "rebuildModels",
    value: function rebuildModels() {
      this.models = this.layerModel.buildModels();
    }
  }, {
    key: "getModelTypeWillEmptyData",
    value: function getModelTypeWillEmptyData() {
      if (this.shapeOption) {
        var _this$shapeOption = this.shapeOption,
            field = _this$shapeOption.field,
            values = _this$shapeOption.values;

        var _this$getLayerConfig = this.getLayerConfig(),
            shape2d = _this$getLayerConfig.shape2d,
            shape3d = _this$getLayerConfig.shape3d;

        var iconMap = this.iconService.getIconMap();

        if (field && (shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(field)) !== -1) {
          return 'fill';
        }

        if (values && values instanceof Array) {
          var _iterator = _createForOfIteratorHelper(values),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var v = _step.value;

              if (typeof v === 'string' && iconMap.hasOwnProperty(v)) {
                return 'image';
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }

      return 'normal';
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      var type = this.getModelType();
      var defaultConfig = {
        fillImage: {},
        normal: {
          blend: 'additive'
        },
        radar: {},
        simplePoint: {},
        fill: {
          blend: 'normal'
        },
        extrude: {},
        image: {},
        icon: {},
        text: {
          blend: 'normal'
        }
      };
      return defaultConfig[type];
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      var PointTypes = ['fillImage', 'fill', 'radar', 'image', 'normal', 'simplePoint', 'extrude', 'text', 'icon'];

      if (this.layerType && PointTypes.includes(this.layerType)) {
        return this.layerType;
      }

      var layerData = this.getEncodedData();

      var _this$getLayerConfig2 = this.getLayerConfig(),
          shape2d = _this$getLayerConfig2.shape2d,
          shape3d = _this$getLayerConfig2.shape3d;

      var iconMap = this.iconService.getIconMap();
      var item = layerData.find(function (fe) {
        return fe.hasOwnProperty('shape');
      });

      if (!item) {
        return this.getModelTypeWillEmptyData();
      } else {
        var shape = item.shape;

        if (shape === 'dot') {
          return 'normal';
        }

        if (shape === 'simple') {
          return 'simplePoint';
        }

        if (shape === 'radar') {
          return 'radar';
        }

        if (shape === 'fillImage') {
          return 'fillImage';
        }

        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
          return 'fill';
        }

        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {
          return 'extrude';
        }

        if (iconMap.hasOwnProperty(shape)) {
          return 'image';
        }

        if (this.fontService.getGlyph(shape) !== '') {
          return 'icon';
        }

        return 'text';
      }
    }
  }]);
  return PointLayer;
}(_BaseLayer2.default);

exports.default = PointLayer;
//# sourceMappingURL=index.js.map