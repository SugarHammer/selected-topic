"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

var _l7Maps = require("@antv/l7-maps");

var _glMatrix = require("gl-matrix");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var waveFillFrag = "\nuniform float u_additive;\n\nvarying mat4 styleMappingMat; // \u4F20\u9012\u4ECE\u7247\u5143\u4E2D\u4F20\u9012\u7684\u6620\u5C04\u6570\u636E\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\nuniform float u_time;\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\n\n#pragma include \"sdf_2d\"\n#pragma include \"picking\"\n\n\nvoid main() {\n\n  vec4 textrueStroke = vec4(\n    styleMappingMat[1][0],\n    styleMappingMat[1][1],\n    styleMappingMat[1][2],\n    styleMappingMat[1][3]\n  );\n\n  float opacity = styleMappingMat[0][0];\n  float stroke_opacity = styleMappingMat[0][1];\n  float strokeWidth = styleMappingMat[0][2];\n  vec4 strokeColor = textrueStroke == vec4(0) ? v_color : textrueStroke;\n\n  float r = v_radius / (v_radius + strokeWidth);\n\n  // 'circle'\n  float outer_df = sdCircle(v_data.xy, 1.0);\n  float inner_df = sdCircle(v_data.xy, r);\n \n  float d = length(v_data.xy);\n  if(d > 0.5) {\n    discard;\n  }\n  float PI = 3.14159;\n  float intensity = clamp(cos(d * PI), 0.0, 1.0) * clamp(cos(2.0 * PI * (d * 2.0 * u_aimate.z - u_aimate.y * u_time)), 0.0, 1.0);\n\n  // TODO: \u6839\u636E\u53E0\u52A0\u6C34\u6CE2\u6548\u679C\n  gl_FragColor = vec4(v_color.xyz, v_color.a * opacity * intensity);\n\n  if(u_additive > 0.0) {\n    gl_FragColor *= gl_FragColor.a;\n  } \n\n  // TODO: \u4F18\u5316\u5728\u6C34\u6CE2\u7EB9\u60C5\u51B5\u4E0B\u7684\u62FE\u53D6\n  if(d < 0.5) {\n    gl_FragColor = filterColor(gl_FragColor);\n  }\n}\n";
var pointFillFrag = "\nuniform float u_globel;\nuniform float u_additive;\n\nvarying mat4 styleMappingMat; // \u4F20\u9012\u4ECE\u7247\u5143\u4E2D\u4F20\u9012\u7684\u6620\u5C04\u6570\u636E\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\n\n#pragma include \"sdf_2d\"\n#pragma include \"picking\"\n\n\nvoid main() {\n  int shape = int(floor(v_data.w + 0.5));\n\n  vec4 textrueStroke = vec4(\n    styleMappingMat[1][0],\n    styleMappingMat[1][1],\n    styleMappingMat[1][2],\n    styleMappingMat[1][3]\n  );\n\n  float opacity = styleMappingMat[0][0];\n  float stroke_opacity = styleMappingMat[0][1];\n  float strokeWidth = styleMappingMat[0][2];\n  vec4 strokeColor = textrueStroke == vec4(0) ? v_color : textrueStroke;\n\n  lowp float antialiasblur = v_data.z;\n  float r = v_radius / (v_radius + strokeWidth);\n\n  float outer_df;\n  float inner_df;\n  // 'circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'\n  if (shape == 0) {\n    outer_df = sdCircle(v_data.xy, 1.0);\n    inner_df = sdCircle(v_data.xy, r);\n  } else if (shape == 1) {\n    outer_df = sdEquilateralTriangle(1.1 * v_data.xy);\n    inner_df = sdEquilateralTriangle(1.1 / r * v_data.xy);\n  } else if (shape == 2) {\n    outer_df = sdBox(v_data.xy, vec2(1.));\n    inner_df = sdBox(v_data.xy, vec2(r));\n  } else if (shape == 3) {\n    outer_df = sdPentagon(v_data.xy, 0.8);\n    inner_df = sdPentagon(v_data.xy, r * 0.8);\n  } else if (shape == 4) {\n    outer_df = sdHexagon(v_data.xy, 0.8);\n    inner_df = sdHexagon(v_data.xy, r * 0.8);\n  } else if (shape == 5) {\n    outer_df = sdOctogon(v_data.xy, 1.0);\n    inner_df = sdOctogon(v_data.xy, r);\n  } else if (shape == 6) {\n    outer_df = sdHexagram(v_data.xy, 0.52);\n    inner_df = sdHexagram(v_data.xy, r * 0.52);\n  } else if (shape == 7) {\n    outer_df = sdRhombus(v_data.xy, vec2(1.0));\n    inner_df = sdRhombus(v_data.xy, vec2(r));\n  } else if (shape == 8) {\n    outer_df = sdVesica(v_data.xy, 1.1, 0.8);\n    inner_df = sdVesica(v_data.xy, r * 1.1, r * 0.8);\n  }\n\n  if(u_globel > 0.0) {\n    // TODO: \u5730\u7403\u6A21\u5F0F\u4E0B\u907F\u514D\u591A\u4F59\u7247\u5143\u7ED8\u5236\uFF0C\u540C\u65F6\u4E5F\u80FD\u907F\u514D\u6709\u7528\u7247\u5143\u5728\u900F\u660E\u4E14\u91CD\u53E0\u7684\u60C5\u51B5\u4E0B\u65E0\u6CD5\u5199\u5165\n    // \u4ED8\u51FA\u7684\u4EE3\u4EF7\u662F\u8FB9\u7F18\u4F1A\u6709\u4E00\u4E9B\u952F\u9F7F\n    if(outer_df > antialiasblur + 0.018) discard;\n  }\n  float opacity_t = smoothstep(0.0, antialiasblur, outer_df);\n\n  float color_t = strokeWidth < 0.01 ? 0.0 : smoothstep(\n    antialiasblur,\n    0.0,\n    inner_df\n  );\n\n  if(strokeWidth < 0.01) {\n    gl_FragColor = vec4(v_color.rgb, v_color.a * opacity);\n  } else {\n    gl_FragColor = mix(vec4(v_color.rgb, v_color.a * opacity), strokeColor * stroke_opacity, color_t);\n  }\n\n  if(u_additive > 0.0) {\n    gl_FragColor *= opacity_t;\n  } else {\n    gl_FragColor.a *= opacity_t;\n  }\n\n  if(gl_FragColor.a > 0.0) {\n    gl_FragColor = filterColor(gl_FragColor);\n  }\n}\n";
var pointFillVert = "attribute vec4 a_Color;\nattribute vec3 a_Position;\nattribute vec3 a_Extrude;\nattribute float a_Size;\nattribute float a_Shape;\n\nvarying mat4 styleMappingMat; // \u7528\u4E8E\u5C06\u5728\u9876\u70B9\u7740\u8272\u5668\u4E2D\u8BA1\u7B97\u597D\u7684\u6837\u5F0F\u503C\u4F20\u9012\u7ED9\u7247\u5143\n\nuniform float u_globel;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nuniform float u_isMeter;\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\n\nuniform float u_opacity : 1;\nuniform float u_stroke_opacity : 1;\nuniform float u_stroke_width : 2;\nuniform vec4 u_stroke_color : [0.0, 0.0, 0.0, 0.0];\nuniform vec2 u_offsets;\n\nuniform float u_blur : 0.0;\n\n#pragma include \"styleMapping\"\n#pragma include \"styleMappingCalOpacity\"\n#pragma include \"styleMappingCalStrokeOpacity\"\n#pragma include \"styleMappingCalStrokeWidth\"\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\n\nvoid main() {\n  vec3 extrude = a_Extrude;\n  float shape_type = a_Shape;\n  float newSize = setPickingSize(a_Size);\n\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\n  styleMappingMat = mat4(\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\n    0.0, 0.0, 0.0, 0.0\n  );\n\n  float rowCount = u_cellTypeLayout[0][0];    // \u5F53\u524D\u7684\u6570\u636E\u7EB9\u7406\u6709\u51E0\u884C\n  float columnCount = u_cellTypeLayout[0][1]; // \u5F53\u770B\u5230\u6570\u636E\u7EB9\u7406\u6709\u51E0\u5217\n  float columnWidth = 1.0/columnCount;  // \u5217\u5BBD\n  float rowHeight = 1.0/rowCount;       // \u884C\u9AD8\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\n  float id = a_vertexId; // \u7B2Cn\u4E2A\u9876\u70B9\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \u8D77\u59CB\u70B9\u5728\u7B2C\u51E0\u884C\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \u8D77\u59CB\u70B9\u5728\u7B2C\u51E0\u5217\n  \n  // cell \u56FA\u5B9A\u987A\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \n  // \u6309\u987A\u5E8F\u4ECE cell \u4E2D\u53D6\u503C\u3001\u82E5\u6CA1\u6709\u5219\u81EA\u52A8\u5F80\u4E0B\u53D6\u503C\n  float textureOffset = 0.0; // \u5728 cell \u4E2D\u53D6\u503C\u7684\u504F\u79FB\u91CF\n\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\n  styleMappingMat[0][0] = opacityAndOffset.r;\n  textureOffset = opacityAndOffset.g;\n\n  vec2 strokeOpacityAndOffset = calStrokeOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\n  styleMappingMat[0][1] = strokeOpacityAndOffset.r;\n  textureOffset = strokeOpacityAndOffset.g;\n\n  vec2 strokeWidthAndOffset = calStrokeWidthAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\n  styleMappingMat[0][2] = strokeWidthAndOffset.r;\n  textureOffset = strokeWidthAndOffset.g;\n\n  vec4 textrueStroke = vec4(-1.0, -1.0, -1.0, -1.0);\n  if(hasStroke()) {\n    vec2 valueRPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\n    styleMappingMat[1][0] = pos2value(valueRPos, columnWidth, rowHeight); // R\n    textureOffset += 1.0;\n\n    vec2 valueGPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\n    styleMappingMat[1][1] = pos2value(valueGPos, columnWidth, rowHeight); // G\n    textureOffset += 1.0;\n\n    vec2 valueBPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\n    styleMappingMat[1][2] = pos2value(valueBPos, columnWidth, rowHeight); // B\n    textureOffset += 1.0;\n\n    vec2 valueAPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\n    styleMappingMat[1][3] = pos2value(valueAPos, columnWidth, rowHeight); // A\n    textureOffset += 1.0;\n  } else {\n    if(u_stroke_color == vec4(0.0)) {\n      styleMappingMat[1][0] = v_color.r;\n      styleMappingMat[1][1] = v_color.g;\n      styleMappingMat[1][2] = v_color.b;\n      styleMappingMat[1][3] = v_color.a;\n    } else {\n      styleMappingMat[1][0] = u_stroke_color.r;\n      styleMappingMat[1][1] = u_stroke_color.g;\n      styleMappingMat[1][2] = u_stroke_color.b;\n      styleMappingMat[1][3] = u_stroke_color.a;\n    }\n  }\n\n  vec2 textrueOffsets = vec2(0.0, 0.0);\n  if(hasOffsets()) {\n    vec2 valueXPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\n    textrueOffsets.r = pos2value(valueXPos, columnWidth, rowHeight); // x\n    textureOffset += 1.0;\n\n    vec2 valueYPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\n    textrueOffsets.g = pos2value(valueYPos, columnWidth, rowHeight); // x\n    textureOffset += 1.0;\n  } else {\n    textrueOffsets = u_offsets;\n  }\n\n  // cal style mapping\n\n  // unpack color(vec2)\n  v_color = a_Color;\n\n  // radius(16-bit)\n  v_radius = newSize;\n\n  // TODO: billboard\n  // anti-alias\n  //  float antialiased_blur = -max(u_blur, antialiasblur);\n  float antialiasblur = -max(2.0 / u_DevicePixelRatio / a_Size, u_blur);\n\n  vec2 offset = (extrude.xy * (newSize + u_stroke_width) + textrueOffsets);\n  vec3 aPosition = a_Position;\n  if(u_isMeter < 1.0) {\n    // \u4E0D\u4EE5\u7C73\u4E3A\u5B9E\u9645\u5355\u4F4D\n    offset = project_pixel(offset);\n  } else {\n    // \u4EE5\u7C73\u4E3A\u5B9E\u9645\u5355\u4F4D\n    antialiasblur *= pow(19.0 - u_Zoom, 2.0);\n    antialiasblur = max(antialiasblur, -0.01);\n    // offset *= 0.5;\n\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      aPosition.xy += offset;\n      offset.x = 0.0;\n      offset.y = 0.0;\n    }\n  }\n\n  // TODP: /abs(extrude.x) \u662F\u4E3A\u4E86\u517C\u5BB9\u5730\u7403\u6A21\u5F0F\n  v_data = vec4(extrude.x/abs(extrude.x), extrude.y/abs(extrude.y), antialiasblur,shape_type);\n\n\n  // vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\n  vec4 project_pos = project_position(vec4(aPosition.xy, 0.0, 1.0));\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * vec4(project_pos.xy + offset, 0.0, 1.0);\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\n  }\n\n  if(u_globel > 0.0) {\n    gl_Position = u_ViewProjectionMatrix * vec4(a_Position + extrude * newSize * 0.1, 1.0);\n  }\n \n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\n\n  setPickingColor(a_PickingColor);\n}\n";

var FillModel = function (_BaseModel) {
  (0, _inherits2.default)(FillModel, _BaseModel);

  var _super = _createSuper(FillModel);

  function FillModel() {
    var _this;

    (0, _classCallCheck2.default)(this, FillModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "meter2coord", 1);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isMeter", false);
    return _this;
  }

  (0, _createClass2.default)(FillModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          _ref$strokeOpacity = _ref.strokeOpacity,
          strokeOpacity = _ref$strokeOpacity === void 0 ? 1 : _ref$strokeOpacity,
          _ref$strokeWidth = _ref.strokeWidth,
          strokeWidth = _ref$strokeWidth === void 0 ? 0 : _ref$strokeWidth,
          _ref$stroke = _ref.stroke,
          stroke = _ref$stroke === void 0 ? 'rgba(0,0,0,0)' : _ref$stroke,
          _ref$offsets = _ref.offsets,
          offsets = _ref$offsets === void 0 ? [0, 0] : _ref$offsets,
          blend = _ref.blend;

      if (this.dataTextureTest && this.dataTextureNeedUpdate({
        opacity: opacity,
        strokeOpacity: strokeOpacity,
        strokeWidth: strokeWidth,
        stroke: stroke,
        offsets: offsets
      })) {
        this.judgeStyleAttributes({
          opacity: opacity,
          strokeOpacity: strokeOpacity,
          strokeWidth: strokeWidth,
          stroke: stroke,
          offsets: offsets
        });
        var encodeData = this.layer.getEncodedData();

        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),
            data = _this$calDataFrame.data,
            width = _this$calDataFrame.width,
            height = _this$calDataFrame.height;

        this.rowCount = height;
        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({
          flipY: true,
          data: data,
          format: _l7Core.gl.LUMINANCE,
          type: _l7Core.gl.FLOAT,
          width: width,
          height: height
        }) : this.createTexture2D({
          flipY: true,
          data: [1],
          format: _l7Core.gl.LUMINANCE,
          type: _l7Core.gl.FLOAT,
          width: 1,
          height: 1
        });
      }

      return {
        u_isMeter: Number(this.isMeter),
        u_additive: blend === 'additive' ? 1.0 : 0.0,
        u_globel: this.mapService.version === _l7Maps.Version.GLOBEL ? 1 : 0,
        u_dataTexture: this.dataTexture,
        u_cellTypeLayout: this.getCellTypeLayout(),
        u_opacity: (0, _isNumber2.default)(opacity) ? opacity : 1.0,
        u_stroke_opacity: (0, _isNumber2.default)(strokeOpacity) ? strokeOpacity : 1.0,
        u_stroke_width: (0, _isNumber2.default)(strokeWidth) ? strokeWidth : 0.0,
        u_stroke_color: this.getStrokeColor(stroke),
        u_offsets: this.isOffsetStatic(offsets) ? offsets : [0, 0]
      };
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      var _ref2 = this.layer.getLayerConfig(),
          _ref2$animateOption = _ref2.animateOption,
          animateOption = _ref2$animateOption === void 0 ? {
        enable: false
      } : _ref2$animateOption;

      return {
        u_aimate: this.animateOption2Array(animateOption),
        u_time: this.layer.getLayerAnimateTime()
      };
    }
  }, {
    key: "getAttribute",
    value: function getAttribute() {
      return this.styleAttributeService.createAttributesAndIndices(this.layer.getEncodedData(), _triangulation.PointFillTriangulation);
    }
  }, {
    key: "initModels",
    value: function initModels() {
      var _ref3 = this.layer.getLayerConfig(),
          _ref3$unit = _ref3.unit,
          unit = _ref3$unit === void 0 ? 'l7size' : _ref3$unit;

      var version = this.mapService.version;

      if (unit === 'meter' && version !== _l7Maps.Version.L7MAP && version !== _l7Maps.Version.GLOBEL) {
        this.isMeter = true;
        this.calMeter2Coord();
      }

      return this.buildModels();
    }
  }, {
    key: "calMeter2Coord",
    value: function calMeter2Coord() {
      var _this$layer$getSource = (0, _slicedToArray2.default)(this.layer.getSource().extent, 4),
          minLng = _this$layer$getSource[0],
          minLat = _this$layer$getSource[1],
          maxLng = _this$layer$getSource[2],
          maxLat = _this$layer$getSource[3];

      var center = [(minLng + maxLng) / 2, (minLat + maxLat) / 2];
      var version = this.mapService.version;

      if (version === _l7Maps.Version.MAPBOX && window.mapboxgl.MercatorCoordinate) {
        var coord = window.mapboxgl.MercatorCoordinate.fromLngLat({
          lng: center[0],
          lat: center[1]
        }, 0);
        var offsetInMeters = 1;
        var offsetInMercatorCoordinateUnits = offsetInMeters * coord.meterInMercatorCoordinateUnits();
        var westCoord = new window.mapboxgl.MercatorCoordinate(coord.x - offsetInMercatorCoordinateUnits, coord.y, coord.z);
        var westLnglat = westCoord.toLngLat();
        this.meter2coord = center[0] - westLnglat.lng;
        return;
      }

      var m1 = this.mapService.meterToCoord(center, [minLng, minLat]);
      var m2 = this.mapService.meterToCoord(center, [maxLng === minLng ? maxLng + 0.1 : maxLng, maxLat === minLat ? minLat + 0.1 : maxLat]);
      this.meter2coord = (m1 + m2) / 2;

      if (!Boolean(this.meter2coord)) {
        this.meter2coord = 7.70681090738883;
      }
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      var _ref4 = this.layer.getLayerConfig(),
          _ref4$mask = _ref4.mask,
          mask = _ref4$mask === void 0 ? false : _ref4$mask,
          _ref4$maskInside = _ref4.maskInside,
          maskInside = _ref4$maskInside === void 0 ? true : _ref4$maskInside,
          _ref4$animateOption = _ref4.animateOption,
          animateOption = _ref4$animateOption === void 0 ? {
        enable: false
      } : _ref4$animateOption;

      var _this$getShaders = this.getShaders(animateOption),
          frag = _this$getShaders.frag,
          vert = _this$getShaders.vert,
          type = _this$getShaders.type;

      var isGlobel = this.mapService.version === 'GLOBEL';
      return [this.layer.buildLayerModel({
        moduleName: 'pointfill-' + type,
        vertexShader: vert,
        fragmentShader: frag,
        triangulation: isGlobel ? _triangulation.GlobelPointFillTriangulation : _triangulation.PointFillTriangulation,
        depth: {
          enable: isGlobel
        },
        blend: this.getBlend(),
        stencil: (0, _l7Utils.getMask)(mask, maskInside)
      })];
    }
  }, {
    key: "getShaders",
    value: function getShaders(animateOption) {
      if (animateOption.enable) {
        switch (animateOption.type) {
          case 'wave':
            return {
              frag: waveFillFrag,
              vert: pointFillVert,
              type: 'wave'
            };

          default:
            return {
              frag: waveFillFrag,
              vert: pointFillVert,
              type: 'wave'
            };
        }
      } else {
        return {
          frag: pointFillFrag,
          vert: pointFillVert,
          type: 'normal'
        };
      }
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$dataTexture;

      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();
    }
  }, {
    key: "animateOption2Array",
    value: function animateOption2Array(option) {
      return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _this2 = this;

      var isGlobel = this.mapService.version === 'GLOBEL';
      this.styleAttributeService.registerStyleAttribute({
        name: 'extrude',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Extrude',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var extrude;

            if (isGlobel) {
              var _vertex = (0, _slicedToArray2.default)(vertex, 3),
                  x = _vertex[0],
                  y = _vertex[1],
                  z = _vertex[2];

              var n1 = _glMatrix.vec3.fromValues(0, 0, 1);

              var n2 = _glMatrix.vec3.fromValues(x, 0, z);

              var xzReg = x >= 0 ? _glMatrix.vec3.angle(n1, n2) : Math.PI * 2 - _glMatrix.vec3.angle(n1, n2);
              var yReg = Math.PI * 2 - Math.asin(y / 100);

              var m = _glMatrix.mat4.create();

              _glMatrix.mat4.rotateY(m, m, xzReg);

              _glMatrix.mat4.rotateX(m, m, yReg);

              var v1 = _glMatrix.vec3.fromValues(1, 1, 0);

              _glMatrix.vec3.transformMat4(v1, v1, m);

              _glMatrix.vec3.normalize(v1, v1);

              var v2 = _glMatrix.vec3.fromValues(-1, 1, 0);

              _glMatrix.vec3.transformMat4(v2, v2, m);

              _glMatrix.vec3.normalize(v2, v2);

              var v3 = _glMatrix.vec3.fromValues(-1, -1, 0);

              _glMatrix.vec3.transformMat4(v3, v3, m);

              _glMatrix.vec3.normalize(v3, v3);

              var v4 = _glMatrix.vec3.fromValues(1, -1, 0);

              _glMatrix.vec3.transformMat4(v4, v4, m);

              _glMatrix.vec3.normalize(v4, v4);

              extrude = [].concat((0, _toConsumableArray2.default)(v1), (0, _toConsumableArray2.default)(v2), (0, _toConsumableArray2.default)(v3), (0, _toConsumableArray2.default)(v4));
            } else {
              extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];
            }

            var extrudeIndex = attributeIdx % 4 * 3;
            return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var _feature$size = feature.size,
                size = _feature$size === void 0 ? 5 : _feature$size;
            return Array.isArray(size) ? [size[0] * _this2.meter2coord] : [size * _this2.meter2coord];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'shape',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Shape',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var _feature$shape = feature.shape,
                shape = _feature$shape === void 0 ? 2 : _feature$shape;

            var shape2d = _this2.layer.getLayerConfig().shape2d;

            var shapeIndex = shape2d.indexOf(shape);
            return [shapeIndex];
          }
        }
      });
    }
  }]);
  return FillModel;
}(_BaseModel2.default);

exports.default = FillModel;
//# sourceMappingURL=fill.js.map