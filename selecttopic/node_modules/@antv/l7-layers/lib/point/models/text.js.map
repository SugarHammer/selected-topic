{"version":3,"sources":["../../../src/point/models/text.ts"],"names":["TextTriangulation","feature","that","id","vertices","indices","glyphInfoMap","size","centroid","coord","length","glyphQuads","forEach","quad","index","push","tex","x","y","height","tl","width","tr","br","bl","TextModel","layer","getLayerConfig","mask","maskInside","initGlyph","updateTexture","filterGlyphs","reBuildModel","buildLayerModel","moduleName","vertexShader","textVert","fragmentShader","textFrag","triangulation","bind","depth","enable","blend","getBlend","stencil","opacity","stroke","strokeWidth","textAnchor","textAllowOverlap","halo","gamma","fontService","canvas","mapping","Object","keys","textCount","preTextStyle","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","rowCount","dataTexture","createTexture2D","flipY","format","gl","LUMINANCE","type","FLOAT","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","u_stroke_width","u_stroke_color","getStrokeColor","u_sdf_map","texture","u_halo_blur","u_gamma_scale","u_sdf_map_size","on","buildModels","extent","textExtent","zoom","mapService","getZoom","getBounds","flag","Math","abs","currentZoom","destroy","off","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","update","featureIdx","vertex","attributeIdx","rotate","Array","isArray","STATIC_DRAW","bounds","fontWeight","fontFamily","characterSet","item","shape","toString","char","indexOf","setFontOptions","iconfont","spacing","glyphInfo","map","textOffset","shaping","coordinates","originCentroid","version","originCoordinates","padding","rendererService","getViewportSize","collisionIndex","CollisionIndex","filterData","filter","fontScale","pixels","lngLatToContainer","placeCollisionBox","x1","left","x2","right","y1","top","y2","bottom","anchorPointX","anchorPointY","box","insertCollisionBox","initIconFontTex","initTextFont","generateGlyphLayout","textureHeight","mag","LINEAR","min","models","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { boundsContains, getMask, padBounds } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { IPointLayerStyleOptions } from '../../core/interface';\nimport CollisionIndex from '../../utils/collision-index';\nimport { calculateCentroid } from '../../utils/geo';\nimport {\n  getGlyphQuads,\n  IGlyphQuad,\n  shapeText,\n} from '../../utils/symbol-layout';\nimport textFrag from '../shaders/text_frag.glsl';\nimport textVert from '../shaders/text_vert.glsl';\n\nexport function TextTriangulation(feature: IEncodeFeature) {\n  // @ts-ignore\n  const that = this as TextModel;\n  const id = feature.id as number;\n  const vertices: number[] = [];\n  const indices: number[] = [];\n\n  if (!that.glyphInfoMap || !that.glyphInfoMap[id]) {\n    return {\n      vertices: [], // [ x, y, z, tex.x,tex.y, offset.x. offset.y]\n      indices: [],\n      size: 7,\n    };\n  }\n  const centroid = that.glyphInfoMap[id].centroid as number[]; // 计算中心点\n  const coord =\n    centroid.length === 2 ? [centroid[0], centroid[1], 0] : centroid;\n  that.glyphInfoMap[id].glyphQuads.forEach(\n    (quad: IGlyphQuad, index: number) => {\n      vertices.push(\n        ...coord,\n        quad.tex.x,\n        quad.tex.y + quad.tex.height,\n        quad.tl.x,\n        quad.tl.y,\n        ...coord,\n        quad.tex.x + quad.tex.width,\n        quad.tex.y + quad.tex.height,\n        quad.tr.x,\n        quad.tr.y,\n        ...coord,\n        quad.tex.x + quad.tex.width,\n        quad.tex.y,\n        quad.br.x,\n        quad.br.y,\n        ...coord,\n        quad.tex.x,\n        quad.tex.y,\n        quad.bl.x,\n        quad.bl.y,\n      );\n      indices.push(\n        0 + index * 4,\n        1 + index * 4,\n        2 + index * 4,\n        2 + index * 4,\n        3 + index * 4,\n        0 + index * 4,\n      );\n    },\n  );\n  return {\n    vertices, // [ x, y, z, tex.x,tex.y, offset.x. offset.y]\n    indices,\n    size: 7,\n  };\n}\n\nexport default class TextModel extends BaseModel {\n  public glyphInfo: IEncodeFeature[];\n  public glyphInfoMap: {\n    [key: string]: {\n      shaping: any;\n      glyphQuads: IGlyphQuad[];\n      centroid: number[];\n    };\n  } = {};\n  private texture: ITexture2D;\n  private currentZoom: number = -1;\n  private extent: [[number, number], [number, number]];\n  private textureHeight: number = 0;\n  private textCount: number = 0;\n  private preTextStyle: Partial<IPointLayerStyleOptions> = {};\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1.0,\n      stroke = '#fff',\n      strokeWidth = 0,\n      textAnchor = 'center',\n      textAllowOverlap = false,\n      halo = 0.5,\n      gamma = 2.0,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const { canvas, mapping } = this.fontService;\n    if (Object.keys(mapping).length !== this.textCount) {\n      this.updateTexture();\n      this.textCount = Object.keys(mapping).length;\n    }\n    this.preTextStyle = {\n      textAnchor,\n      textAllowOverlap,\n    };\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        strokeWidth,\n        stroke,\n      })\n    ) {\n      this.judgeStyleAttributes({\n        opacity,\n        strokeWidth,\n        stroke,\n      });\n\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_stroke_width: isNumber(strokeWidth) ? strokeWidth : 0.0,\n      u_stroke_color: this.getStrokeColor(stroke),\n\n      u_sdf_map: this.texture,\n      u_halo_blur: halo,\n      u_gamma_scale: gamma,\n      u_sdf_map_size: [canvas.width, canvas.height],\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.layer.on('remapping', this.buildModels);\n    this.extent = this.textExtent();\n    const {\n      textAnchor = 'center',\n      textAllowOverlap = true,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    this.preTextStyle = {\n      textAnchor,\n      textAllowOverlap,\n    };\n    return this.buildModels();\n  }\n\n  public buildModels = () => {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    this.initGlyph();\n    this.updateTexture();\n    this.filterGlyphs();\n    this.reBuildModel();\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: { enable: false },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  };\n  public needUpdate() {\n    const {\n      textAllowOverlap = false,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    // textAllowOverlap 发生改变\n    const zoom = this.mapService.getZoom();\n    const extent = this.mapService.getBounds();\n    const flag = boundsContains(this.extent, extent);\n    // 文本不能压盖则进行过滤\n    if (\n      (!textAllowOverlap && (Math.abs(this.currentZoom - zoom) > 1 || !flag)) ||\n      textAllowOverlap !== this.preTextStyle.textAllowOverlap\n    ) {\n      this.reBuildModel();\n      return true;\n    }\n    return false;\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n    this.layer.off('remapping', this.buildModels);\n  }\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'rotate',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Rotate',\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { rotate = 0 } = feature;\n          return Array.isArray(rotate) ? [rotate[0]] : [rotate as number];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'textOffsets',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_textOffsets',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[5], vertex[6]];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 12 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'textUv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_tex',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n  private textExtent(): [[number, number], [number, number]] {\n    const bounds = this.mapService.getBounds();\n    return padBounds(bounds, 0.5);\n  }\n  /**\n   * 生成文字纹理（生成文字纹理字典）\n   */\n  private initTextFont() {\n    const {\n      fontWeight = '400',\n      fontFamily = 'sans-serif',\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n    const characterSet: string[] = [];\n    data.forEach((item: IEncodeFeature) => {\n      let { shape = '' } = item;\n      shape = shape.toString();\n      for (const char of shape) {\n        // 去重\n        if (characterSet.indexOf(char) === -1) {\n          characterSet.push(char);\n        }\n      }\n    });\n    this.fontService.setFontOptions({\n      characterSet,\n      fontWeight,\n      fontFamily,\n      iconfont: false,\n    });\n  }\n\n  /**\n   * 生成 iconfont 纹理字典\n   */\n  private initIconFontTex() {\n    const {\n      fontWeight = '400',\n      fontFamily = 'sans-serif',\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n    const characterSet: string[] = [];\n    data.forEach((item: IEncodeFeature) => {\n      let { shape = '' } = item;\n      shape = `${shape}`;\n      if (characterSet.indexOf(shape) === -1) {\n        characterSet.push(shape);\n      }\n    });\n    this.fontService.setFontOptions({\n      characterSet,\n      fontWeight,\n      fontFamily,\n      iconfont: true,\n    });\n  }\n\n  /**\n   * 生成文字布局（对照文字纹理字典提取对应文字的位置很好信息）\n   */\n  private generateGlyphLayout(iconfont: boolean) {\n    // TODO:更新文字布局\n    const { mapping } = this.fontService;\n    const {\n      spacing = 2,\n      textAnchor = 'center',\n      // textOffset,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n\n    this.glyphInfo = data.map((feature: IEncodeFeature) => {\n      const { shape = '', id, size = 1, textOffset = [0, 0] } = feature;\n\n      const shaping = shapeText(\n        shape.toString(),\n        mapping,\n        // @ts-ignore\n        size,\n        textAnchor,\n        'left',\n        spacing,\n        textOffset,\n        iconfont,\n      );\n      const glyphQuads = getGlyphQuads(shaping, textOffset, false);\n      feature.shaping = shaping;\n      feature.glyphQuads = glyphQuads;\n      // feature.centroid = calculteCentroid(coordinates);\n\n      feature.centroid = calculateCentroid(feature.coordinates);\n\n      // 此时地图高德2.0 originCentroid == centroid\n      feature.originCentroid =\n        feature.version === 'GAODE2.x'\n          ? calculateCentroid(feature.originCoordinates)\n          : (feature.originCentroid = feature.centroid);\n\n      this.glyphInfoMap[id as number] = {\n        shaping,\n        glyphQuads,\n        centroid: calculateCentroid(feature.coordinates),\n      };\n      return feature;\n    });\n  }\n  /**\n   * 文字避让 depend on originCentorid\n   */\n  private filterGlyphs() {\n    const {\n      padding = [4, 4],\n      textAllowOverlap = false,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    if (textAllowOverlap) {\n      // 如果允许文本覆盖\n      // this.layer.setEncodedData(this.glyphInfo);\n      return;\n    }\n    this.glyphInfoMap = {};\n    this.currentZoom = this.mapService.getZoom();\n    this.extent = this.textExtent();\n    const { width, height } = this.rendererService.getViewportSize();\n    const collisionIndex = new CollisionIndex(width, height);\n    const filterData = this.glyphInfo.filter((feature: IEncodeFeature) => {\n      const { shaping, id = 0 } = feature;\n      // const centroid = feature.centroid as [number, number];\n      // const centroid = feature.originCentroid as [number, number];\n      const centroid = (feature.version === 'GAODE2.x'\n        ? feature.originCentroid\n        : feature.centroid) as [number, number];\n      const size = feature.size as number;\n      const fontScale: number = size / 24;\n      const pixels = this.mapService.lngLatToContainer(centroid);\n      const { box } = collisionIndex.placeCollisionBox({\n        x1: shaping.left * fontScale - padding[0],\n        x2: shaping.right * fontScale + padding[0],\n        y1: shaping.top * fontScale - padding[1],\n        y2: shaping.bottom * fontScale + padding[1],\n        anchorPointX: pixels.x,\n        anchorPointY: pixels.y,\n      });\n      if (box && box.length) {\n        // TODO：featureIndex\n        collisionIndex.insertCollisionBox(box, id);\n        return true;\n      } else {\n        return false;\n      }\n    });\n    filterData.forEach((item) => {\n      // @ts-ignore\n      this.glyphInfoMap[item.id as number] = item;\n    });\n    // this.layer.setEncodedData(filterData);\n  }\n  /**\n   * 初始化文字布局\n   */\n  private initGlyph() {\n    const { iconfont = false } = this.layer.getLayerConfig();\n    // 1.生成文字纹理（或是生成 iconfont）\n    iconfont ? this.initIconFontTex() : this.initTextFont();\n    // this.initTextFont();\n\n    // 2.生成文字布局\n    this.generateGlyphLayout(iconfont);\n  }\n  /**\n   * 更新文字纹理\n   */\n  private updateTexture() {\n    const { createTexture2D } = this.rendererService;\n    const { canvas } = this.fontService;\n    this.textureHeight = canvas.height;\n    if (this.texture) {\n      this.texture.destroy();\n    }\n\n    this.texture = createTexture2D({\n      data: canvas,\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      width: canvas.width,\n      height: canvas.height,\n    });\n  }\n\n  private reBuildModel() {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    this.filterGlyphs();\n    this.layer.models = [\n      this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: { enable: false },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n}\n"],"file":"text.js"}