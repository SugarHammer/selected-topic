"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _l7Core = require("@antv/l7-core");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var baseFrag = "\nuniform sampler2D u_texture;\n\nvarying vec2 v_texCoord;\nvarying float v_lightWeight;\n\n\nvoid main() {\n\n    vec4 color = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y));\n    color.xyz = color.xyz * v_lightWeight;\n    gl_FragColor = color;\n}\n";
var baseVert = "// attribute vec4 a_Color;\nattribute vec3 a_Position;\nattribute vec3 a_Normal;\nattribute vec2 a_Uv;\nvarying vec2 v_texCoord;\n\n// attribute vec2 a_Extrude;\n// attribute float a_Size;\n// attribute float a_Shape;\n\nuniform vec3 u_CameraPosition;\nuniform mat4 u_ViewProjectionMatrix;\nuniform mat4 u_ModelMatrix;\nuniform float u_ambientRatio : 0.5;\nuniform float u_diffuseRatio : 0.3;\nuniform float u_specularRatio : 0.2;\nuniform vec3 u_sunLight: [1.0, -10.5, 12.0];\n\n\n\nfloat calc_lighting(vec4 pos) {\n\n    vec3 worldPos = vec3(pos * u_ModelMatrix);\n\n    vec3 worldNormal = a_Normal;\n\n    // cal light weight\n    vec3 viewDir = normalize(u_CameraPosition - worldPos);\n\n    vec3 lightDir = normalize(u_sunLight);\n\n    vec3 halfDir = normalize(viewDir+lightDir);\n    // lambert\n    float lambert = dot(worldNormal, lightDir);\n    // specular\n    float specular = pow(max(0.0, dot(worldNormal, halfDir)), 32.0);\n    //sum to light weight\n    float lightWeight = u_ambientRatio + u_diffuseRatio * lambert + u_specularRatio * specular;\n\n    return lightWeight;\n}\n\nvarying float v_lightWeight;\nvoid main() {\n\n    v_texCoord = a_Uv;\n\n    float lightWeight = calc_lighting(vec4(a_Position, 1.0));\n    v_lightWeight = lightWeight;\n\n    gl_Position = u_ViewProjectionMatrix * u_ModelMatrix * vec4(a_Position, 1.0);\n}\n";

var BaseEarthModel = function (_BaseModel) {
  (0, _inherits2.default)(BaseEarthModel, _BaseModel);

  var _super = _createSuper(BaseEarthModel);

  function BaseEarthModel() {
    var _this;

    (0, _classCallCheck2.default)(this, BaseEarthModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "texture", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "earthTime", 3.4);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sunX", 1000);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sunY", 1000);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sunZ", 1000);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sunRadius", Math.sqrt(_this.sunX * _this.sunX + _this.sunY * _this.sunY + _this.sunZ * _this.sunZ));
    return _this;
  }

  (0, _createClass2.default)(BaseEarthModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _this$layer$getLayerC = this.layer.getLayerConfig(),
          animateOption = _this$layer$getLayerC.animateOption,
          globelOtions = _this$layer$getLayerC.globelOtions;

      if (animateOption !== null && animateOption !== void 0 && animateOption.enable) {
        this.mapService.rotateY({
          reg: 0.002
        });
        this.earthTime += 0.02;
        this.sunY = 10;
        this.sunX = Math.cos(this.earthTime) * (this.sunRadius - this.sunY);
        this.sunZ = Math.sin(this.earthTime) * (this.sunRadius - this.sunY);
      }

      return {
        u_ambientRatio: (globelOtions === null || globelOtions === void 0 ? void 0 : globelOtions.ambientRatio) || 0.6,
        u_diffuseRatio: (globelOtions === null || globelOtions === void 0 ? void 0 : globelOtions.diffuseRatio) || 0.4,
        u_specularRatio: (globelOtions === null || globelOtions === void 0 ? void 0 : globelOtions.specularRatio) || 0.1,
        u_sunLight: [this.sunX, this.sunY, this.sunZ],
        u_texture: this.texture
      };
    }
  }, {
    key: "setEarthTime",
    value: function setEarthTime(time) {
      this.earthTime = time;
      this.sunY = 10;
      this.sunX = Math.cos(this.earthTime) * (this.sunRadius - this.sunY);
      this.sunZ = Math.sin(this.earthTime) * (this.sunRadius - this.sunY);
      this.layerService.renderLayers();
    }
  }, {
    key: "initModels",
    value: function initModels() {
      var _this2 = this;

      var _this$layer$getLayerC2 = this.layer.getLayerConfig(),
          globelOtions = _this$layer$getLayerC2.globelOtions;

      if ((globelOtions === null || globelOtions === void 0 ? void 0 : globelOtions.earthTime) !== undefined) {
        this.setEarthTime(globelOtions.earthTime);
      }

      var source = this.layer.getSource();
      var createTexture2D = this.rendererService.createTexture2D;
      this.texture = createTexture2D({
        height: 0,
        width: 0
      });
      source.data.images.then(function (imageData) {
        _this2.texture = createTexture2D({
          data: imageData[0],
          width: imageData[0].width,
          height: imageData[0].height
        });

        _this2.layerService.updateLayerRenderList();

        _this2.layerService.renderLayers();
      });
      return this.buildModels();
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      return '';
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      this.layer.zIndex = -998;
      return [this.layer.buildLayerModel({
        moduleName: 'baseEarth',
        vertexShader: baseVert,
        fragmentShader: baseFrag,
        triangulation: _triangulation.earthTriangulation,
        depth: {
          enable: true
        },
        blend: this.getBlend()
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var _feature$size = feature.size,
                size = _feature$size === void 0 ? 1 : _feature$size;
            return Array.isArray(size) ? [size[0]] : [size];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return BaseEarthModel;
}(_BaseModel2.default);

exports.default = BaseEarthModel;
//# sourceMappingURL=base.js.map