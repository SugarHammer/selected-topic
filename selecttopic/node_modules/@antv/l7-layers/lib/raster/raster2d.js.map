{"version":3,"sources":["../../src/raster/raster2d.ts"],"names":["Raster2dLayer","registerBuiltinAttributes","source","getSource","createTexture2D","rendererService","parserDataItem","data","dataArray","rasterTexture","width","height","format","gl","LUMINANCE","type","FLOAT","aniso","getLayerConfig","rampColors","imageData","colorTexture","flipY","models","buildLayerModel","moduleName","vertexShader","rasterImageVert","fragmentShader","rasterImageFrag","triangulation","RasterImageTriangulation","primitive","TRIANGLES","depth","enable","blend","func","srcRGB","SRC_ALPHA","srcAlpha","dstRGB","ONE_MINUS_SRC_ALPHA","dstAlpha","opacity","min","max","forEach","model","draw","uniforms","u_opacity","u_texture","u_min","u_max","u_colorTexture","properties","minimum","maximum","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","BaseLayer"],"mappings":"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","sourcesContent":["import { AttributeType, gl, IEncodeFeature, ITexture2D } from '@antv/l7-core';\nimport { generateColorRamp, IColorRamp } from '@antv/l7-utils';\nimport BaseLayer from '../core/BaseLayer';\nimport { RasterImageTriangulation } from '../core/triangulation';\nimport rasterImageFrag from './shaders/raster_2d_frag.glsl';\nimport rasterImageVert from './shaders/raster_2d_vert.glsl';\ninterface IRasterLayerStyleOptions {\n  opacity: number;\n  min: number;\n  max: number;\n  rampColors: IColorRamp;\n}\n\nexport default class Raster2dLayer extends BaseLayer<IRasterLayerStyleOptions> {\n  public type: string = 'RasterLayer';\n  protected rasterTexture: ITexture2D;\n  protected colorTexture: ITexture2D;\n\n  public buildModels() {\n    this.registerBuiltinAttributes();\n    const source = this.getSource();\n    const { createTexture2D } = this.rendererService;\n    const parserDataItem = this.getSource().data.dataArray[0];\n    this.rasterTexture = createTexture2D({\n      data: parserDataItem.data,\n      width: parserDataItem.width,\n      height: parserDataItem.height,\n      format: gl.LUMINANCE,\n      type: gl.FLOAT,\n      aniso: 4,\n    });\n    const { rampColors } = this.getLayerConfig();\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      width: imageData.width,\n      height: imageData.height,\n      flipY: false,\n    });\n    this.models = [\n      this.buildLayerModel({\n        moduleName: 'Raster3DImage',\n        vertexShader: rasterImageVert,\n        fragmentShader: rasterImageFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: { enable: false },\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: gl.SRC_ALPHA,\n            srcAlpha: 1,\n            dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n            dstAlpha: 1,\n          },\n        },\n      }),\n    ];\n  }\n  public renderModels() {\n    const { opacity } = this.getLayerConfig();\n    const parserDataItem = this.getSource().data.dataArray[0];\n    const { min, max } = parserDataItem;\n    if (this.rasterTexture) {\n      this.models.forEach((model) =>\n        model.draw({\n          uniforms: {\n            u_opacity: opacity || 1,\n            u_texture: this.rasterTexture,\n            u_min: min,\n            u_max: max,\n            u_colorTexture: this.colorTexture,\n          },\n        }),\n      );\n    }\n\n    return this;\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  private registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"],"file":"raster2d.js"}