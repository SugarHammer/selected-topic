"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchMouseUp = exports.dispatchMouseMove = exports.dispatchMouseDown = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _document = require("../document");

var _Event2 = require("../Event");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MouseEvent = function (_Event) {
  (0, _inherits2.default)(MouseEvent, _Event);

  var _super = _createSuper(MouseEvent);

  function MouseEvent(type) {
    (0, _classCallCheck2.default)(this, MouseEvent);
    return _super.call(this, type);
  }

  return (0, _createClass2.default)(MouseEvent);
}(_Event2.Event);

function eventHandlerFactory(type) {
  return function (rawEvent) {
    rawEvent.type = type;

    _document.$document.dispatchEvent(rawEvent);
  };
}

var dispatchMouseDown = eventHandlerFactory('mousedown');
exports.dispatchMouseDown = dispatchMouseDown;
var dispatchMouseMove = eventHandlerFactory('mousemove');
exports.dispatchMouseMove = dispatchMouseMove;
var dispatchMouseUp = eventHandlerFactory('mouseup');
exports.dispatchMouseUp = dispatchMouseUp;
//# sourceMappingURL=MouseEvent.js.map