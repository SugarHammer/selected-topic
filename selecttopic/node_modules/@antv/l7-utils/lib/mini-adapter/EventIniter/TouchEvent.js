"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchTouchStart = exports.dispatchTouchMove = exports.dispatchTouchEnd = exports.dispatchMapCameraParams = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _document = require("../document");

var _Event2 = require("../Event");

var _register = require("../register");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TouchEvent = function (_Event) {
  (0, _inherits2.default)(TouchEvent, _Event);

  var _super = _createSuper(TouchEvent);

  function TouchEvent(type) {
    var _this;

    (0, _classCallCheck2.default)(this, TouchEvent);
    _this = _super.call(this, type);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "touches", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "targetTouches", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "changedTouches", void 0);
    _this.touches = [];
    _this.targetTouches = [];
    _this.changedTouches = [];
    _this.target = (0, _register.getCanvas)();
    _this.currentTarget = (0, _register.getCanvas)();
    return _this;
  }

  return (0, _createClass2.default)(TouchEvent);
}(_Event2.Event);

function mapEvent(event) {
  var _ref = event || {},
      _ref$x = _ref.x,
      x = _ref$x === void 0 ? 0 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === void 0 ? 0 : _ref$y,
      _ref$clientX = _ref.clientX,
      clientX = _ref$clientX === void 0 ? 0 : _ref$clientX,
      _ref$clientY = _ref.clientY,
      clientY = _ref$clientY === void 0 ? 0 : _ref$clientY;

  if (Object.keys(event).indexOf('x') !== -1) {
    event.pageX = event.clientX = x;
    event.pageY = event.clientY = y;
  } else {
    event.x = clientX;
    event.y = clientY;
  }
}

function eventHandlerFactory(type) {
  return function (rawEvent) {
    var event = new TouchEvent(type);
    event.changedTouches = rawEvent.changedTouches;
    event.touches = rawEvent.touches;
    event.targetTouches = Array.prototype.slice.call(rawEvent.touches);
    event.timeStamp = rawEvent.timeStamp;
    event.changedTouches.forEach(function (e) {
      return mapEvent(e);
    });
    event.touches.forEach(function (e) {
      return mapEvent(e);
    });
    event.targetTouches.forEach(function (e) {
      return mapEvent(e);
    });

    _document.$document.dispatchEvent(event);
  };
}

function eventMapHandlerFactory(type) {
  return function (rawEvent) {
    rawEvent.type = type;

    _document.$document.dispatchEvent(rawEvent);
  };
}

var dispatchTouchStart = eventHandlerFactory('touchstart');
exports.dispatchTouchStart = dispatchTouchStart;
var dispatchTouchMove = eventHandlerFactory('touchmove');
exports.dispatchTouchMove = dispatchTouchMove;
var dispatchTouchEnd = eventHandlerFactory('touchend');
exports.dispatchTouchEnd = dispatchTouchEnd;
var dispatchMapCameraParams = eventMapHandlerFactory('mapCameaParams');
exports.dispatchMapCameraParams = dispatchMapCameraParams;
//# sourceMappingURL=TouchEvent.js.map