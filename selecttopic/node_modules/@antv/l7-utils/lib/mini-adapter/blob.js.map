{"version":3,"sources":["../../src/mini-adapter/blob.ts"],"names":["Blob","buffers","type","Promise","resolve","Error","start","end","contentType"],"mappings":";;;;;;;;;;;;;IAEaA,I;AAMX,gBACkBC,OADlB,EAEkBC,IAFlB,EAGE;AAAA;AAAA,SAFgBD,OAEhB,GAFgBA,OAEhB;AAAA,SADgBC,IAChB,GADgBA,IAChB;AAAE;;;;WAEJ,uBAA2C;AACzC,aAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKH,OAAL,CAAa,CAAb,CAAhB,CAAP;AACD;;;WAED,kBAAgB;AACd,YAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AACD;;;WAED,gBAAc;AACZ,YAAM,IAAIA,KAAJ,CAAU,iBAAV,CAAN;AACD;;;WAED,eAAaC,KAAb,EAA6BC,GAA7B,EAA2CC,WAA3C,EAAiE;AAC/D,YAAM,IAAIH,KAAJ,CAAU,iBAAV,CAAN;AACD","sourcesContent":["// @ts-nocheck\n// tslint:disable\nexport class Blob {\n  /**\n   *\n   * @param buffers only support zero index\n   * @param type mimetype image/png image/webp...\n   */\n  constructor(\n    public readonly buffers: ArrayBuffer[],\n    public readonly type: string | { type: string },\n  ) {}\n\n  public arraybuffer(): Promise<ArrayBuffer> {\n    return Promise.resolve(this.buffers[0]);\n  }\n\n  public stream() {\n    throw new Error('not implemented');\n  }\n\n  public text() {\n    throw new Error('not implemented');\n  }\n\n  public slice(start?: number, end?: number, contentType?: string) {\n    throw new Error('not implemented');\n  }\n}\n"],"file":"blob.js"}