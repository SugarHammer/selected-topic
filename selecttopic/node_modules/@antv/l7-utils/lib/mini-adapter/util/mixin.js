"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classList = classList;
exports.clientRegion = clientRegion;
exports.offsetRegion = offsetRegion;
exports.parentNode = parentNode;
exports.scrollRegion = scrollRegion;
exports.style = style;

var _screen = require("../screen");

var innerWidth = _screen.screen.availWidth,
    innerHeight = _screen.screen.availHeight;
var documentElement = {
  style: []
};

function parentNode(obj, level) {
  if (!('parentNode' in obj)) {
    var parent;

    if (level === 0) {
      parent = function parent() {
        return null;
      };
    } else if (level === 1) {
      parent = function parent() {
        return documentElement;
      };
    } else {
      parent = function parent() {
        return null;
      };
    }

    Object.defineProperty(obj, 'parentNode', {
      enumerable: true,
      get: parent
    });
  }

  if (!('parentElement' in obj)) {
    var _parent;

    if (level === 0) {
      _parent = function _parent() {
        return null;
      };
    } else if (level === 1) {
      _parent = function _parent() {
        return documentElement;
      };
    } else {
      _parent = function _parent() {
        return null;
      };
    }

    Object.defineProperty(obj, 'parentElement', {
      enumerable: true,
      get: _parent
    });
  }
}

function style(obj) {
  obj.style = obj.style || {};
  Object.assign(obj.style, {
    top: '0px',
    left: '0px',
    width: innerWidth + 'px',
    height: innerHeight + 'px',
    margin: '0px',
    padding: '0px'
  });
}

function clientRegion(obj) {
  if (!('clientLeft' in obj)) {
    obj.clientLeft = 0;
    obj.clientTop = 0;
  }

  if (!('clientWidth' in obj)) {
    obj.clientWidth = innerWidth;
    obj.clientHeight = innerHeight;
  }

  if (!('getBoundingClientRect' in obj)) {
    obj.getBoundingClientRect = function () {
      var ret = {
        x: 0,
        y: 0,
        top: 0,
        left: 0,
        width: this.clientWidth,
        height: this.clientHeight,
        right: this.clientWidth,
        bottom: this.clientHeight
      };
      return ret;
    };
  }
}

function offsetRegion(obj) {
  if (!('offsetLeft' in obj)) {
    obj.offsetLeft = 0;
    obj.offsetTop = 0;
  }

  if (!('offsetWidth' in obj)) {
    obj.offsetWidth = innerWidth;
    obj.offsetHeight = innerHeight;
  }
}

function scrollRegion(obj) {
  if (!('scrollLeft' in obj)) {
    obj.scrollLeft = 0;
    obj.scrollTop = 0;
  }

  if (!('scrollWidth' in obj)) {
    obj.scrollWidth = innerWidth;
    obj.scrollHeight = innerHeight;
  }
}

function classList(obj) {
  var noop = function noop() {
    return true;
  };

  obj.classList = [];
  obj.classList.add = noop;
  obj.classList.remove = noop;
  obj.classList.contains = noop;
  obj.classList.toggle = noop;
}
//# sourceMappingURL=mixin.js.map