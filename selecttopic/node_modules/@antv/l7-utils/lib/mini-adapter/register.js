"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCanvas = getCanvas;
exports.getCanvas2D = getCanvas2D;
exports.registerCanvas = registerCanvas;
exports.registerCanvas2D = registerCanvas2D;

var _devicePixelRatio = _interopRequireDefault(require("./devicePixelRatio"));

var Mixin = _interopRequireWildcard(require("./util/mixin"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var canvas = {};
var canvas2D = {};

function registerCanvas(c, id) {
  canvas = c;
  canvas.id = id;

  if (!('tagName' in canvas)) {
    canvas.tagName = 'CANVAS';
  }

  canvas.type = 'canvas';
  Mixin.parentNode(canvas);
  Mixin.style(canvas);
  Mixin.classList(canvas);
  Mixin.clientRegion(canvas);
  Mixin.offsetRegion(canvas);

  canvas.focus = function () {};

  canvas.blur = function () {};
}

function registerCanvas2D(ctx, id) {
  var width = 1024;
  var height = 1024;
  canvas2D = {
    width: width,
    height: height,
    clientWidth: width / _devicePixelRatio.default,
    clientHeight: height / _devicePixelRatio.default,
    id: id,
    type: 'canvas'
  };

  if (!('tagName' in canvas2D)) {
    canvas2D.tagName = 'CANVAS';
  }

  Mixin.parentNode(canvas2D);
  Mixin.style(canvas2D);
  Mixin.classList(canvas2D);
  Mixin.clientRegion(canvas2D);
  Mixin.offsetRegion(canvas2D);

  canvas2D.getContext = function (type) {
    if (type === '2d') {
      return ctx;
    }
  };

  canvas2D.focus = function () {};

  canvas2D.blur = function () {};
}

function getCanvas() {
  return canvas;
}

function getCanvas2D() {
  return canvas2D;
}
//# sourceMappingURL=register.js.map