{"version":3,"sources":["../../src/mini-adapter/atob.ts"],"names":["chars","InvalidCharacterError","message","prototype","Error","name","atob","input","str","String","replace","length","output","bc","bs","buffer","idx","charAt","fromCharCode","indexOf","btoa","string","bitmap","a","b","c","result","i","rest","charCodeAt","TypeError","slice","substring"],"mappings":";;;;;;;AAEA,IAAMA,KAAK,GACT,mEADF;;AAGA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AACtC,OAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDD,qBAAqB,CAACE,SAAtB,GAAkC,IAAIC,KAAJ,EAAlC;AACAH,qBAAqB,CAACE,SAAtB,CAAgCE,IAAhC,GAAuC,uBAAvC;;AAEO,SAASC,IAAT,CAAcC,KAAd,EAA6B;AAClC,MAAMC,GAAG,GAAGC,MAAM,CAACF,KAAD,CAAN,CAAcG,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,CAAZ;;AACA,MAAIF,GAAG,CAACG,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIV,qBAAJ,CACJ,mEADI,CAAN;AAGD;;AACD,MAAIW,MAAM,GAAG,EAAb;;AACA,OAEE,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAZ,EAAgBC,MAAhB,EAAwBC,GAAG,GAAG,CAFhC,EAIGD,MAAM,GAAGP,GAAG,CAACS,MAAJ,CAAWD,GAAG,EAAd,CAJZ,EAME,CAACD,MAAD,KACED,EAAE,GAAGD,EAAE,GAAG,CAAL,GAASC,EAAE,GAAG,EAAL,GAAUC,MAAnB,GAA4BA,MAAlC,EAGDF,EAAE,KAAK,CAJP,IAKKD,MAAM,IAAIH,MAAM,CAACS,YAAP,CAAoB,MAAOJ,EAAE,KAAM,CAAC,CAAD,GAAKD,EAAN,GAAY,CAAjB,CAA7B,CALf,GAMI,CAZN,EAaE;AAEAE,IAAAA,MAAM,GAAGf,KAAK,CAACmB,OAAN,CAAcJ,MAAd,CAAT;AACD;;AACD,SAAOH,MAAP;AACD;;AAEM,SAASQ,IAAT,CAAcC,MAAd,EAA8B;AACnCA,EAAAA,MAAM,GAAGZ,MAAM,CAACY,MAAD,CAAf;AACA,MAAIC,MAAJ;AAAA,MACEC,CADF;AAAA,MAEEC,CAFF;AAAA,MAGEC,CAHF;AAAA,MAIEC,MAAM,GAAG,EAJX;AAAA,MAKEC,CAAC,GAAG,CALN;AAAA,MAMEC,IAAI,GAAGP,MAAM,CAACV,MAAP,GAAgB,CANzB;;AAQA,SAAOgB,CAAC,GAAGN,MAAM,CAACV,MAAlB,GAA4B;AAC1B,QACE,CAACY,CAAC,GAAGF,MAAM,CAACQ,UAAP,CAAkBF,CAAC,EAAnB,CAAL,IAA+B,GAA/B,IACA,CAACH,CAAC,GAAGH,MAAM,CAACQ,UAAP,CAAkBF,CAAC,EAAnB,CAAL,IAA+B,GAD/B,IAEA,CAACF,CAAC,GAAGJ,MAAM,CAACQ,UAAP,CAAkBF,CAAC,EAAnB,CAAL,IAA+B,GAHjC,EAIE;AACA,YAAM,IAAIG,SAAJ,CACJ,iHADI,CAAN;AAGD;;AAEDR,IAAAA,MAAM,GAAIC,CAAC,IAAI,EAAN,GAAaC,CAAC,IAAI,CAAlB,GAAuBC,CAAhC;AACAC,IAAAA,MAAM,IACJ1B,KAAK,CAACiB,MAAN,CAAcK,MAAM,IAAI,EAAX,GAAiB,EAA9B,IACAtB,KAAK,CAACiB,MAAN,CAAcK,MAAM,IAAI,EAAX,GAAiB,EAA9B,CADA,GAEAtB,KAAK,CAACiB,MAAN,CAAcK,MAAM,IAAI,CAAX,GAAgB,EAA7B,CAFA,GAGAtB,KAAK,CAACiB,MAAN,CAAaK,MAAM,GAAG,EAAtB,CAJF;AAKD;;AAGD,SAAOM,IAAI,GAAGF,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgBH,IAAI,GAAG,CAAvB,IAA4B,MAAMI,SAAN,CAAgBJ,IAAhB,CAA/B,GAAuDF,MAAlE;AACD","sourcesContent":["// @ts-nocheck\n// tslint:disable\nconst chars =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nexport function atob(input: string) {\n  const str = String(input).replace(/=+$/, '');\n  if (str.length % 4 === 1) {\n    throw new InvalidCharacterError(\n      \"'atob' failed: The string to be decoded is not correctly encoded.\",\n    );\n  }\n  let output = '';\n  for (\n    // initialize result and counters\n    let bc = 0, bs, buffer, idx = 0;\n    // get next character\n    (buffer = str.charAt(idx++));\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer &&\n    ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n    // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\nexport function btoa(string: string) {\n  string = String(string);\n  let bitmap,\n    a,\n    b,\n    c,\n    result = '',\n    i = 0,\n    rest = string.length % 3; // To determine the final padding\n\n  for (; i < string.length; ) {\n    if (\n      (a = string.charCodeAt(i++)) > 255 ||\n      (b = string.charCodeAt(i++)) > 255 ||\n      (c = string.charCodeAt(i++)) > 255\n    ) {\n      throw new TypeError(\n        \"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\",\n      );\n    }\n\n    bitmap = (a << 16) | (b << 8) | c;\n    result +=\n      chars.charAt((bitmap >> 18) & 63) +\n      chars.charAt((bitmap >> 12) & 63) +\n      chars.charAt((bitmap >> 6) & 63) +\n      chars.charAt(bitmap & 63);\n  }\n\n  // If there's need of padding, replace the last 'A's with equal signs\n  return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;\n}\n"],"file":"atob.js"}