"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodePickingColor = decodePickingColor;
exports.encodePickingColor = encodePickingColor;
exports.generateColorRamp = generateColorRamp;
exports.isColor = isColor;
exports.rgb2arr = rgb2arr;

var d3 = _interopRequireWildcard(require("d3-color"));

var _miniAdapter = require("./mini-adapter");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function isColor(str) {
  if (typeof str === 'string') {
    return !!d3.color(str);
  } else {
    return false;
  }
}

function rgb2arr(str) {
  var color = d3.color(str);
  var arr = [0, 0, 0, 0];

  if (color != null) {
    arr[0] = color.r / 255;
    arr[1] = color.g / 255;
    arr[2] = color.b / 255;
    arr[3] = color.opacity;
  }

  return arr;
}

function decodePickingColor(color) {
  var i1 = color && color[0];
  var i2 = color && color[1];
  var i3 = color && color[2];
  var index = i1 + i2 * 256 + i3 * 65536 - 1;
  return index;
}

function encodePickingColor(featureIdx) {
  return [featureIdx + 1 & 255, featureIdx + 1 >> 8 & 255, featureIdx + 1 >> 8 >> 8 & 255];
}

function generateColorRamp(colorRamp) {
  var canvas = _miniAdapter.$window.document.createElement('canvas');

  var ctx = canvas.getContext('2d');
  canvas.width = 256;
  canvas.height = 1;
  var gradient = ctx.createLinearGradient(0, 0, 256, 1);
  var data = null;
  var min = colorRamp.positions[0];
  var max = colorRamp.positions[colorRamp.positions.length - 1];

  for (var i = 0; i < colorRamp.colors.length; ++i) {
    var value = (colorRamp.positions[i] - min) / (max - min);
    gradient.addColorStop(value, colorRamp.colors[i]);
  }

  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, 256, 1);

  if (!_miniAdapter.isMini) {
    data = ctx.getImageData(0, 0, 256, 1).data;
    var imageData = ctx.createImageData(256, 1);

    for (var _i = 0; _i < imageData.data.length; _i += 4) {
      imageData.data[_i + 0] = data[_i + 0];
      imageData.data[_i + 1] = data[_i + 1];
      imageData.data[_i + 2] = data[_i + 2];
      imageData.data[_i + 3] = data[_i + 3];
    }

    return imageData;
  } else {
    data = new Uint8ClampedArray(ctx.getImageData(0, 0, 256, 1).data);
    return {
      data: data,
      width: 256,
      height: 1
    };
  }
}
//# sourceMappingURL=color.js.map