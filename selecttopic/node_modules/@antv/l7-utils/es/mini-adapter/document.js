import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { Event } from './Event';
import { HTMLElement } from './HTMLElement';
import { HTMLVideoElement } from './HTMLVideoElement';
import { Image } from './Image';
import { $location } from './location';

var Body = function (_HTMLElement) {
  _inherits(Body, _HTMLElement);

  var _super = _createSuper(Body);

  function Body() {
    _classCallCheck(this, Body);

    return _super.call(this, 'body', 0);
  }

  _createClass(Body, [{
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, listener, options) {}
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {}
  }]);

  return Body;
}(HTMLElement);

var DocumentElement = function (_HTMLElement2) {
  _inherits(DocumentElement, _HTMLElement2);

  var _super2 = _createSuper(DocumentElement);

  function DocumentElement() {
    _classCallCheck(this, DocumentElement);

    return _super2.call(this, 'html', 0);
  }

  _createClass(DocumentElement, [{
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, listener) {}
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {}
  }]);

  return DocumentElement;
}(HTMLElement);

var events = {};
export var $document = {
  readyState: 'complete',
  visibilityState: 'visible',
  hidden: false,
  fullscreen: true,
  scripts: [],
  style: {},
  location: $location,
  ontouchstart: null,
  ontouchmove: null,
  ontouchend: null,
  onvisibilitychange: null,
  parentNode: null,
  parentElement: null,
  head: null,
  body: null,
  documentElement: {
    style: []
  },
  createElement: function createElement(tagName) {
    tagName = tagName.toLowerCase();

    if (tagName === 'canvas') {
      return my.createOffscreenCanvas(1024, 128, '2d');
    } else if (tagName === 'img') {
      return new Image();
    } else if (tagName === 'video') {
      return new HTMLVideoElement();
    }

    return new HTMLElement(tagName);
  },
  createElementNS: function createElementNS(nameSpace, tagName) {
    return this.createElement(tagName);
  },
  createTextNode: function createTextNode(text) {
    return text;
  },
  getElementById: function getElementById(id) {
    return null;
  },
  getElementsByTagName: function getElementsByTagName(tagName) {
    tagName = tagName.toLowerCase();
    return [];
  },
  getElementsByTagNameNS: function getElementsByTagNameNS(nameSpace, tagName) {
    return this.getElementsByTagName(tagName);
  },
  getElementsByName: function getElementsByName(tagName) {
    return [];
  },
  querySelector: function querySelector(query) {
    return null;
  },
  querySelectorAll: function querySelectorAll(query) {
    return [];
  },
  addEventListener: function addEventListener(type, listener, options) {
    if (!events[type]) {
      events[type] = [];
    }

    events[type].push(listener);
  },
  removeEventListener: function removeEventListener(type, listener) {
    var listeners = events[type];

    if (listeners && listeners.length > 0) {
      for (var i = listeners.length; i--; i > 0) {
        if (listeners[i] === listener) {
          listeners.splice(i, 1);
          break;
        }
      }
    }
  },
  dispatchEvent: function dispatchEvent(event) {
    var type = event.type;
    var listeners = events[type];

    if (listeners) {
      for (var i = 0; i < listeners.length; i++) {
        listeners[i](event);
      }
    }

    if (event.target && typeof event.target['on' + type] === 'function') {
      event.target['on' + type](event);
    }
  },
  createEvent: function createEvent(type) {
    return new Event(type);
  }
};
$document.documentElement = new DocumentElement();
$document.head = new HTMLElement('head');
$document.body = new Body();
//# sourceMappingURL=document.js.map