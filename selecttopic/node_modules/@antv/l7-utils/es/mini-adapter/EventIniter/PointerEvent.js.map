{"version":3,"sources":["../../../src/mini-adapter/EventIniter/PointerEvent.ts"],"names":["$document","Event","getCanvas","PointerEvent","type","target","currentTarget","CLONE_PROPS","CLONE_DEFAULTS","POINTER_TYPE","touchToPointer","touch","rawEvent","e","i","length","p","buttons","typeToButtons","which","pointerId","identifier","bubbles","cancelable","button","width","radiusX","height","radiusY","pressure","force","isPrimary","isPrimaryPointer","pointerType","altKey","ctrlKey","metaKey","shiftKey","preventDefault","ret","firstPointer","setPrimaryPointer","removePrimaryPointer","eventHandlerFactory","changedTouches","event","dispatchEvent","dispatchPointerDown","dispatchPointerMove","dispatchPointerUp"],"mappings":"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","sourcesContent":["// @ts-nocheck\n// tslint:disable\nimport { $document } from '../document';\nimport { Event } from '../Event';\nimport { getCanvas } from '../register';\n\nclass PointerEvent extends Event {\n  public buttons: number;\n  public which: number;\n\n  public pointerId: number;\n  public bubbles: boolean;\n  public button: number;\n  public width: number;\n  public height: number;\n  public pressure: number;\n  public isPrimary: boolean;\n  public pointerType: string;\n  public altKey: boolean;\n  public ctrlKey: boolean;\n  public metaKey: boolean;\n  public shiftKey: boolean;\n\n  constructor(type) {\n    super(type);\n\n    this.target = getCanvas();\n    this.currentTarget = getCanvas();\n  }\n}\n\nconst CLONE_PROPS = [\n  // MouseEvent\n  'bubbles',\n  'cancelable',\n  'view',\n  'detail',\n  'screenX',\n  'screenY',\n  'clientX',\n  'clientY',\n  'ctrlKey',\n  'altKey',\n  'shiftKey',\n  'metaKey',\n  'button',\n  'relatedTarget',\n\n  // PointerEvent\n  'pointerId',\n  'width',\n  'height',\n  'pressure',\n  'tiltX',\n  'tiltY',\n  'pointerType',\n  'hwTimestamp',\n  'isPrimary',\n\n  // event instance\n  'pageX',\n  'pageY',\n  'timeStamp',\n];\n\nconst CLONE_DEFAULTS = [\n  // MouseEvent\n  false,\n  false,\n  null,\n  null,\n  0,\n  0,\n  0,\n  0,\n  false,\n  false,\n  false,\n  false,\n  0,\n  null,\n\n  // DOM Level 3\n  0,\n\n  // PointerEvent\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '',\n  0,\n  false,\n\n  // event instance\n  0,\n  0,\n  0,\n];\n\nconst POINTER_TYPE = 'touch';\n\nfunction touchToPointer(type, touch, rawEvent) {\n  const e = new PointerEvent(type);\n\n  for (let i = 0; i < CLONE_PROPS.length; i++) {\n    const p = CLONE_PROPS[i];\n    e[p] = touch[p] || CLONE_DEFAULTS[i];\n  }\n\n  e.type = type;\n  e.target = getCanvas();\n  e.currentTarget = getCanvas();\n  e.buttons = typeToButtons(type);\n  e.which = e.buttons;\n\n  e.pointerId = (touch.identifier || 0) + 2;\n  e.bubbles = true;\n  e.cancelable = true;\n  // e.detail = this.clickCount;\n  e.button = 0;\n\n  e.width = (touch.radiusX || 0.5) * 2;\n  e.height = (touch.radiusY || 0.5) * 2;\n  e.pressure = touch.force || 0.5;\n  e.isPrimary = isPrimaryPointer(touch);\n  e.pointerType = POINTER_TYPE;\n\n  // forward modifier keys\n  e.altKey = rawEvent.altKey;\n  e.ctrlKey = rawEvent.ctrlKey;\n  e.metaKey = rawEvent.metaKey;\n  e.shiftKey = rawEvent.shiftKey;\n\n  if (rawEvent.preventDefault) {\n    e.preventDefault = () => {\n      rawEvent.preventDefault();\n    };\n  }\n\n  return e;\n}\n\nfunction typeToButtons(type) {\n  let ret = 0;\n  if (\n    type === 'touchstart' ||\n    type === 'touchmove' ||\n    type === 'pointerdown' ||\n    type === 'pointermove'\n  ) {\n    ret = 1;\n  }\n  return ret;\n}\n\nlet firstPointer = null;\n\nfunction isPrimaryPointer(touch) {\n  return firstPointer === touch.identifier;\n}\n\nfunction setPrimaryPointer(touch) {\n  if (firstPointer === null) {\n    firstPointer = touch.identifier;\n  }\n}\n\nfunction removePrimaryPointer(touch) {\n  if (firstPointer === touch.identifier) {\n    firstPointer = null;\n  }\n}\n\nfunction eventHandlerFactory(type) {\n  return (rawEvent) => {\n    const changedTouches = rawEvent.changedTouches;\n\n    for (let i = 0; i < changedTouches.length; i++) {\n      const touch = changedTouches[i];\n\n      if (i === 0 && type === 'pointerdown') {\n        setPrimaryPointer(touch);\n      } else if (type === 'pointerup' || type === 'pointercancel') {\n        removePrimaryPointer(touch);\n      }\n\n      const event = touchToPointer(type, touch, rawEvent);\n      $document.dispatchEvent(event);\n    }\n  };\n}\n\nconst dispatchPointerDown = eventHandlerFactory('pointerdown');\nconst dispatchPointerMove = eventHandlerFactory('pointermove');\nconst dispatchPointerUp = eventHandlerFactory('pointerup');\nexport { dispatchPointerDown, dispatchPointerMove, dispatchPointerUp };\n"],"file":"PointerEvent.js"}