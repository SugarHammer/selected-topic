import * as d3 from 'd3-color';
import { $window, isMini } from './mini-adapter';
export function isColor(str) {
  if (typeof str === 'string') {
    return !!d3.color(str);
  } else {
    return false;
  }
}
export function rgb2arr(str) {
  var color = d3.color(str);
  var arr = [0, 0, 0, 0];

  if (color != null) {
    arr[0] = color.r / 255;
    arr[1] = color.g / 255;
    arr[2] = color.b / 255;
    arr[3] = color.opacity;
  }

  return arr;
}
export function decodePickingColor(color) {
  var i1 = color && color[0];
  var i2 = color && color[1];
  var i3 = color && color[2];
  var index = i1 + i2 * 256 + i3 * 65536 - 1;
  return index;
}
export function encodePickingColor(featureIdx) {
  return [featureIdx + 1 & 255, featureIdx + 1 >> 8 & 255, featureIdx + 1 >> 8 >> 8 & 255];
}
export function generateColorRamp(colorRamp) {
  var canvas = $window.document.createElement('canvas');
  var ctx = canvas.getContext('2d');
  canvas.width = 256;
  canvas.height = 1;
  var gradient = ctx.createLinearGradient(0, 0, 256, 1);
  var data = null;
  var min = colorRamp.positions[0];
  var max = colorRamp.positions[colorRamp.positions.length - 1];

  for (var i = 0; i < colorRamp.colors.length; ++i) {
    var value = (colorRamp.positions[i] - min) / (max - min);
    gradient.addColorStop(value, colorRamp.colors[i]);
  }

  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, 256, 1);

  if (!isMini) {
    data = ctx.getImageData(0, 0, 256, 1).data;
    var imageData = ctx.createImageData(256, 1);

    for (var _i = 0; _i < imageData.data.length; _i += 4) {
      imageData.data[_i + 0] = data[_i + 0];
      imageData.data[_i + 1] = data[_i + 1];
      imageData.data[_i + 2] = data[_i + 2];
      imageData.data[_i + 3] = data[_i + 3];
    }

    return imageData;
  } else {
    data = new Uint8ClampedArray(ctx.getImageData(0, 0, 256, 1).data);
    return {
      data: data,
      width: 256,
      height: 1
    };
  }
}
//# sourceMappingURL=color.js.map