"use strict";
exports.__esModule = true;
var util_1 = require("../../util");
var Point = /** @class */ (function () {
    /**
     * 平面坐标
     * @param x x坐标
     * @param y y坐标
     * @param round 是否取整
     */
    function Point(x, y, round) {
        this.x = round ? Math.round(x) : x;
        this.y = round ? Math.round(y) : y;
    }
    Point.prototype.clone = function () {
        return new Point(this.x, this.y);
    };
    Point.prototype.add = function (point, y, round) {
        return this.clone()._add(toPoint(point, y, round));
    };
    Point.prototype._add = function (point) {
        this.x += point.x;
        this.y += point.y;
        return this;
    };
    Point.prototype.subtract = function (point, y, round) {
        return this.clone()._subtract(toPoint(point, y, round));
    };
    Point.prototype._subtract = function (point) {
        this.x -= point.x;
        this.y -= point.y;
        return this;
    };
    Point.prototype.divideBy = function (num) {
        return this.clone()._divideBy(num);
    };
    Point.prototype._divideBy = function (num) {
        this.x /= num;
        this.y /= num;
        return this;
    };
    Point.prototype.multiplyBy = function (num) {
        return this.clone()._multiplyBy(num);
    };
    Point.prototype._multiplyBy = function (num) {
        this.x *= num;
        this.y *= num;
        return this;
    };
    Point.prototype.scaleBy = function (point) {
        return new Point(this.x * point.x, this.y * point.y);
    };
    Point.prototype.unscaleBy = function (point) {
        return new Point(this.x / point.x, this.y / point.y);
    };
    Point.prototype.round = function () {
        return this.clone()._round();
    };
    Point.prototype._round = function () {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    };
    Point.prototype.floor = function () {
        return this.clone()._floor();
    };
    Point.prototype._floor = function () {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    };
    Point.prototype.ceil = function () {
        return this.clone()._ceil();
    };
    Point.prototype._ceil = function () {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    };
    Point.prototype.trunc = function () {
        return this.clone()._trunc();
    };
    Point.prototype._trunc = function () {
        this.x = util_1.trunc(this.x);
        this.y = util_1.trunc(this.y);
        return this;
    };
    Point.prototype.distanceTo = function (point) {
        var newPoint = toPoint(point);
        var x = newPoint.x - this.x;
        var y = newPoint.y - this.y;
        return Math.sqrt(x * x + y * y);
    };
    Point.prototype.equals = function (point, threshold) {
        var newPoint = toPoint(point);
        var margin = Math.max(Math.abs(this.x - newPoint.x), Math.abs(this.y - newPoint.y));
        return margin <= (threshold === undefined ? 1.0e-9 : threshold);
    };
    Point.prototype.contains = function (point) {
        var newPoint = toPoint(point);
        return (Math.abs(newPoint.x) <= Math.abs(this.x) &&
            Math.abs(newPoint.y) <= Math.abs(this.y));
    };
    Point.prototype.toString = function () {
        return "Point(" + util_1.formatNum(this.x) + ", " + util_1.formatNum(this.y) + ")";
    };
    return Point;
}());
exports.Point = Point;
function toPoint(x, y, round) {
    if (x instanceof Point) {
        return x;
    }
    if (Array.isArray(x)) {
        return new Point(x[0], x[1]);
    }
    if (x === undefined || x === null) {
        return x;
    }
    if (typeof x === 'object' && 'x' in x && 'y' in x) {
        return new Point(x.x, x.y);
    }
    return new Point(x, y, round);
}
exports.toPoint = toPoint;
//# sourceMappingURL=point.js.map