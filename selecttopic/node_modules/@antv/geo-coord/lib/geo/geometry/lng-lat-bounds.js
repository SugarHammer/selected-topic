"use strict";
exports.__esModule = true;
var lng_lat_1 = require("./lng-lat");
var LngLatBounds = /** @class */ (function () {
    function LngLatBounds(corner1, corner2) {
        if (!corner1) {
            return;
        }
        var latlngs = corner2 ? [corner1, corner2] : corner1;
        if (Array.isArray(latlngs)) {
            for (var i = 0, len = latlngs.length; i < len; i += 1) {
                // @ts-ignore
                this.extend(latlngs[i]);
            }
        }
    }
    LngLatBounds.prototype.extend = function (obj) {
        var sw = this.southWest;
        var ne = this.northEast;
        var sw2;
        var ne2;
        if (obj instanceof lng_lat_1.LngLat) {
            sw2 = obj;
            ne2 = obj;
        }
        else if (obj instanceof LngLatBounds) {
            sw2 = obj.southWest;
            ne2 = obj.northEast;
            if (!sw2 || !ne2) {
                return this;
            }
        }
        else {
            if (obj && Array.isArray(obj)) {
                if (Array.isArray(obj[0])) {
                    return this.extend(toLngLatBounds(obj));
                }
                return this.extend(lng_lat_1.toLngLat(obj));
            }
            return this;
        }
        if (!sw && !ne) {
            this.southWest = new lng_lat_1.LngLat(sw2.lng, sw2.lat);
            this.northEast = new lng_lat_1.LngLat(ne2.lng, ne2.lat);
        }
        else {
            sw.lat = Math.min(sw2.lat, sw.lat);
            sw.lng = Math.min(sw2.lng, sw.lng);
            ne.lat = Math.max(ne2.lat, ne.lat);
            ne.lng = Math.max(ne2.lng, ne.lng);
        }
        return this;
    };
    /**
     * 放大或者缩小区域
     * @param bufferRatio 缩放比率
     */
    LngLatBounds.prototype.pad = function (bufferRatio) {
        var sw = this.southWest;
        var ne = this.northEast;
        var heightBuffer = Math.abs(sw.lat - ne.lat) * bufferRatio;
        var widthBuffer = Math.abs(sw.lng - ne.lng) * bufferRatio;
        return new LngLatBounds(new lng_lat_1.LngLat(sw.lng - widthBuffer, sw.lat - heightBuffer), new lng_lat_1.LngLat(ne.lng + widthBuffer, ne.lat + heightBuffer));
    };
    LngLatBounds.prototype.getCenter = function () {
        return new lng_lat_1.LngLat((this.southWest.lng + this.northEast.lng) / 2, (this.southWest.lat + this.northEast.lat) / 2);
    };
    LngLatBounds.prototype.getSouthWest = function () {
        return this.southWest;
    };
    LngLatBounds.prototype.getNorthEast = function () {
        return this.northEast;
    };
    LngLatBounds.prototype.getNorthWest = function () {
        return new lng_lat_1.LngLat(this.getWest(), this.getNorth());
    };
    LngLatBounds.prototype.getSouthEast = function () {
        return new lng_lat_1.LngLat(this.getEast(), this.getSouth());
    };
    LngLatBounds.prototype.getWest = function () {
        return this.southWest.lng;
    };
    LngLatBounds.prototype.getSouth = function () {
        return this.southWest.lat;
    };
    LngLatBounds.prototype.getNorth = function () {
        return this.northEast.lat;
    };
    LngLatBounds.prototype.getEast = function () {
        return this.northEast.lng;
    };
    LngLatBounds.prototype.contains = function (obj) {
        var newObj = obj;
        if ((Array.isArray(newObj) && typeof newObj[0] === 'number') ||
            newObj instanceof lng_lat_1.LngLat ||
            'lat' in newObj) {
            newObj = lng_lat_1.toLngLat(newObj);
        }
        else {
            newObj = toLngLatBounds(newObj);
        }
        var sw = this.southWest;
        var ne = this.northEast;
        var sw2;
        var ne2;
        if (newObj instanceof LngLatBounds) {
            sw2 = newObj.getSouthWest();
            ne2 = newObj.getNorthEast();
        }
        else {
            sw2 = ne2 = newObj;
        }
        return (sw2.lat >= sw.lat &&
            ne2.lat <= ne.lat &&
            sw2.lng >= sw.lng &&
            ne2.lng <= ne.lng);
    };
    // 包含相邻的多边形
    LngLatBounds.prototype.intersects = function (bounds) {
        var newBounds = toLngLatBounds(bounds);
        var sw = this.southWest;
        var ne = this.northEast;
        var sw2 = newBounds.getSouthWest();
        var ne2 = newBounds.getNorthEast();
        var latIntersects = ne2.lat >= sw.lat && sw2.lat <= ne.lat;
        var lngIntersects = ne2.lng >= sw.lng && sw2.lng <= ne.lng;
        return latIntersects && lngIntersects;
    };
    // 不包括相邻的多边形
    LngLatBounds.prototype.overlaps = function (bounds) {
        var newBounds = toLngLatBounds(bounds);
        var sw = this.southWest;
        var ne = this.northEast;
        var sw2 = newBounds.getSouthWest();
        var ne2 = newBounds.getNorthEast();
        var latOverlaps = ne2.lat > sw.lat && sw2.lat < ne.lat;
        var lngOverlaps = ne2.lng > sw.lng && sw2.lng < ne.lng;
        return latOverlaps && lngOverlaps;
    };
    LngLatBounds.prototype.toBBoxString = function () {
        return [
            this.getWest(),
            this.getSouth(),
            this.getEast(),
            this.getNorth(),
        ].join(',');
    };
    LngLatBounds.prototype.equals = function (bounds, maxMargin) {
        if (!bounds) {
            return false;
        }
        var newBounds = toLngLatBounds(bounds);
        return (this.southWest.equals(newBounds.getSouthWest(), maxMargin) &&
            this.northEast.equals(newBounds.getNorthEast(), maxMargin));
    };
    LngLatBounds.prototype.isValid = function () {
        return !!(this.southWest && this.northEast);
    };
    return LngLatBounds;
}());
exports.LngLatBounds = LngLatBounds;
function toLngLatBounds(a, b) {
    if (a instanceof LngLatBounds) {
        return a;
    }
    if (b !== undefined) {
        return new LngLatBounds(a, b);
    }
    return new LngLatBounds(a);
}
exports.toLngLatBounds = toLngLatBounds;
//# sourceMappingURL=lng-lat-bounds.js.map