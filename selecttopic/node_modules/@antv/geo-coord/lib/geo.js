"use strict";
exports.__esModule = true;
var tslib_1 = require("tslib");
var base_1 = require("./base");
var crs_1 = require("./geo/crs");
var lng_lat_1 = require("./geo/geometry/lng-lat");
var point_1 = require("./geo/geometry/point");
var Geo = /** @class */ (function (_super) {
    tslib_1.__extends(Geo, _super);
    function Geo(cfg) {
        var _this = _super.call(this, tslib_1.__assign({ projection: 'EPSG3857', zoom: 7, mapCenter: [116.400146, 39.926588] }, cfg)) || this;
        _this.type = 'geo';
        _this.isGeo = true;
        cfg.center ? _this.center = cfg.center : _this.center = _this.mapCenter;
        _this._init();
        return _this;
    }
    Geo.prototype._init = function () {
        var start = this.start;
        var end = this.end;
        this.center = lng_lat_1.toLngLat(this.center);
        this.width = Math.abs(end.x - start.x);
        this.height = Math.abs(end.y - start.y);
        this.crs = crs_1.getCRS(this.projection);
    };
    Geo.prototype.getZoom = function () {
        return this.zoom;
    };
    Geo.prototype.setZoom = function (zoom) {
        this.zoom = zoom;
    };
    Geo.prototype.setCenter = function (center) {
        this.center = lng_lat_1.toLngLat(center);
    };
    Geo.prototype.getCenter = function () {
        return this.center;
    };
    /**
     * 经纬度坐标转画布坐标 统一和其他坐标系传入方式 coordControls使用
     * @param point
     */
    Geo.prototype.convertPoint = function (point) {
        var lngLat = [point.x, point.y];
        var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();
        var origin = this.getPixelOrigin();
        var resPoint = ll.subtract(origin);
        return { x: resPoint.x, y: resPoint.y };
    };
    /**
     * 画布坐标转经纬坐标 统一和其他坐标系传入方式
     * @param point
     */
    Geo.prototype.invertPoint = function (point) {
        var newPoint = point_1.toPoint(point);
        var origin = this.getPixelOrigin();
        var px = newPoint.add(origin);
        var lnglat = this.unproject(px, this.zoom);
        return { x: lnglat.lng, y: lnglat.lat };
    };
    /**
    * 画布坐标转经纬坐标 同convertPoint 对用户使用
    * @param point
    */
    Geo.prototype.layerPointToLatLng = function (point) {
        var origin = this.getPixelOrigin();
        var ll = point.add(origin);
        return this.unproject(ll, this.zoom);
    };
    /**
    * 经纬度坐标转画布坐标 同 invertPoint 对用户使用
    * @param lngLat
    */
    Geo.prototype.latLngToLayerPoint = function (lngLat) {
        var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();
        var origin = this.getPixelOrigin();
        return ll.subtract(origin);
    };
    // 计算地图中心点像素坐标
    Geo.prototype.getPixelOrigin = function () {
        var halfWidth = this.width / 2;
        var halfHeight = this.height / 2;
        return this.crs
            .lngLatToPoint(lng_lat_1.toLngLat(this.center), this.zoom)
            .subtract({ y: halfHeight, x: halfWidth });
    };
    /**
     * 经纬度坐标转地图像素坐标
     * @param lnglat
     * @param zoom
     */
    Geo.prototype.project = function (lnglat, zoom) {
        var newZoom = zoom === undefined ? this.zoom : zoom;
        return this.crs.lngLatToPoint(lng_lat_1.toLngLat(lnglat), newZoom);
    };
    /**
     * 地图像素坐标转经纬度
     * @param point
     * @param zoom
     */
    Geo.prototype.unproject = function (point, zoom) {
        var newZoom = zoom === undefined ? this.zoom : zoom;
        return this.crs.pointToLngLat(point_1.toPoint(point), newZoom);
    };
    Geo.prototype.distance = function (lnglat1, lnglat2) {
        return this.crs.distance(lng_lat_1.toLngLat(lnglat1), lng_lat_1.toLngLat(lnglat2));
    };
    return Geo;
}(base_1["default"]));
exports["default"] = Geo;
//# sourceMappingURL=geo.js.map