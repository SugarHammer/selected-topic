var tarjan = function tarjan(graph) {
  var index = 0;
  var stack = [];
  var visited = new Map(); // node id -> { onStack, lowlink, index }

  var results = [];

  function dfs(v) {
    var _graph$successors;

    var entry = {
      onStack: true,
      lowlink: index,
      index: index
    };
    visited.set(v, entry);
    index += 1;
    stack.push(v);
    (_graph$successors = graph.successors(v)) === null || _graph$successors === void 0 ? void 0 : _graph$successors.forEach(function (w) {
      var _visited$get;

      if (!visited.has(w)) {
        dfs(w);
        var wEntry = visited.get(w);
        entry.lowlink = Math.min(entry.lowlink, wEntry.lowlink);
      } else if ((_visited$get = visited.get(w)) === null || _visited$get === void 0 ? void 0 : _visited$get.onStack) {
        var _wEntry = visited.get(w);

        entry.lowlink = Math.min(entry.lowlink, _wEntry.index);
      }
    });

    if (entry.lowlink === entry.index) {
      var cmpt = [];
      var w;

      do {
        w = stack.pop();
        var wEntry = visited.get(w);
        wEntry.onStack = false;
        cmpt.push(w);
      } while (v !== w);

      results.push(cmpt);
    }
  }

  graph.nodes().forEach(function (v) {
    if (!visited.has(v)) {
      dfs(v);
    }
  });
  return results;
};

export default tarjan;