{"version":3,"sources":["../../../src/handler/touch/touch_pan.ts"],"names":["TouchPanHandler","options","minTouches","clickTolerance","reset","active","touches","sum","Point","e","points","mapTouches","calculateTransform","preventDefault","length","enabled","touchPointSum","touchDeltaSum","touchDeltaCount","identifier","point","prevPoint","_add","sub","mag","panDelta","div","around"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport { indexTouches } from '../handler_util';\n\nexport default class TouchPanHandler {\n  public enabled: boolean;\n  public active: boolean;\n  public touches: { [key: string]: Point };\n  public minTouches: number;\n  public clickTolerance: number;\n  public sum: Point;\n\n  constructor(options: { clickTolerance: number }) {\n    this.minTouches = 1;\n    this.clickTolerance = options.clickTolerance || 1;\n    this.reset();\n  }\n\n  public reset() {\n    this.active = false;\n    this.touches = {};\n    this.sum = new Point(0, 0);\n  }\n\n  public touchstart(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    return this.calculateTransform(e, points, mapTouches);\n  }\n\n  public touchmove(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.active) {\n      return;\n    }\n    e.preventDefault();\n    return this.calculateTransform(e, points, mapTouches);\n  }\n\n  public touchend(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    this.calculateTransform(e, points, mapTouches);\n\n    if (this.active && mapTouches.length < this.minTouches) {\n      this.reset();\n    }\n  }\n\n  public touchcancel() {\n    this.reset();\n  }\n  public enable() {\n    this.enabled = true;\n  }\n\n  public disable() {\n    this.enabled = false;\n    this.reset();\n  }\n\n  public isEnabled() {\n    return this.enabled;\n  }\n\n  public isActive() {\n    return this.active;\n  }\n\n  private calculateTransform(\n    e: TouchEvent,\n    points: Point[],\n    mapTouches: Touch[],\n  ) {\n    if (mapTouches.length > 0) {\n      this.active = true;\n    }\n\n    const touches = indexTouches(mapTouches, points);\n\n    const touchPointSum = new Point(0, 0);\n    const touchDeltaSum = new Point(0, 0);\n    let touchDeltaCount = 0;\n\n    for (const identifier in touches) {\n      if (touches[identifier]) {\n        const point = touches[identifier];\n        const prevPoint = this.touches[identifier];\n        if (prevPoint) {\n          touchPointSum._add(point);\n          touchDeltaSum._add(point.sub(prevPoint));\n          touchDeltaCount++;\n          touches[identifier] = point;\n        }\n      }\n    }\n\n    this.touches = touches;\n\n    if (touchDeltaCount < this.minTouches || !touchDeltaSum.mag()) {\n      return;\n    }\n    // @ts-ignore\n    const panDelta = touchDeltaSum.div(touchDeltaCount);\n    this.sum._add(panDelta);\n    if (this.sum.mag() < this.clickTolerance) {\n      return;\n    }\n    // @ts-ignore\n    const around = touchPointSum.div(touchDeltaCount);\n\n    return {\n      around,\n      panDelta,\n    };\n  }\n}\n"],"file":"touch_pan.js"}