{"version":3,"sources":["../../src/handler/scroll_zoom.ts"],"names":["LngLat","bezier","ease","interpolate","now","DOM","wheelZoomDelta","defaultZoomRate","wheelZoomRate","maxScalePerFrame","ScrollZoomHandler","map","handler","frameId","isActive","tr","transform","delta","zoomRate","type","Math","abs","scale","exp","fromScale","targetZoom","zoomScale","min","maxZoom","max","minZoom","scaleZoom","startZoom","zoom","easing","smoothOutEasing","finished","t","lastWheelEventTime","k","active","finishTimeout","setTimeout","zooming","triggerRenderFrame","noInertia","needsRenderFrame","zoomDelta","around","aroundPoint","originalEvent","lastWheelEvent","el","getCanvasContainer","enabled","undefined","options","isEnabled","aroundCenter","e","value","deltaMode","window","WheelEvent","DOM_DELTA_LINE","deltaY","nowTime","timeDelta","lastValue","timeout","onTimeout","clearTimeout","shiftKey","start","preventDefault","onScrollFrame","initialEvent","isZooming","pos","mousePos","convert","getCenter","unproject","locationPoint","duration","prevEase","preEase","speed","x","sqrt","y"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { EarthMap } from '../earthmap';\nimport LngLat from '../geo/lng_lat';\nimport Point from '../geo/point';\nimport { Map } from '../map';\nimport { bezier, ease, interpolate, now } from '../util';\nimport DOM from '../utils/dom';\nimport HandlerManager from './handler_manager';\n\n// deltaY value for mouse scroll wheel identification\nconst wheelZoomDelta = 4.000244140625;\n\n// These magic numbers control the rate of zoom. Trackpad events fire at a greater\n// frequency than mouse scroll wheel, so reduce the zoom rate per wheel tick\nconst defaultZoomRate = 1 / 100;\nconst wheelZoomRate = 1 / 450;\n\n// upper bound on how much we scale the map in any single render frame; this\n// is used to limit zoom rate in the case of very fast scrolling\nconst maxScalePerFrame = 2;\n\n/**\n * The `ScrollZoomHandler` allows the user to zoom the map by scrolling.\n */\nclass ScrollZoomHandler {\n  private map: Map | EarthMap;\n  private el: HTMLElement;\n  private enabled: boolean;\n  private active: boolean;\n  private zooming: boolean;\n  private aroundCenter: boolean;\n  private around: LngLat;\n  private aroundPoint: Point;\n  private type: 'wheel' | 'trackpad' | null;\n  private lastValue: number;\n  private timeout: number | null; // used for delayed-handling of a single wheel movement\n  private finishTimeout: number; // used to delay final '{move,zoom}end' events\n\n  private lastWheelEvent: any;\n  private lastWheelEventTime: number;\n\n  private startZoom: number;\n  private targetZoom: number;\n  private delta: number;\n  private easing: (time: number) => number;\n  private prevEase: {\n    start: number;\n    duration: number;\n    easing: (_: number) => number;\n  };\n\n  private frameId: boolean | null;\n  private handler: HandlerManager;\n\n  private defaultZoomRate: number;\n  private wheelZoomRate: number;\n\n  /**\n   * @private\n   */\n  constructor(map: Map | EarthMap, handler: HandlerManager) {\n    this.map = map;\n    this.el = map.getCanvasContainer();\n    this.handler = handler;\n\n    this.delta = 0;\n    this.defaultZoomRate = defaultZoomRate;\n    this.wheelZoomRate = wheelZoomRate;\n  }\n\n  /**\n   * Set the zoom rate of a trackpad\n   * @param {number} [zoomRate=1/100] The rate used to scale trackpad movement to a zoom value.\n   * @example\n   * // Speed up trackpad zoom\n   * map.scrollZoom.setZoomRate(1/25);\n   */\n  public setZoomRate(zoomRate: number) {\n    this.defaultZoomRate = zoomRate;\n  }\n\n  /**\n   * Set the zoom rate of a mouse wheel\n   * @param {number} [wheelZoomRate=1/450] The rate used to scale mouse wheel movement to a zoom value.\n   * @example\n   * // Slow down zoom of mouse wheel\n   * map.scrollZoom.setWheelZoomRate(1/600);\n   */\n  public setWheelZoomRate(zoomRate: number) {\n    this.wheelZoomRate = zoomRate;\n  }\n\n  /**\n   * Returns a Boolean indicating whether the \"scroll to zoom\" interaction is enabled.\n   *\n   * @returns {boolean} `true` if the \"scroll to zoom\" interaction is enabled.\n   */\n  public isEnabled() {\n    return !!this.enabled;\n  }\n\n  /*\n   * Active state is turned on and off with every scroll wheel event and is set back to false before the map\n   * render is called, so _active is not a good candidate for determining if a scroll zoom animation is in\n   * progress.\n   */\n  public isActive() {\n    return !!this.active || this.finishTimeout !== undefined;\n  }\n\n  public isZooming() {\n    return !!this.zooming;\n  }\n\n  /**\n   * Enables the \"scroll to zoom\" interaction.\n   *\n   * @param {Object} [options] Options object.\n   * @param {string} [options.around] If \"center\" is passed, map will zoom around center of map\n   *\n   * @example\n   *   map.scrollZoom.enable();\n   * @example\n   *  map.scrollZoom.enable({ around: 'center' })\n   */\n  public enable(options?: any) {\n    if (this.isEnabled()) {\n      return;\n    }\n    this.enabled = true;\n    this.aroundCenter = options && options.around === 'center';\n  }\n\n  /**\n   * Disables the \"scroll to zoom\" interaction.\n   *\n   * @example\n   *   map.scrollZoom.disable();\n   */\n  public disable() {\n    if (!this.isEnabled()) {\n      return;\n    }\n    this.enabled = false;\n  }\n\n  public wheel(e: WheelEvent) {\n    if (!this.isEnabled()) {\n      return;\n    }\n    // Remove `any` cast when https://github.com/facebook/flow/issues/4879 is fixed.\n    let value =\n      e.deltaMode === window.WheelEvent.DOM_DELTA_LINE\n        ? e.deltaY * 40\n        : e.deltaY;\n    const nowTime = now();\n    const timeDelta = nowTime - (this.lastWheelEventTime || 0);\n\n    this.lastWheelEventTime = nowTime;\n\n    if (value !== 0 && value % wheelZoomDelta === 0) {\n      // This one is definitely a mouse wheel event.\n      this.type = 'wheel';\n    } else if (value !== 0 && Math.abs(value) < 4) {\n      // This one is definitely a trackpad event because it is so small.\n      this.type = 'trackpad';\n    } else if (timeDelta > 400) {\n      // This is likely a new scroll action.\n      this.type = null;\n      this.lastValue = value;\n\n      // Start a timeout in case this was a singular event, and dely it by up to 40ms.\n      // @ts-ignore\n      this.timeout = setTimeout(this.onTimeout, 40, e);\n    } else if (!this.type) {\n      // This is a repeating event, but we don't know the type of event just yet.\n      // If the delta per time is small, we assume it's a fast trackpad; otherwise we switch into wheel mode.\n      this.type = Math.abs(timeDelta * value) < 200 ? 'trackpad' : 'wheel';\n\n      // Make sure our delayed event isn't fired again, because we accumulate\n      // the previous event (which was less than 40ms ago) into this event.\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n        value += this.lastValue;\n      }\n    }\n\n    // Slow down zoom if shift key is held for more precise zooming\n    if (e.shiftKey && value) {\n      value = value / 4;\n    }\n    // Only fire the callback if we actually know what type of scrolling device the user uses.\n    if (this.type) {\n      this.lastWheelEvent = e;\n      this.delta -= value;\n      if (!this.active) {\n        this.start(e);\n      }\n    }\n\n    e.preventDefault();\n  }\n\n  public renderFrame() {\n    return this.onScrollFrame();\n  }\n\n  public reset() {\n    this.active = false;\n  }\n\n  private onScrollFrame = () => {\n    if (!this.frameId) {\n      return;\n    }\n    this.frameId = null;\n\n    if (!this.isActive()) {\n      return;\n    }\n    const tr = this.map.transform;\n\n    // if we've had scroll events since the last render frame, consume the\n    // accumulated delta, and update the target zoom level accordingly\n    if (this.delta !== 0) {\n      // For trackpad events and single mouse wheel ticks, use the default zoom rate\n      const zoomRate =\n        this.type === 'wheel' && Math.abs(this.delta) > wheelZoomDelta\n          ? this.wheelZoomRate\n          : this.defaultZoomRate;\n      // Scale by sigmoid of scroll wheel delta.\n      let scale =\n        maxScalePerFrame / (1 + Math.exp(-Math.abs(this.delta * zoomRate)));\n\n      if (this.delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      const fromScale =\n        typeof this.targetZoom === 'number'\n          ? tr.zoomScale(this.targetZoom)\n          : tr.scale;\n      this.targetZoom = Math.min(\n        tr.maxZoom,\n        Math.max(tr.minZoom, tr.scaleZoom(fromScale * scale)),\n      );\n\n      // if this is a mouse wheel, refresh the starting zoom and easing\n      // function we're using to smooth out the zooming between wheel\n      // events\n      if (this.type === 'wheel') {\n        this.startZoom = tr.zoom;\n        this.easing = this.smoothOutEasing(200);\n      }\n\n      this.delta = 0;\n    }\n\n    const targetZoom =\n      typeof this.targetZoom === 'number' ? this.targetZoom : tr.zoom;\n    const startZoom = this.startZoom;\n    const easing = this.easing;\n\n    let finished = false;\n    let zoom;\n    if (this.type === 'wheel' && startZoom && easing) {\n      const t = Math.min((now() - this.lastWheelEventTime) / 200, 1);\n      const k = easing(t);\n      zoom = interpolate(startZoom, targetZoom, k);\n      if (t < 1) {\n        if (!this.frameId) {\n          this.frameId = true;\n        }\n      } else {\n        finished = true;\n      }\n    } else {\n      zoom = targetZoom;\n      finished = true;\n    }\n\n    this.active = true;\n\n    if (finished) {\n      this.active = false;\n      // @ts-ignore\n      this.finishTimeout = setTimeout(() => {\n        this.zooming = false;\n        this.handler.triggerRenderFrame();\n        // @ts-ignore\n        delete this.targetZoom;\n        // @ts-ignore\n        delete this.finishTimeout;\n      }, 200);\n    }\n\n    return {\n      noInertia: true,\n      needsRenderFrame: !finished,\n      zoomDelta: zoom - tr.zoom,\n      around: this.aroundPoint,\n      originalEvent: this.lastWheelEvent,\n    };\n  };\n\n  private onTimeout(initialEvent: any) {\n    this.type = 'wheel';\n    this.delta -= this.lastValue;\n    if (!this.active && this.start) {\n      this.start(initialEvent);\n    }\n  }\n\n  private start(e: any) {\n    if (!this.delta) {\n      return;\n    }\n\n    if (this.frameId) {\n      this.frameId = null;\n    }\n\n    this.active = true;\n    if (!this.isZooming()) {\n      this.zooming = true;\n    }\n\n    if (this.finishTimeout) {\n      clearTimeout(this.finishTimeout);\n      // @ts-ignore\n      delete this.finishTimeout;\n    }\n\n    const pos = DOM.mousePos(this.el, e);\n\n    this.around = LngLat.convert(\n      this.aroundCenter ? this.map.getCenter() : this.map.unproject(pos),\n    );\n    this.aroundPoint = this.map.transform.locationPoint(this.around);\n    if (!this.frameId) {\n      this.frameId = true;\n      this.handler.triggerRenderFrame();\n    }\n  }\n\n  private smoothOutEasing(duration: number) {\n    let easing = ease;\n\n    if (this.prevEase) {\n      const preEase = this.prevEase;\n      const t = (now() - preEase.start) / preEase.duration;\n      const speed = preEase.easing(t + 0.01) - preEase.easing(t);\n\n      // Quick hack to make new bezier that is continuous with last\n      const x = (0.27 / Math.sqrt(speed * speed + 0.0001)) * 0.01;\n      const y = Math.sqrt(0.27 * 0.27 - x * x);\n\n      easing = bezier(x, y, 0.25, 1);\n    }\n\n    this.prevEase = {\n      start: now(),\n      duration,\n      easing,\n    };\n\n    return easing;\n  }\n}\n\nexport default ScrollZoomHandler;\n"],"file":"scroll_zoom.js"}