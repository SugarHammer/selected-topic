{"version":3,"sources":["../../../src/handler/tap/tap_drag_zoom.ts"],"names":["MAX_TAP_INTERVAL","TapRecognizer","TapDragZoomHandler","tap","numTouches","numTaps","reset","active","swipePoint","swipeTouch","tapTime","e","points","mapTouches","timeStamp","touchstart","length","identifier","touchmove","newSwipePoint","dist","y","preventDefault","zoomDelta","point","touchend","enabled"],"mappings":";;;AAEA,SAASA,gBAAT,QAAiC,yBAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;IAEqBC,kB;AAQnB,gCAAc;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACZ,SAAKC,GAAL,GAAW,IAAIF,aAAJ,CAAkB;AAC3BG,MAAAA,UAAU,EAAE,CADe;AAE3BC,MAAAA,OAAO,EAAE;AAFkB,KAAlB,CAAX;AAKA,SAAKC,KAAL;AACD;;;;WAED,iBAAe;AACb,WAAKC,MAAL,GAAc,KAAd;AACA,aAAO,KAAKC,UAAZ;AACA,aAAO,KAAKC,UAAZ;AACA,aAAO,KAAKC,OAAZ;AACA,WAAKP,GAAL,CAASG,KAAT;AACD;;;WAED,oBAAkBK,CAAlB,EAAiCC,MAAjC,EAAkDC,UAAlD,EAAuE;AACrE,UAAI,KAAKL,UAAT,EAAqB;AACnB;AACD;;AAED,UAAI,KAAKE,OAAL,IAAgBC,CAAC,CAACG,SAAF,GAAc,KAAKJ,OAAnB,GAA6BV,gBAAjD,EAAmE;AACjE,aAAKM,KAAL;AACD;;AAED,UAAI,CAAC,KAAKI,OAAV,EAAmB;AACjB,aAAKP,GAAL,CAASY,UAAT,CAAoBJ,CAApB,EAAuBC,MAAvB,EAA+BC,UAA/B;AACD,OAFD,MAEO,IAAIA,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AAChC,aAAKR,UAAL,GAAkBI,MAAM,CAAC,CAAD,CAAxB;AACA,aAAKH,UAAL,GAAkBI,UAAU,CAAC,CAAD,CAAV,CAAcI,UAAhC;AACD;AACF;;;WAED,mBAAiBN,CAAjB,EAAgCC,MAAhC,EAAiDC,UAAjD,EAAsE;AACpE,UAAI,CAAC,KAAKH,OAAV,EAAmB;AACjB,aAAKP,GAAL,CAASe,SAAT,CAAmBP,CAAnB,EAAsBC,MAAtB,EAA8BC,UAA9B;AACD,OAFD,MAEO,IAAI,KAAKL,UAAT,EAAqB;AAC1B,YAAIK,UAAU,CAAC,CAAD,CAAV,CAAcI,UAAd,KAA6B,KAAKR,UAAtC,EAAkD;AAChD;AACD;;AAED,YAAMU,aAAa,GAAGP,MAAM,CAAC,CAAD,CAA5B;AACA,YAAMQ,IAAI,GAAGD,aAAa,CAACE,CAAd,GAAkB,KAAKb,UAAL,CAAgBa,CAA/C;AACA,aAAKb,UAAL,GAAkBW,aAAlB;AAEAR,QAAAA,CAAC,CAACW,cAAF;AACA,aAAKf,MAAL,GAAc,IAAd;AAEA,eAAO;AACLgB,UAAAA,SAAS,EAAEH,IAAI,GAAG;AADb,SAAP;AAGD;AACF;;;WAED,kBAAgBT,CAAhB,EAA+BC,MAA/B,EAAgDC,UAAhD,EAAqE;AACnE,UAAI,CAAC,KAAKH,OAAV,EAAmB;AACjB,YAAMc,KAAK,GAAG,KAAKrB,GAAL,CAASsB,QAAT,CAAkBd,CAAlB,EAAqBC,MAArB,EAA6BC,UAA7B,CAAd;;AACA,YAAIW,KAAJ,EAAW;AACT,eAAKd,OAAL,GAAeC,CAAC,CAACG,SAAjB;AACD;AACF,OALD,MAKO,IAAI,KAAKN,UAAT,EAAqB;AAC1B,YAAIK,UAAU,CAACG,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,eAAKV,KAAL;AACD;AACF;AACF;;;WAED,uBAAqB;AACnB,WAAKA,KAAL;AACD;;;WAED,kBAAgB;AACd,WAAKoB,OAAL,GAAe,IAAf;AACD;;;WAED,mBAAiB;AACf,WAAKA,OAAL,GAAe,KAAf;AACA,WAAKpB,KAAL;AACD;;;WAED,qBAAmB;AACjB,aAAO,KAAKoB,OAAZ;AACD;;;WAED,oBAAkB;AAChB,aAAO,KAAKnB,MAAZ;AACD;;;;;;SA/FkBL,kB","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport { MAX_TAP_INTERVAL } from './single_tap_recognizer';\nimport TapRecognizer from './tap_recognizer';\n\nexport default class TapDragZoomHandler {\n  public enabled: boolean;\n  public active: boolean;\n  public swipePoint: Point;\n  public swipeTouch: number;\n  public tapTime: number;\n  public tap: TapRecognizer;\n\n  constructor() {\n    this.tap = new TapRecognizer({\n      numTouches: 1,\n      numTaps: 1,\n    });\n\n    this.reset();\n  }\n\n  public reset() {\n    this.active = false;\n    delete this.swipePoint;\n    delete this.swipeTouch;\n    delete this.tapTime;\n    this.tap.reset();\n  }\n\n  public touchstart(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (this.swipePoint) {\n      return;\n    }\n\n    if (this.tapTime && e.timeStamp - this.tapTime > MAX_TAP_INTERVAL) {\n      this.reset();\n    }\n\n    if (!this.tapTime) {\n      this.tap.touchstart(e, points, mapTouches);\n    } else if (mapTouches.length > 0) {\n      this.swipePoint = points[0];\n      this.swipeTouch = mapTouches[0].identifier;\n    }\n  }\n\n  public touchmove(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.tapTime) {\n      this.tap.touchmove(e, points, mapTouches);\n    } else if (this.swipePoint) {\n      if (mapTouches[0].identifier !== this.swipeTouch) {\n        return;\n      }\n\n      const newSwipePoint = points[0];\n      const dist = newSwipePoint.y - this.swipePoint.y;\n      this.swipePoint = newSwipePoint;\n\n      e.preventDefault();\n      this.active = true;\n\n      return {\n        zoomDelta: dist / 128,\n      };\n    }\n  }\n\n  public touchend(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    if (!this.tapTime) {\n      const point = this.tap.touchend(e, points, mapTouches);\n      if (point) {\n        this.tapTime = e.timeStamp;\n      }\n    } else if (this.swipePoint) {\n      if (mapTouches.length === 0) {\n        this.reset();\n      }\n    }\n  }\n\n  public touchcancel() {\n    this.reset();\n  }\n\n  public enable() {\n    this.enabled = true;\n  }\n\n  public disable() {\n    this.enabled = false;\n    this.reset();\n  }\n\n  public isEnabled() {\n    return this.enabled;\n  }\n\n  public isActive() {\n    return this.active;\n  }\n}\n"],"file":"tap_drag_zoom.js"}