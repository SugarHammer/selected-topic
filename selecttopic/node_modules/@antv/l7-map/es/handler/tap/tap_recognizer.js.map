{"version":3,"sources":["../../../src/handler/tap/tap_recognizer.ts"],"names":["SingleTapRecognizer","MAX_DIST","MAX_TAP_INTERVAL","TapRecognizer","options","singleTap","numTaps","reset","lastTime","Infinity","lastTap","count","e","points","mapTouches","touchstart","touchmove","tap","touchend","soonEnough","timeStamp","closeEnough","dist"],"mappings":";;;AAEA,OAAOA,mBAAP,IACEC,QADF,EAEEC,gBAFF,QAGO,yBAHP;;IAKqBC,a;AAOnB,yBAAYC,OAAZ,EAA8D;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC5D,SAAKC,SAAL,GAAiB,IAAIL,mBAAJ,CAAwBI,OAAxB,CAAjB;AACA,SAAKE,OAAL,GAAeF,OAAO,CAACE,OAAvB;AACA,SAAKC,KAAL;AACD;;;;WAED,iBAAe;AACb,WAAKC,QAAL,GAAgBC,QAAhB;AACA,aAAO,KAAKC,OAAZ;AACA,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKN,SAAL,CAAeE,KAAf;AACD;;;WAED,oBAAkBK,CAAlB,EAAiCC,MAAjC,EAAkDC,UAAlD,EAAuE;AACrE,WAAKT,SAAL,CAAeU,UAAf,CAA0BH,CAA1B,EAA6BC,MAA7B,EAAqCC,UAArC;AACD;;;WAED,mBAAiBF,CAAjB,EAAgCC,MAAhC,EAAiDC,UAAjD,EAAsE;AACpE,WAAKT,SAAL,CAAeW,SAAf,CAAyBJ,CAAzB,EAA4BC,MAA5B,EAAoCC,UAApC;AACD;;;WAED,kBAAgBF,CAAhB,EAA+BC,MAA/B,EAAgDC,UAAhD,EAAqE;AACnE,UAAMG,GAAG,GAAG,KAAKZ,SAAL,CAAea,QAAf,CAAwBN,CAAxB,EAA2BC,MAA3B,EAAmCC,UAAnC,CAAZ;;AACA,UAAIG,GAAJ,EAAS;AACP,YAAME,UAAU,GAAGP,CAAC,CAACQ,SAAF,GAAc,KAAKZ,QAAnB,GAA8BN,gBAAjD;AACA,YAAMmB,WAAW,GAAG,CAAC,KAAKX,OAAN,IAAiB,KAAKA,OAAL,CAAaY,IAAb,CAAkBL,GAAlB,IAAyBhB,QAA9D;;AAEA,YAAI,CAACkB,UAAD,IAAe,CAACE,WAApB,EAAiC;AAC/B,eAAKd,KAAL;AACD;;AAED,aAAKI,KAAL;AACA,aAAKH,QAAL,GAAgBI,CAAC,CAACQ,SAAlB;AACA,aAAKV,OAAL,GAAeO,GAAf;;AAEA,YAAI,KAAKN,KAAL,KAAe,KAAKL,OAAxB,EAAiC;AAC/B,eAAKC,KAAL;AACA,iBAAOU,GAAP;AACD;AACF;AACF;;;;;;SA/CkBd,a","sourcesContent":["// @ts-ignore\nimport Point from '../../geo/point';\nimport SingleTapRecognizer, {\n  MAX_DIST,\n  MAX_TAP_INTERVAL,\n} from './single_tap_recognizer';\n\nexport default class TapRecognizer {\n  public singleTap: SingleTapRecognizer;\n  public numTaps: number;\n  public lastTime: number;\n  public lastTap: Point;\n  public count: number;\n\n  constructor(options: { numTaps: number; numTouches: number }) {\n    this.singleTap = new SingleTapRecognizer(options);\n    this.numTaps = options.numTaps;\n    this.reset();\n  }\n\n  public reset() {\n    this.lastTime = Infinity;\n    delete this.lastTap;\n    this.count = 0;\n    this.singleTap.reset();\n  }\n\n  public touchstart(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    this.singleTap.touchstart(e, points, mapTouches);\n  }\n\n  public touchmove(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    this.singleTap.touchmove(e, points, mapTouches);\n  }\n\n  public touchend(e: TouchEvent, points: Point[], mapTouches: Touch[]) {\n    const tap = this.singleTap.touchend(e, points, mapTouches);\n    if (tap) {\n      const soonEnough = e.timeStamp - this.lastTime < MAX_TAP_INTERVAL;\n      const closeEnough = !this.lastTap || this.lastTap.dist(tap) < MAX_DIST;\n\n      if (!soonEnough || !closeEnough) {\n        this.reset();\n      }\n\n      this.count++;\n      this.lastTime = e.timeStamp;\n      this.lastTap = tap;\n\n      if (this.count === this.numTaps) {\n        this.reset();\n        return tap;\n      }\n    }\n  }\n}\n"],"file":"tap_recognizer.js"}