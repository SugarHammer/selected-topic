import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { isMini } from '@antv/l7-utils';

var TouchZoomRotateHandler = function () {
  function TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom) {
    _classCallCheck(this, TouchZoomRotateHandler);

    _defineProperty(this, "el", void 0);

    _defineProperty(this, "touchZoom", void 0);

    _defineProperty(this, "touchRotate", void 0);

    _defineProperty(this, "tapDragZoom", void 0);

    _defineProperty(this, "rotationDisabled", void 0);

    _defineProperty(this, "enabled", void 0);

    this.el = el;
    this.touchZoom = touchZoom;
    this.touchRotate = touchRotate;
    this.tapDragZoom = tapDragZoom;
    this.rotationDisabled = false;
    this.enabled = true;
  }

  _createClass(TouchZoomRotateHandler, [{
    key: "enable",
    value: function enable(options) {
      this.touchZoom.enable(options);

      if (!this.rotationDisabled) {
        this.touchRotate.enable(options);
      }

      this.tapDragZoom.enable();

      if (!isMini) {
        this.el.classList.add('l7-touch-zoom-rotate');
      }
    }
  }, {
    key: "disable",
    value: function disable() {
      this.touchZoom.disable();
      this.touchRotate.disable();
      this.tapDragZoom.disable();

      if (!isMini) {
        this.el.classList.remove('l7-touch-zoom-rotate');
      }
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.touchZoom.isEnabled() && (this.rotationDisabled || this.touchRotate.isEnabled()) && this.tapDragZoom.isEnabled();
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.touchZoom.isActive() || this.touchRotate.isActive() || this.tapDragZoom.isActive();
    }
  }, {
    key: "disableRotation",
    value: function disableRotation() {
      this.rotationDisabled = true;
      this.touchRotate.disable();
    }
  }, {
    key: "enableRotation",
    value: function enableRotation() {
      this.rotationDisabled = false;

      if (this.touchZoom.isEnabled()) {
        this.touchRotate.enable();
      }
    }
  }]);

  return TouchZoomRotateHandler;
}();

export { TouchZoomRotateHandler as default };
//# sourceMappingURL=touch_zoom_rotate.js.map